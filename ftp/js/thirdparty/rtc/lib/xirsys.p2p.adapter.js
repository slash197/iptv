'use strict';var RTCPeerConnection=RTCPeerConnection||null,RTCIceCandidate=RTCIceCandidate||null,RTCSessionDescription=RTCSessionDescription||null,getUserMedia=getUserMedia||null,attachMediaStream=null,detachMediaStream=null,reattachMediaStream=null,webrtcDetectedBrowser=null;if(navigator.mozGetUserMedia){console.log("This appears to be Firefox");webrtcDetectedBrowser="firefox";RTCPeerConnection=mozRTCPeerConnection;RTCSessionDescription=mozRTCSessionDescription;RTCIceCandidate=mozRTCIceCandidate;getUserMedia=navigator.mozGetUserMedia.bind(navigator);attachMediaStream=function(a,b){console.log("Attaching media stream");a.mozSrcObject=b;a.play()};detachMediaStream=function(a){console.log("detaching media stream");a.pause();a.mozSrcObject=null};reattachMediaStream=function(a,b){console.log("Reattaching media stream");a.mozSrcObject=b.mozSrcObject;a.play()};if(!MediaStream.prototype.getVideoTracks){MediaStream.prototype.getVideoTracks=function(){return[]}}if(!MediaStream.prototype.getAudioTracks){MediaStream.prototype.getAudioTracks=function(){return[]}}}else if(navigator.webkitGetUserMedia){console.log("This appears to be Chrome");webrtcDetectedBrowser="chrome";RTCPeerConnection=webkitRTCPeerConnection;getUserMedia=navigator.webkitGetUserMedia.bind(navigator);attachMediaStream=function(a,b){if(typeof a.srcObject!=='undefined'){a.srcObject=b}else if(typeof a.mozSrcObject!=='undefined'){a.mozSrcObject=b}else if(typeof a.src!=='undefined'){a.src=URL.createObjectURL(b)}else{console.log('Error attaching stream to element.')}};detachMediaStream=function(a){console.log("detaching media stream");a.pause();if(typeof a.srcObject!=='undefined'){a.srcObject=null}else if(typeof a.mozSrcObject!=='undefined'){a.mozSrcObject=null}else if(typeof a.src!=='undefined'){a.src=null}};reattachMediaStream=function(a,b){a.src=b.src};if(!webkitMediaStream.prototype.getVideoTracks){webkitMediaStream.prototype.getVideoTracks=function(){return this.videoTracks};webkitMediaStream.prototype.getAudioTracks=function(){return this.audioTracks}}if(!webkitRTCPeerConnection.prototype.getLocalStreams){webkitRTCPeerConnection.prototype.getLocalStreams=function(){return this.localStreams};webkitRTCPeerConnection.prototype.getRemoteStreams=function(){return this.remoteStreams}}}else{console.log("Browser does not appear to be WebRTC-capable")}