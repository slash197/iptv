



///#youtube:	youtube.js
GWareIPTV.UIBase.Youtube.onLoad = function(html){
    this.html = html;
    this.videos = [];
    this.categories = [];

    this.loadCategories(this.loaded.bind(this));
};

GWareIPTV.UIBase.Youtube.loaded = function(){
    var category = null, menu = [];

    this.resetPageLayout(this.html);

    menu.push({html: _('Search'), data: {'data-fn': 'searchPanelShow'}});

    for (var i = 0; i < this.categories.length; i++)
    {
        category = this.categories[i];

        if (category.name !== 'Music')
        {
            menu.push({
                html: category.name,
                data: {
                    'data-id': category.id,
                    'data-channel-id': category.channelId,
                    'data-name': category.name,
                    'data-fn': 'loadCategory'
                }
            });
        }
    }

    this.makeZone({
        items: menu,
        selector: '.sub-menu',
        selection: 'bg'
    });

    App.reports.set({type: 19});

    this.fnBack = App.pageDefault.page;
    this.enableMenu('Youtube');

    this.select($('.sub-menu .item:nth-child(2)'));
    this.loadCategory(this.object.data());
};

GWareIPTV.UIBase.Youtube.loadCategory = function(item){
    $('.sub-menu .item').removeClass('selected');
    $('.sub-menu .item[data-id="' + item.id + '"]').addClass('selected');

    this.loading($('.clips'));
    this.videos = [];

    xhr({
        url: 'https://www.googleapis.com/youtube/v3/videos?part=snippet&maxResults=50&chart=mostPopular&videoCategoryId=' + item.id + '&key=' + App.settings.youtubeKey,
        success: function(data){
            var
                rows = [[], [], [], []],
                width = $('.clips').width() / 2,
                height = (($('.clips').outerHeight() - 4) / 4 ),
                index = 0;

            data.items.forEach(function(video, i){
                var thumb = '';

                if (video.snippet.thumbnails)
                {
                    thumb = (typeof video.snippet.thumbnails.standard === 'undefined') ? video.snippet.thumbnails['default'].url : video.snippet.thumbnails.standard.url;
                }

                this.videos.push({
                    id: video.id,
                    image: thumb,
                    title: video.snippet.title,
                    description: video.snippet.description
                });

                rows[index].push({
                    html: '<div class="image-holder" style="background-image: url(' + thumb + ')"></div>' +
                        '<div class="content">' +
                        '<div class="title">' + video.snippet.title + '</div>' +
                        '<div class="description">' + video.snippet.description.limit(256) + '</div>' +
                        '</div>',
                    data: {
                        'data-index': i,
                        'data-fn': 'init',
                        'data-title': video.snippet.title,
                        'data-desc': video.snippet.description,
                        'data-back': 'Youtube',
                        'data-page': 'YoutubePlayer'
                    },
                    style: {
                        'height': height + 'px',
                        'width': width + 'px'
                    }
                });
                index = (index < 3) ? index + 1 : 0;
            }.bind(this));

            this.makeZone({
                rows: rows,
                selector: '.clips',
                selection: 'bg',
                scroller: {
                    width: 'auto',
                    height: 'auto'
                },
                showArrows: true
            });

            //	this.select($('.clips .scroller .row:nth-child(1) .item:nth-child(1)'));
        }.bind(this),
        error: function(a, b, c){
            this.notification('An error occured, please try again later');
        }.bind(this)
    });
};

GWareIPTV.UIBase.Youtube.loadCategories = function(callback){
    xhr({
        url: 'https://www.googleapis.com/youtube/v3/videoCategories?part=snippet&regionCode=US&key=' + App.settings.youtubeKey,
        success: function(data){
            for (var i = 0; i < data.items.length; i++)
            {
                var category = data.items[i];

                this.categories.push({
                    id: category.id,
                    channelId: category.snippet.channelId,
                    name: category.snippet.title
                });
            };

            callback();
        }.bind(this)
    });
};

GWareIPTV.UIBase.Youtube.searchPanelGo = function(){
    var
        self = this,
        term = $('input[name="term"]').val().toLowerCase();

    if (term !== '')
    {
        $('.clips').html('<div class="spinner-holder"><span class="text">Loading</span><div class="loader"></div></div>');

        this.videos = [];
        xhr({
            url: 'https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=50&q=' + term + '&key=' + App.settings.youtubeKey,
            success: function(data){
                var
                    rows = [[], [], [], []],
                    index = 0;

                self.searchPanelHide();
                data.items.forEach(function(video, i){
                    var thumb = (typeof video.snippet.thumbnails.standard === 'undefined') ? video.snippet.thumbnails['default'].url : video.snippet.thumbnails.standard.url;

                    self.videos.push({
                        id: video.id.videoId,
                        image: thumb,
                        title: video.snippet.title,
                        description: video.snippet.description
                    });

                    rows[index].push({
                        html:   '<div class="image-holder" style="background-image: url(' + thumb + ')"></div>' +
                            '<div class="content">' +
                            '<div class="title">' + video.snippet.title + '</div>' +
                            '<div class="description">' + video.snippet.description.limit(256) + '</div>' +
                            '</div>',
                        data: {
                            'data-index': i,
                            'data-fn': 'init',
                            'data-page': 'YoutubePlayer',
                            'data-back': 'Youtube'
                        },
                        style: {
                            'height': ( ($('.clips').outerHeight() - 4) / 4 ) + 'px',
                            'width': ( $(window).width() / 2 ) + 'px'
                        }
                    });
                    index = (index < 3) ? index + 1 : 0;
                });

                self.makeZone({
                    rows: rows,
                    selector: '.clips',
                    selection: 'bg',
                    scroller: {
                        width: 'auto',
                        height: 'auto'
                    }
                });
            }
        });
    }
};
///youtube:	youtube.player.js
GWareIPTV.UIBase.YoutubePlayer.onLoad = function(html){
    this.videos = App[App.page.item.back].videos;
    this.index = this.item.index;
    this.lastSwipe = '';
    this.isSwiping = false;
    this.quality = store.get('iptv.youtube.quality') || '360p';
    this.isPlaying = false;

    this.resetPageLayout(html, true);

    this.makeZone({
        rows: [[{html: '&nbsp;', style: {width: window.innerWidth + 'px', height: window.innerHeight + 'px'}}]],
        selector: '.player-holder',
        selection: 'none',
        events: {
            keyUp: function(){
                $('.panel').each(function(){
                    $(this).attr({ 'data-x': $(this).position().left });
                });
                $('.info').css('bottom', 0).addClass('animating');

                this.swipe('left', 0, 0, 1);
            }.bind(this),
            keyLeft: this.preselect.bind(this, 'rewind'),
            keyRight: this.preselect.bind(this, 'forward'),
            keyDown: function(){
                $('.panel').each(function(){
                    $(this).attr({ 'data-x': $(this).position().left });
                });
                $('.info').css('bottom', 0).addClass('animating');

                this.swipe('right', 0, 0, 1);
            }.bind(this),
            keyBack: this.stop.bind(this)
        }
    });

    this.reload();
    this.fnBack = this.item.back;
};

GWareIPTV.UIBase.YoutubePlayer.reload = function(){
    var
        indexNext = (this.index < this.videos.length - 1) ? this.index + 1 : 0,
        indexPrev = (this.index > 0) ? this.index - 1 : this.videos.length - 1;

    App.reports.set({
        type: 18,
        name: this.videos[this.index].title
    });

    App.player.setup({
        //url: 'http:' + App.baseURL.nodeBQ + 'youtube/get?id=' + this.videos[this.index].id + '&quality=' + this.quality,
        url: 'http:' + App.settings.url.web + 'youtube/getvideo.php?videoid=' + this.videos[this.index].id,
        events: {
            complete: function(){
                this.next();
            }.bind(this),

            time: function(o){

                $('.info .progress .bar').css('width', o.percent + '%');
                $('.progress-holder .remaining').html(o.remaining.toCounter());
                $('.progress-holder .duration').html(o.duration.toCounter());
            },

            error: function(e){
                lg(e);
                pp({
                    message: _('Stream is not available at this moment [2003]'),
                    buttons: [
                        {label: _('OK'), data: {'data-fn': 'btnBack'}}
                    ]
                });
            },

            ready: function(){
                App.player.play();
            }
        }
    });

    // fix info panels
    if (this.lastSwipe === 'left')
    {
        $('.panel-left, .panel-middle').remove();
        $('.panel-right').addClass('panel-middle').removeClass('panel-right').css('left','0');
    }
    if (this.lastSwipe === 'right')
    {
        $('.panel-right, .panel-middle').remove();
        $('.panel-left').addClass('panel-middle').removeClass('panel-left').css('left','0');
    }

    if (1 === 1)
    {
        $('.info').prepend(this.clonePanel('left')).append(this.clonePanel('right'));

        $('.panel-left').attr('data-index', indexPrev);
        $('.panel-right').attr('data-index', indexNext);
    }

    $('.panel-middle').attr('data-index', this.index);
    $('.panel-left .sub-menu, .panel-right .sub-menu').html('');

    this.makeZone({
        rows: [[
            {html: '<span class="ico ico-fast-rewind"></span>', data: {'data-fn': 'rewind'}},
            {html: '<span class="ico ico-pause"></span>', data: {'data-fn': 'pause'}},
            {html: '<span class="ico ico-stop"></span>', data: {'data-fn': 'stop'}},
            {html: '<span class="ico ico-fast-forward"></span>', data: {'data-fn': 'forward'}}
        ]],
        selector: '.panel-middle .sub-menu',
        selection: 'bg',
        layer: 'info',
        events: {
            keyBack: this.infoHide.bind(this)
        }
    });

    this.infoUpdate();
    this.preselect('pause');
};

GWareIPTV.UIBase.YoutubePlayer.clonePanel = function(where){
    var panel = $('.panel-middle').clone();
    panel
        .removeClass('panel-middle')
        .addClass('panel-' + where)
        .css('left', (where === 'left') ? '-100%' : '100%')
        .attr('data-x', '');

    return panel;
};

GWareIPTV.UIBase.YoutubePlayer.infoUpdate = function(){
    $('.panel').each(function(){
        var video = App.YoutubePlayer.videos[parseInt($(this).attr('data-index'))];

        if (video)
        {
            $(this).find('.logo img').attr('src', video.image);
            $(this).find('.title').html(video.title);
            $(this).find('.description').html(video.description);
        }
    });
};

GWareIPTV.UIBase.YoutubePlayer.rewind = function(){
    App.player.rewind();
};

GWareIPTV.UIBase.YoutubePlayer.forward = function(){
    App.player.forward();
};
GWareIPTV.UIBase.YoutubePlayer.pause = function(){
    if(this.isPlaying == true){
        this.isPlaying = false
        window.clearTimeout(this.timerInfo);
        App.player.pause();
    }else{
        this.isPlaying = true;
        this.timerInfo = setTimeout(this.infoHide.bind(this), 5000);
        App.player.pause();
    }
}
GWareIPTV.UIBase.YoutubePlayer.play = function(){
    this.isPlaying = true;
    App.player.play();
};

GWareIPTV.UIBase.YoutubePlayer.stop = function(){
    if (this.prompt.active) return false;

    this.infoHide();

    pp({
        message: _('Are you sure you want to stop this movie?'),
        buttons: [
            {label: _('Yes'), data: {'data-fn': 'btnBack'}},
            {label: _('Cancel'), data: {}}
        ]
    });
};

GWareIPTV.UIBase.YoutubePlayer.selectPopup = function(){

    if ($('.info').position().top !== $(window).height())
    {
        this.infoHide();
        return;
    }

    switch (this.screenZone)
    {
        case 'left':
            this.keyDown();
            break;

        case 'right':
            this.keyUp();
            break;

        default:
            this.preselect('play');
    }

    this.screenZone = '';
};

GWareIPTV.UIBase.YoutubePlayer.swiping = function(event, phase, direction, distance, duration, fingers, fingerData, currentDirection){

    if (direction === 'left') distance *= -1;

    switch (phase)
    {
        case 'start':
            $('.panel').each(function(){
                $(this).attr({ 'data-x': $(this).position().left });
            });

            break;

        case 'move':
            if (direction === 'left' || direction === 'right')
            {
                this.isSwiping = true;
                clearTimeout(App.YoutubePlayer.timerInfo);
                $('.info').css('bottom', 0).addClass('animating');
                $('.panel').each(function(){
                    $(this).css('left', parseInt($(this).attr('data-x'), 10) + distance);
                });
            }

            break;

        case 'end':
            if (!App.mobile) App.YoutubePlayer.swipe(direction, distance, 0, 1);
            this.isSwiping = false;

            break;

        case 'cancel':
            if (this.swiping)
            {
                $('.info').css({ 'bottom': -220 }).removeClass('animating');
                this.isSwiping = false;
            }

            break;

    }
};

GWareIPTV.UIBase.YoutubePlayer.swipe = function(direction, distance, duration, fingerCount, fingerData){
    if (fingerCount !== 1) return;

    switch (direction)
    {
        case 'right':
            $('.panel').each(function(){
                var slideTo = 0;

                if ($(this).hasClass('panel-left')) slideTo = 0;
                if ($(this).hasClass('panel-middle')) slideTo = $(window).width();
                if ($(this).hasClass('panel-right')) slideTo = $(window).width();

                $(this).animate({ left: slideTo }, 100, 'easeOutCubic');
            });

            setTimeout(function(){
                $('.info').removeClass('animating');
                clearTimeout(App.YoutubePlayer.timerInfo);

                App.YoutubePlayer.lastSwipe = 'right';
                App.YoutubePlayer.timerInfo = setTimeout(App.YoutubePlayer.infoHide, 5000);
                App.YoutubePlayer.prev();
            }, 200);

            break;

        case 'left':
            $('.panel').each(function(){
                var slideTo = 0;

                if ($(this).hasClass('panel-left')) slideTo = $(window).width() * -1;
                if ($(this).hasClass('panel-middle')) slideTo = $(window).width() * -1;
                if ($(this).hasClass('panel-right')) slideTo = 0;

                $(this).animate({ left: slideTo }, 100, 'easeOutCubic');
            });

            setTimeout(function(){
                $('.info').removeClass('animating');
                clearTimeout(App.YoutubePlayer.timerInfo);

                App.YoutubePlayer.lastSwipe = 'left';
                App.YoutubePlayer.timerInfo = setTimeout(App.YoutubePlayer.infoHide, 5000);
                App.YoutubePlayer.next();
            }, 200);

            break;

        case 'down':
            this.infoShow();
            break;
    }
};

GWareIPTV.UIBase.YoutubePlayer.prev = function(){
    this.index = (this.index > 0) ? this.index - 1 : this.videos.length - 1;
    this.reload();
};

GWareIPTV.UIBase.YoutubePlayer.next = function(){
    this.index = (this.index < this.videos.length - 1) ? this.index + 1 : 0;
    this.reload();
};

GWareIPTV.UIBase.YoutubePlayer.btnBack = function(){
    this.pageLoader('Youtube', 'init');
};

GWareIPTV.UIBase.YoutubePlayer.keyRewind = GWareIPTV.UIBase.YoutubePlayer.rewind;

GWareIPTV.UIBase.YoutubePlayer.keyUp = GWareIPTV.UIBase.YoutubePlayer.next;

GWareIPTV.UIBase.YoutubePlayer.keyDown = GWareIPTV.UIBase.YoutubePlayer.prev;

GWareIPTV.UIBase.YoutubePlayer.keyForward = GWareIPTV.UIBase.YoutubePlayer.forward;

GWareIPTV.UIBase.YoutubePlayer.keyPlay = GWareIPTV.UIBase.YoutubePlayer.play;

GWareIPTV.UIBase.YoutubePlayer.keyStop = GWareIPTV.UIBase.YoutubePlayer.stop;

///vod:     vod.browse.js
GWareIPTV.UIBase.VODBrowse.onLoad = function(html){
    if (this.item)
    {
        this.lastId = this.item.id;
        this.back = this.item.back;
        this.storeId = this.item.id;
    }
    else
    {
        this.storeId = this.lastId;
    }

    this.store = App.util.getVODStore(this.storeId);
    this.resetPageLayout(html);

    var submenu = [
        {html: _('Back'), data: {'data-fn': 'btnBack'}},
        {html: _('Search'),	data: {'data-fn': 'searchPanelShow'}}
    ];

    this.store.categories.forEach(function(category, index){
        submenu.push({
            html: category.name,
            data: {
                'data-index': index,
                'data-fn': 'loadCategory'
            }
        });
    });

    this.makeZone({
        items: submenu,
        selector: '.sub-menu',
        selection: 'bg'
    });

    this.select($('.sub-menu .item[data-index="0"]'));
    this.enableMenu('VOD');

    this.fnBack = this.back;
    this.loadCategory(this.object.data());
};

GWareIPTV.UIBase.VODBrowse.loadCategory = function(item){
    var
        rows = [[], []],
        index = 0;

    $('.sub-menu .item').each(function(){ $(this).removeClass('selected'); });
    $('.sub-menu .item[data-index="' + item.index + '"]').addClass('selected');

    this.movieIds = [];

    for (var i = 0; i < this.store.categories[item.index].movies.length; i++)
    {
        var
            movie = this.store.categories[item.index].movies[i],
            coverIcons = App.util.createCoverIcons({
                id: movie.id,
                type: 'movie',
                icons: ['purchase', 'watch']
            });

        App.VODBrowse.movieIds.push(movie.id);

        rows[index].push({
            //html: '<img src="' + App.settings.url.image + movie.poster + '" />' + coverIcons,
            html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/'+ movie.poster +'" />' + coverIcons,
            data: {
                'data-id': movie.id,
                'data-fn': 'init',
                'data-page': 'VODDetail'
            }
        });
        index = (index === 0) ? 1 : 0;
    }

    if (!this.movieIds.length)
    {
        $('.movies').html('<p class="empty">' + _('This category is empty') + '</p>');
        return false;
    }

    this.makeZone({
        rows: rows,
        selector: '.movies',
        selection: 'border',
        scroller: {
            width: 'auto',
            height: '100%'
        },
        pager: {
            type: 'cols',
            count: GWareConfig.zoneItemCount
        },
        showArrows: true
    });

    App.reports.set({
        type: 10,
        name: this.store.categories[item.index].name,
        id: this.store.categories[item.index].id
    });
};

GWareIPTV.UIBase.VODBrowse.searchPanelGo = function(){
    var
        term = $('input[name="term"]').val(),
        search = App.VOD.search(this.store, term),
        results = [];

    search.forEach(function(movie){
        results.push({
            html: movie.name,
            data: {
                'data-id': movie.id,
                'data-fn': 'init',
                'data-page': 'VODDetail',
                'data-close-search': true
            }
        });
    });

    this.searchPanelRenderResults(results);
};

GWareIPTV.UIBase.VODBrowse.btnBack = function(){
    this.pageLoader(this.fnBack);
};
///vod: 	vod.detail.js
GWareIPTV.UIBase.VODDetail.onLoad = function(html){
    this.resetPageLayout(html);
    this.get(this.loaded);
    this.fnBack = 'VODBrowse';
    this.enableMenu('VOD');
};

GWareIPTV.UIBase.VODDetail.loaded = function(movie){
    this.movie = movie;
    this.ppv = GWareBase64.encode(JSON.stringify({
        enabled: movie.is_payperview,
        prices: movie.movieprices,
        rule: movie.rule_payperview,
        id: movie.id,
        name: movie.name,
        type: 'movie'
    }));

    this.ppvNext = GWareBase64.encode(JSON.stringify({
        'data-fn': 'init',
        'data-page': 'VODMovie',
        'data-id': movie.id
    }));
//'//' + App.settings.url.movie + 'images/movies/'+ movie.poster +'
    $('.poster img').attr('src',  App.settings.server_location.movie_location + '/images/movies/'+ movie.poster);
    //$('.poster img').attr('src', App.settings.url.image + movie.poster);
    $('.title').html(movie.name);
    $('.rating').html(this.rating2stars(movie.rating));
    $('.description').html(this.getDescription(movie.moviedescriptions));
    $('.year').html(movie.year);
    $('.language').html(movie.language);
    $('.duration').html(_('{$} minutes', movie.length));
    $('.actors').html(this.limitActors((movie.actors ? movie.actors.limit(128) : _('No information available'))));
    $('.tags').html(this.getTags(movie.tags));

    this.loadAfter();

    if (typeof App.VODBrowse === 'undefined' || typeof App.VODBrowse.movieIds === 'undefined')
    {
        $('.sub-menu .item[data-fn="prev"]').hide();
        $('.sub-menu .item[data-fn="next"]').hide();
        this.fnBack = App.pageDefault.page;
    }

    this.select($('.sub-menu .item[data-fn="ppvValidate"]'));
    this.enableMenu();

    App.reports.set({
        type: 11,
        name: movie.name,
        id: movie.id
    });
};

GWareIPTV.UIBase.VODDetail.loadAfter = function(){
    if (this.movie.backdrop !== null)
    {
        $('body').css({

            //'//'+ App.settings.url.serie + 'images/series/'+  season.backdrop,
            // 'background-image': 'url("' + App.settings.url.image + this.movie.backdrop + '")',
            'background-image': 'url("' + App.settings.server_location.movie_location + '/images/movies/' + this.movie.backdrop + '")',
            'background-repeat': 'no-repeat',
            'background-size': 'cover'
        });
    }

    var menu = [[
        {html: _('Previous'), data: {'data-fn': 'prev'}},
        {html: _('Back'), data: {'data-fn': 'btnBack'}},
        {html: _('Watch Trailer'), data: {'data-fn':'init', 'data-page': 'VODTrailer', 'data-name': this.movie.name, 'data-tk': this.movie.toktype_trailer,'data-length': this.movie.length, 'data-url': this.movie.trailer_url}},
        {html: _('Watch Movie'), data: {'data-fn': 'ppvValidate', 'data-ppv': this.ppv, 'data-next': this.ppvNext}},
        {html: _('Download'), data: {'data-fn': 'selectDownloadSource'}},
        {html: _('Next'), data: {'data-fn': 'next'}}
    ]];

    if (!App.settings.offlineMode || (App.user.device.category !== 'mobile')) menu[0].splice(4, 1);

    this.makeZone({
        rows: menu,
        selector: '.sub-menu',
        selection: 'bg'
    });
};

GWareIPTV.UIBase.VODDetail.downloadSource = function(data){
    this.pageLoader(null, 'offlineMediaDownload', {
        type: 'movie',
        id: this.movie.id,
        name: this.movie.name,
        url: this.movie.streams[data.index].url
    });
};

GWareIPTV.UIBase.VODDetail.selectDownloadSource = function(){
    var btnPopup = [];

    if (this.movie.streams.length > 1)
    {
        for (var i = 0; i < this.movie.streams.length; i++)
        {
            btnPopup.push({label: this.movie.streams[i].language, data: {'data-fn': 'downloadSource', 'data-index': i}});
        }

        pp({
            message: _('Choose movie language'),
            buttons: btnPopup,
            isVertical: btnPopup.length > 3
        });

        return false;
    }

    this.downloadSource({index: 0});
};

GWareIPTV.UIBase.VODDetail.getDescription = function(items){
    for (var i = 0; i < items.length; i++)
    {
        if (items[i].language === App.language.current) return items[i].description.limit(512);
    }

    if (items.length) return items[0].description.limit(512);

    return '';
};

GWareIPTV.UIBase.VODDetail.get = function(callback){
    if (this.item)
    {
        this.lastId = this.item.id;
        this.movieId = this.item.id;
    }
    else
    {
        this.movieId = this.lastId;
    }

    App.util.getMovieDetails(this.movieId, callback.bind(this));
};

GWareIPTV.UIBase.VODDetail.rating2stars = function(value){
    var out = [], value = parseFloat(value);

    while (value > 0)
    {
        if (value >= 1)
        {
            out.push('<span class="ico ico-star"></span>');
            value--;
        }
        else if (value >= 0.5)
        {
            out.push('<span class="ico ico-star-half"></span>');
            value = 0;
        }
    }

    for (var i = 0; i < 5; i++)
    {
        if (!out[i]) out[i] = '<span class="ico ico-star-outline"></span>';
    }

    return out.join('');
};

GWareIPTV.UIBase.VODDetail.getSiblings = function(id){
    var arr = App.VODBrowse.movieIds;

    for (var i = 0; i < arr.length; i++)
    {
        if (arr[i] === id)
        {
            return {
                prev: (i === 0) ? arr[arr.length - 1] : arr[i - 1],
                next: (i === arr.length - 1) ? arr[0] : arr[i + 1]
            };
        }
    }
};

GWareIPTV.UIBase.VODDetail.limitActors = function(actors){
    if (!actors) return '';

    var arr = actors.split(',');

    if (arr.length > 5) arr.length = 5;

    return arr.join(', ');
};

GWareIPTV.UIBase.VODDetail.getTags = function(tags){

    if(tags.length > 0)
    {
        return tags.join(', ');
    }
    else
    {
        return 'No information available';
    }
};

GWareIPTV.UIBase.VODDetail.prev = function(){
    this.pageLoader('VODDetail', 'init', {id: this.getSiblings(this.movieId).prev});
};

GWareIPTV.UIBase.VODDetail.next = function(){
    this.pageLoader('VODDetail', 'init', {id: this.getSiblings(this.movieId).next});
};

GWareIPTV.UIBase.VODDetail.btnBack = function(){
    if (!this.fnBack) this.fnBack = App.pageDefault.page;
    this.pageLoader(this.fnBack);
};
///vod: 	vod.home.js
GWareIPTV.UIBase.VOD.onLoad = function(html){
    this.resetPageLayout(html);

    var
        index = 0,
        rowIndex = 0,
        zone = this.getOptimalItemSize({
            selector: '.stores',
            type: 'store'
        }),
        rows = [];

    App.user.package.movie.forEach(function(store){
        if (!store.isMain) return;

        var data = null;

        if ((store.categories.length === 0) && (store.subs.length === 0))
        {
            data = {'data-fn': 'warn', 'data-image': store.logo};
        }
        else
        {
            data = {
                'data-id': store.id,
                'data-fn': 'init',
                'data-back': 'VOD',
                'data-image': store.logo,
                'data-page': (store.subs.length === 0) ? 'VODBrowse' : 'VODSub'
            };
        }

        if (!rows[rowIndex]) rows[rowIndex] = [];
        rows[rowIndex].push({
            html: '<img src="' + store.logo + '" />',
            data: data
        });

        index++;

        if (Math.fmod(index, zone.total) === 0) rowIndex++;
    });

    if (rows.length)
    {
        this.makeZone({
            rows: rows,
            selector: '.stores',
            selection: 'border',
            stretchImages: true,
            align: 'center',
            scroller: {
                width: 'auto',
                height: 'auto'
            },
            showArrows: true
        });
    }
    else
    {
        $('.main').html('<div><p class="empty">' + _('There are no movie stores') + '</p></div>');
    }

    this.fnBack = App.pageDefault.page;
    this.enableMenu('VOD');

    App.reports.set({type: 9});
};

GWareIPTV.UIBase.VOD.warn = function(){
    pp({message: _('This VOD store is empty')});
};

GWareIPTV.UIBase.VOD.search = function(store, str){

    var results = [];

    store.categories.forEach(function(cat){
        cat.movies.forEach(function(movie){
            if (movie.name.toLowerCase().indexOf(str.toLowerCase()) > -1)
            {
                if (!App.VOD.hasSearchResult(movie.id, results)) results.push({ id: movie.id, name: movie.name});
            }
        });
    });

    return results;
};

GWareIPTV.UIBase.VOD.hasSearchResult = function(id, arr){
    for (var i = 0; i < arr.length; i++)
    {
        if (arr[i].id === id)
        {
            return true;
        }
    }

    return false;
};
///vod: 	vod.movie.js
GWareIPTV.UIBase.VODMovie.onLoad = function(html){
    this.movie = null;
    this.mode = this.item && this.item.mode ? this.item.mode : 'online';
    this.isPlaying = false;

    this.resetPageLayout(html, true);

    if (this.item.resume)
    {
        // set progress if content is shared
        App.history.add('movies', {id: this.item.id, p: this.item.resume});
    }

    App.util.getMovieDetails(this.item.id, this.loaded.bind(this));
};

GWareIPTV.UIBase.VODMovie.loaded = function(movie){
    this.makeZone({
        rows: [[{html: '&nbsp;', style: {width: window.innerWidth + 'px', height: window.innerHeight + 'px'}}]],
        selector: '.player-holder',
        selection: 'none',
        events: {
            keyLeft: this.preselect.bind(this, 'rewind', true),
            keyRight: this.preselect.bind(this, 'forward', true),
            keyDown: this.preselect.bind(this, 'pause'),
            keyBack: this.stop.bind(this)
        }
    });

    this.createMenu();
    this.movie = movie;

    $('.movie-header .title').html(this.movie.name);
    $('.progress-holder .duration').html((Math.floor(this.movie.length/60) + ' h ' + Math.floor(this.movie.length % 60) + ' mins'));

    this.reportSent = false;
    this.hasChildLock();
    this.enableMenu();
    //this.preselect('pause');
    $(document).on('click', '.report', GWareIPTV.UIBase.VODMovie.keyBlue);
};

GWareIPTV.UIBase.VODMovie.createMenu = function(){
    var menu = [
        {html: '<span class="ico ico-fast-rewind"></span>', data: {'data-fn': 'rewind'}},
        {html: '<span class="ico ico-pause"></span>', data: {'data-fn': 'pause'}},
        {html: '<span class="ico ico-stop"></span>', data: {'data-fn': 'stop'}},
        {html: '<span class="ico ico-fast-forward"></span>', data: {'data-fn': 'forward'}}
    ];

    if (App.player.canChangeAspectRatio)
    {
        menu.push({html: '<span class="ico ico-aspect-ratio"></span>', data: {'data-fn': 'aspectRatioChoice'}});
    }

    if (Object.keys(App.player.tracks.items.audio.list).length > 1)
    {
        menu.push({html: '<span class="ico ico-audiotrack"></span>', data: {'data-fn': 'playerTracksRender', 'data-type': 'audio'}});
    }

    if (Object.keys(App.player.tracks.items.caption.list).length > 0)
    {
        menu.push({html: '<span class="ico ico-closed-caption"></span>', data: {'data-fn': 'playerTracksRender', 'data-type': 'caption'}});
    }

    this.renderMenu([menu]);
};

GWareIPTV.UIBase.VODMovie.renderMenu = function(menu){
    this.makeZone({
        rows: menu,
        selector: '.sub-menu',
        selection: 'bg',
        layer: 'info',
        events: {
            keyBack: this.infoHide.bind(this)
        }
    });
};

GWareIPTV.UIBase.VODMovie.hasChildLock = function(){
    if (this.movie.childLock)
    {
        this.askPIN(function(){
            this.startMovie();
        }.bind(this));
        return;
    }

    this.startMovie();
};

GWareIPTV.UIBase.VODMovie.startMovie = function(){
    var btnPopup = [];

    if (this.movie.streams.length > 1)
    {
        for (var i = 0; i < this.movie.streams.length; i++)
        {
            btnPopup.push({label: this.movie.streams[i].language, data: {'data-fn': 'selectStream', 'data-index': i}});
        }

        pp({
            message: _('Choose movie language'),
            buttons: btnPopup,
            isVertical: btnPopup.length > 3
        });

        return false;
    }

    this.selectStream({index: 0});
};

GWareIPTV.UIBase.VODMovie.selectStream = function(item){
    var
        stream = this.movie.streams[item.index],
        progress = App.history.getProgress('movies', this.movie.id);

    url= stream.url;
    if (url.indexOf("#") > -1) {
        var split_hash = url.split('#');
        var server = split_hash[0];
        var movie_name = split_hash[1];
        url =   server +"."+ App.settings.server_location.movie +"/"+ movie_name;
        lg('final movie url is :->>> [' + url + ']');
    }

    App.player.setup({
        url: url,
        ads: true,
        toktype:stream.toktype,
        hasDRM: this.movie.has_drm ? this.movie.has_drm : false,
        secure: stream.secure,
        events: {
            complete: function(){
                App.history.add('movies', {id: this.movie.id});
                this.btnBack();
            }.bind(this),

            error: function(e){
                lg(e);
            }.bind(this),

            time: function(o){
                $('.progress-holder .progress .bar').css('width', o.percent + '%');
                $('.progress-holder .remaining').html(o.remaining.toCounter());
                $('.progress-holder .duration').html(o.duration.toCounter());

                if ((o.position > 30) && !this.reportSent)
                {
                    this.report(this.movie.name);
                    this.reportSent = true;
                }
            }.bind(this),

            ready: function(){
                App.reports.set({
                    type: 8,
                    name: this.movie.name,
                    id: this.movie.id,
                    tags: App.util.getMovieProp(this.movie.id, 'tags').join(',')
                });

                if (progress.position > 0)
                {
                    pp({
                        message: _('Would you like to resume where you left off?'),
                        buttons: [
                            {label: _('Yes'), data: {'data-fn': 'resume', 'data-time': progress.position}},
                            {label: _('No'), data: {'data-fn': 'play'}}
                        ]
                    });
                }
                else
                {
                    lg('no save progress found so start at 0');
                    App.player.play();
                    this.infoShow();
                }
            }.bind(this)
        }
    });
};

GWareIPTV.UIBase.VODMovie.rewind = function(){
    App.player.rewind();
};

GWareIPTV.UIBase.VODMovie.resume = function(item){
    App.player.play();
    App.player.jumpTo(item.time);
    this.infoShow();
};

GWareIPTV.UIBase.VODMovie.pause = function(){
    if(this.isPlaying == true){
        this.isPlaying = false
        window.clearTimeout(this.timerInfo);
        App.player.pause();
    }else{
        this.isPlaying = true;
        this.timerInfo = setTimeout(this.infoHide.bind(this), 5000);
        App.player.pause();
    }
}
GWareIPTV.UIBase.VODMovie.play = function(){
    App.player.play();
    this.isPlaying = true;
    this.infoShow();
};

GWareIPTV.UIBase.VODMovie.stop = function(){
    if (this.prompt.active) return false;

    this.infoHide();

    pp({
        message: _('Are you sure you want to stop this movie?'),
        buttons: [
            {label: _('Yes'), data: {'data-fn': 'btnBack'}},
            {label: _('Cancel'), data: {}}
        ]
    });
};

GWareIPTV.UIBase.VODMovie.forward = function(){
    App.player.forward();
};

GWareIPTV.UIBase.VODMovie.keyPlay = GWareIPTV.UIBase.VODMovie.play;

GWareIPTV.UIBase.VODMovie.keyBlue = GWareIPTV.UIBase.VODMovie.chooseReport;

GWareIPTV.UIBase.VODMovie.keyStop = GWareIPTV.UIBase.VODMovie.stop;

GWareIPTV.UIBase.VODMovie.btnBack = function(){
    App.history.add('movies', {id: this.movie.id});
    App.player.stop();

    this.pageLoader('VODDetail', 'init', {id: this.movie.id});
};

GWareIPTV.UIBase.VODMovie.infoBarShow = function(){
    this.preselect('play');
};

GWareIPTV.UIBase.VODMovie.keyRewind = GWareIPTV.UIBase.VODMovie.rewind;

GWareIPTV.UIBase.VODMovie.keyForward = GWareIPTV.UIBase.VODMovie.forward;

GWareIPTV.UIBase.VODMovie.keyPlay = GWareIPTV.UIBase.VODMovie.play;

GWareIPTV.UIBase.VODMovie.keyStop = GWareIPTV.UIBase.VODMovie.stop;

GWareIPTV.UIBase.VODMovie.selectPopup = function(){
    this.infoHide();

    switch (this.screenZone)
    {
        case 'left':
        case 'right':
        case 'middle':
            this.stop();
            break;

        case 'bottom':
        default:
            this.infoBarShow();
            break;
    }

    this.screenZone = '';
};


GWareIPTV.UIBase.VODMovie.keyBack = GWareIPTV.UIBase.VODMovie.stop;
///vod: 	vod.sub.js
GWareIPTV.UIBase.VODSub.onLoad = function(html){
    if (this.item)
    {
        this.lastId = this.item.id;
        this.storeId = this.item.id;
    }
    else
    {
        this.storeId = this.lastId;
    }

    this.resetPageLayout(html);

    var
        store = App.util.getVODStore(this.storeId),
        zone = this.getOptimalItemSize({
            selector: '.stores',
            type: 'store'
        }),
        rowIndex = 0,
        index = 0,
        length = store.subs.length,
        subs = [],
        rows = [];

    for (var i = 0; i < length; i++)
    {
        subs.push(App.util.getVODStore(store.subs[i]));
    }

    subs.sort(function(a, b){
        return (a.position < b.position) ? -1 : 1;
    });

    for (var i = 0; i < length; i++)
    {
        if (!rows[rowIndex]) rows[rowIndex] = [];

        rows[rowIndex].push({
            html: '<img src="' + subs[i].logo + '" />',
            data: {
                'data-id': subs[i].id,
                'data-fn': 'init',
                'data-back': 'VODSub',
                'data-page': (subs[i].subs.length === 0) ? 'VODBrowse' : 'VODSub'
            }
        });

        index++;

        if (Math.fmod(index, zone.total) === 0) rowIndex++;
    }

    this.render(rows);
    this.enableMenu('VOD');
    this.fnBack = 'VOD';

    App.reports.set({
        type: 9,
        name: store.name,
        id: store.id
    });
};

GWareIPTV.UIBase.VODSub.render = function(rows){
    this.makeZone({
        rows: rows,
        selector: '.stores',
        selection: 'border',
        stretchImages: true,
        scroller: {
            width: 'auto',
            height: 'auto'
        },
        showArrows: true
    });

    this.makeZone({
        items: [{
            html: _('Back'),
            data:{ 'data-fn': 'btnBack' }
        }],
        selector: '.sub-menu',
        selection: 'bg'
    });
};

GWareIPTV.UIBase.VODSub.btnBack = function(){
    this.pageLoader(this.fnBack);
};

GWareIPTV.UIBase.VODSub.warn = function(){
    pp({message: _('This VOD store is empty')});
};
///vod: 	vod.trailer.js

GWareIPTV.UIBase.VODTrailer.onLoad = function(html){
    this.resetPageLayout(html, true);
    this.isPlaying = false

    this.makeZone({
        rows: [[{html: '&nbsp;', style: {width: window.innerWidth + 'px', height: window.innerHeight + 'px'}}]],
        selector: '.player-holder',
        selection: 'none',
        events: {
            keyLeft: this.preselect.bind(this, 'rewind'),
            keyRight: this.preselect.bind(this, 'forward'),
            keyDown: this.preselect.bind(this, 'pause'),
            keyBack: this.stop.bind(this)
        }
    });

    this.makeZone({
        rows: [[
            {html: '<span class="ico ico-fast-rewind"></span>', data: {'data-fn': 'rewind'}},
            {html: '<span class="ico ico-pause"></span>', data: {'data-fn': 'pause'}},
            {html: '<span class="ico ico-stop"></span>', data: {'data-fn': 'stop'}},
            {html: '<span class="ico ico-fast-forward"></span>', data: {'data-fn': 'forward'}}
        ]],
        selector: '.sub-menu',
        selection: 'bg',
        layer: 'info',
        events: {
            keyBack: this.infoHide.bind(this)
        }
    });

    $('.movie-header .title').html(this.item.name);

    url = this.item.url;
    if (url.indexOf("#") > -1) {
        var split_hash = url.split('#');
        var server = split_hash[0];
        var movie_name = split_hash[1];
        url =   server +"."+ App.settings.server_location.movie +"/"+ movie_name;
        lg('final movie url is :->>> [' + url + ']');
    }

    App.player.setup({

        url: url,
        toktype:this.item.tk,
        secure: 1,
        events: {
            complete: function(){
                this.pageLoader(this.fnBack);
            }.bind(this),

            time: function(o){

                $('.progress-holder .progress .bar').css('width', o.percent + '%');
                $('.progress-holder .remaining').html(o.remaining.toCounter());
                $('.progress-holder .duration').html(o.duration.toCounter());
            },

            error: function(e){
                lg(e);
            },

            ready: function(){
                App.player.play();
                this.infoShow();
            }.bind(this)
        }
    });

    this.fnBack = 'VODDetail';

    App.reports.set({
        type: 12,
        name: this.item.name
    });
};

GWareIPTV.UIBase.VODTrailer.rewind = function(){
    App.player.rewind();
};
GWareIPTV.UIBase.VODTrailer.pause = function(){
    if(this.isPlaying == true){
        this.isPlaying = false
        window.clearTimeout(this.timerInfo);
        App.player.pause();
    }else{
        this.isPlaying = true;
        this.timerInfo = setTimeout(this.infoHide.bind(this), 5000);
        App.player.pause();
    }
}
GWareIPTV.UIBase.VODTrailer.play = function(){
    this.isPlaying = true;
    App.player.play();
    this.infoShow();
};

GWareIPTV.UIBase.VODTrailer.stop = function(){
    if (this.prompt.active) return false;

    this.infoHide();

    pp({
        message: _('Are you sure you want to stop this movie?'),
        buttons: [
            {label: _('Yes'), data: {'data-fn': 'btnBack'}},
            {label: _('Cancel'), data: {}}
        ]
    });
};

GWareIPTV.UIBase.VODTrailer.forward = function(){
    App.player.forward();
};

GWareIPTV.UIBase.VODTrailer.keyStop = GWareIPTV.UIBase.VODTrailer.stop;

GWareIPTV.UIBase.VODTrailer.btnBack = function(){
    this.pageLoader(this.fnBack);
};

GWareIPTV.UIBase.VODTrailer.infoBarShow = function(){
    this.preselect('play');
};

GWareIPTV.UIBase.VODTrailer.keyRewind = GWareIPTV.UIBase.VODTrailer.rewind;

GWareIPTV.UIBase.VODTrailer.keyForward = GWareIPTV.UIBase.VODTrailer.forward;

GWareIPTV.UIBase.VODTrailer.keyPlay = GWareIPTV.UIBase.VODTrailer.play;

GWareIPTV.UIBase.VODTrailer.keyStop = GWareIPTV.UIBase.VODTrailer.stop;

///tv: catchup.home.js
/*
 * CatchUp Home
 */

GWareIPTV.UIBase.CatchUpHome.onLoad = function(html){
    this.resetPageLayout(html);
    this.getPagerCount();

    var header = '';

    for (var i = 0; i < App.user.package.tv.list.length; i++)
    {
        var temp = App.user.package.tv.list[i];
        header += '<div><img src="' + temp.logo.small + '" />' + temp.number + '. ' + temp.name + '</div>';
    }

    if (header !== '')
    {
        var o = document.querySelector('.catchup-home-epg-header');
        o.innerHTML = header;
        o.style.top = '0px';
    }

    this.makeZone({
        rows: this.getData(),
        selector: '.catchup-home-epg',
        selection: 'bg',
        scroller: {
            width: 'auto',
            height: 'auto'
        },
        scrollIntoView: false,
        pager: {
            type: 'rows',
            count: this.pagerCount
        },
        events: {
            scroll: this.onScroll
        },
        showArrows: true
    });

    this.resetEvents();
};

GWareIPTV.UIBase.CatchUpHome.getPagerCount = function(){
    this.pagerCount = Math.floor($('.catchup-home-epg').height() / 50);

    lg('catchup home > pager count [' + this.pagerCount + ']');
};

GWareIPTV.UIBase.CatchUpHome.resetEvents = function(){
    if (App.user.device.category === 'mobile') $('.catchup-home-epg').on('scroll', this.onScroll);
};

GWareIPTV.UIBase.CatchUpHome.getData = function(){
    var
        i = 0,
        data = null,
        max = 0,
        colIndex = 0,
        header = '',
        channel = null,
        programs = null,
        rows = [],
        length = App.user.package.tv.list.length;

    for (i = 0; i < length; i++)
    {
        channel = App.user.package.tv.list[i];
        programs = [];

        if (channel.archive || channel.dveo || channel.flussonic)
        {
            header += '<div><img src="' + channel.logo.small + '" />' + channel.number + '. ' + channel.name + '</div>';
            data = this.getEPGForChannel(channel.id, channel.number);

            if (data.length > max) max = data.length;

            for (var j = 0; j < data.length; j++)
            {
                var
                    start = new Date(data[j].ut_start * 1000),
                    end = new Date(data[j].ut_end * 1000);

                if (!rows[j]) rows[j] = [];

                rows[j][colIndex] = {
                    html: '<span class="time">' + start.niceTime() + ' - ' + end.niceTime() + '</span><span class="name">' + data[j].progname + '</span>',
                    data: {
                        'data-fn': 'init',
                        'data-page': 'CatchUp',
                        'data-id': channel.id,
                        'data-ts': data[j].ut_start
                    },
                    style: {
                        width: '300px'
                    }
                };
            }

            colIndex++;
        }
    }

    for (var i = 0; i < max; i++)
    {
        for (var j = 0; j < colIndex; j++)
        {
            if (!rows[i][j])
            {
                rows[i][j] = {html: '<div class="padding"></div>', wrap: false};
            }
        }
    }

    $('.catchup-home-epg-header').html(header);

    return rows;
};

GWareIPTV.UIBase.CatchUpHome.getEPGForChannel = function(id, number){
    var data = App.epg.date.value ? App.epg[App.epg.date.value] : [];
    return data[number + '-' + id].data;
};

GWareIPTV.UIBase.CatchUpHome.onScroll = function(){
    $('.catchup-home-epg-header').css('left', $('.catchup-home-epg .scroller').position().left);
};
///tv: 	catchup.js
/*
 * CatchUp Player
 * @param item.id - channel ID
 * @param item.ts - UTC timestamp (seconds)
 */

GWareIPTV.UIBase.CatchUp.onLoad = function(html){
    this.pauseTS = 0;

    this.isPlaying = false;
    this.skipInterval = 60;
    this.channel = App.util.getChannelData(this.item.id);

    var prog = App.epg.getProgrammeByTimestamp(this.channel.id, this.item.ts);

    this.resetPageLayout(html, true);
    this.renderPlayerHolder();
    this.createMenu();

    this.reload(true);

    if (this.url)
    {
        if (!this.item.report)
        {
            lg('catchup > start report action as catchup');
            App.reports.set({
                type: this.item.report_action ? this.item.report_action : 5,
                name: this.channel.name,
                id: this.channel.id,
                epg: prog.name
            });
        }

        url= this.url;

        if (url.indexOf("#") > -1) {

            var split_hash = url.split('#');
            var server = split_hash[0];
            var catchup_name = split_hash[1];
            url =   server +"."+ App.settings.server_location.catchup +"/"+ catchup_name ;
        }
//catchup page
        App.player.setup({
            url: url,
            toktype : this.channel.url.primary.interactive ? this.channel.toktype.interactive : this.channel.toktype[this.quality],
            //toktype:this.channel.toktype,
            secure: this.channel.secure,
            events: {
                complete: function(){
                    //	lg('catchup > event [complete]');
                    this.isPlaying = false;
                }.bind(this),

                play: function(){
                    //	lg('catchup > event [play]');
                    this.isPlaying = true;
                }.bind(this),

                stop: function(){
                    //	lg('catchup > event [stop]');
                    this.isPlaying = false;
                }.bind(this),

                pause: function(){
                    //	lg('catchup > event [pause]');
                    this.isPlaying = false;
                }.bind(this),

                error: function(e){
                    //	lg('catchup > event [error]');
                    this.isPlaying = false;

                    //	lg('catchup > error event fired', 'error');
                    lg(e);
                }.bind(this),

                time: function(){
                    //lg('catchup > event [time]');
                    var
                        msElapsed = App.timer({
                            key: 'catchup-playback',
                            done: true,
                            decimal: 0,
                            clear: false,
                            log: false
                        });

                    if(this.isPlaying == true){
                        if(this.pauseTS == 0){
                            this.elapsed = Math.round(msElapsed / 1000);
                        }else{
                            this.elapsed = this.pauseTS;
                            this.pauseTS = 0;
                        }
                        this.item.ts = this.item.tsOriginal + this.elapsed;

                        //lg('catchup > elapsed [' + this.elapsed + ']');
                        //lg('catchup > ts [' + this.item.ts + '][' + new Date(this.item.ts * 1000).niceTime(true) + ']');

                        $('.bar').css('width', ((this.item.ts - this.programme.ut_start) * 100 / this.duration) + '%');
                    }
                }.bind(this),

                ready: function(){
                    //lg('catchup > event [ready]');
                    App.player.play();

                    this.preselect('pause');

                    App.timer({key: 'catchup-playback'});
                }.bind(this)
            }
        });

        this.fnBack = 'TV';
    }
};

GWareIPTV.UIBase.CatchUp.renderPlayerHolder = function(){
    this.makeZone({
        rows: [[{html: '&nbsp;', style: {width: window.innerWidth + 'px', height: window.innerHeight + 'px'}}]],
        selector: '.player-holder',
        selection: 'none',
        events: {
            keyLeft: this.preselect.bind(this, 'rewind', true),
            keyRight: this.preselect.bind(this, 'forward', true),
            keyDown: this.preselect.bind(this, 'play'),
            keyBack: this.stop.bind(this)
        }
    });
};

GWareIPTV.UIBase.CatchUp.createMenu = function(){
    var
        width = 0,
        menu = [
            {html: '<span class="ico ico-skip-previous"></span>', data: {'data-fn': 'skipPrev'}},
            {html: '<span class="ico ico-fast-rewind"></span>', data: {'data-fn': 'rewind'}},
            {html: '<span class="ico ico-pause"></span>', data: {'data-fn':'pause'}},
            {html: '<span class="ico ico-stop"></span>', data: {'data-fn': 'stop'}},
            {html: '<span class="ico ico-fast-forward"></span>', data: {'data-fn': 'forward'}},
            {html: '<span class="ico ico-skip-next"></span>', data: {'data-fn': 'skipNext'}}
        ];

    if (App.player.canChangeAspectRatio)
    {
        menu.push({html: '<span class="ico ico-aspect-ratio"></span>', data: {'data-fn': 'aspectRatioChoice'}});
    }

    if (Object.keys(App.player.tracks.items.audio.list).length > 1)
    {
        menu.push({html: '<span class="ico ico-audiotrack"></span>', data: {'data-fn': 'playerTracksRender', 'data-type': 'audio'}});
    }

    if (Object.keys(App.player.tracks.items.caption.list).length > 1)
    {
        menu.push({html: '<span class="ico ico-closed-caption"></span>', data: {'data-fn': 'playerTracksRender', 'data-type': 'caption'}});
    }

    width = 600 / menu.length;

    for (var i = 0; i < menu.length; i++)
    {
        menu[i].style = {width: (width - 40) + 'px'};
    }

    this.renderMenu([menu]);
};

GWareIPTV.UIBase.CatchUp.renderMenu = function(menu){
    this.makeZone({
        rows: menu,
        selector: '.sub-menu',
        selection: 'bg',
        layer: 'info',
        events: {
            keyBack: this.infoHide.bind(this)
        }
    });
};

GWareIPTV.UIBase.CatchUp.reload = function(noLoad){
    lg('catchup > reloading');

    if (!this.item.ts) this.item.ts = this.item.start;
    this.item.tsOriginal = this.item.ts;

    this.channel = App.util.getChannelData(this.item.id);
    this.programme = App.epg.getProgrammeByTimestamp(this.channel.id, this.item.ts);
    this.duration = this.programme.ut_end - this.programme.ut_start;

    this.url = this.getURL();

    if (!this.url)
    {
        pp({
            message: _('Stream is not available. [2000]'),
            buttons: [
                {label: _('Continue Live TV'), data: {'data-fn': 'switch2live'}},
                {label: _('Quit TV'), data: {'data-fn': 'btnBack'}}
            ]
        });

        return false;
    }

    if (!noLoad)
    {
        this.isPlaying = true;
        App.player.loadURL(this.url);
        App.timer({key: 'catchup-playback'});
    }

    this.infoUpdate();
    this.infoShow();
};

GWareIPTV.UIBase.CatchUp.getURL = function(){
    this.quality = store.get('iptv.stream.quality') || 'low';

    var
        now = Math.round(new Date().getTime() / 1000),
        // delay = now - this.item.ts,

        delay =  this.channel.dvr_offset ? (this.channel.dvr_offset + now) - this.item.ts : now - this.item.ts,
        url = this.channel.url.primary.interactive ? this.channel.url.primary.interactive : this.channel.url.primary[this.quality],
        delay = this.channel.url.primary.interactive ? delay : now - this.item.ts,
        //toktype = this.channel.url.primary.interactive ? this.channel.toktypeinteractive : this.channel.toktype[this.quality],
        tsDate =    new Date(this.item.ts * 1000);



    //dvr_offset=this.channel.dvr_offset,
    if (url.indexOf("#") > -1) {
        var split_hash = url.split('#');
        var server = split_hash[0];
        var channel_name = split_hash[1];
        url =   server +"."+ App.settings.server_location.channel +"/"+ channel_name + "/mono.m3u8";
        lg('final catchup url is :->>> [' + url + ']');
    }


    // tsDate = this.channel.dvr_offset ? (this.channel.dvr_offset +  new Date(this.item.ts * 1000)):new Date(this.item.ts * 1000);


    lg('catchup ---> channel offset from json  ' + this.channel.dvr_offset);
    lg('catchup ---> channel delay before sum   ' + (now - this.item.ts));
    lg('catchup ---> channel delay after catchup sum   ' + delay);


    lg('catchup > urls');
    lg(this.channel.url);

    if (!url) return false;

    lg('catchup > starting playback at ' + tsDate.toString(true));

    if (this.channel.flussonic === 1) return url.replace("mono.m3u8","").replace("Manifest.mpd", "") + "mono-timeshift_rel-" + delay + ".m3u8";

    if (this.channel.dveo === 1)
    {
        var
            o = App.URL.parse(url),
            q = /^z(\d+)zz(.*)$/.exec(o.path);

        if (q)
        {
            // remove existing offset
            o.path = o.path.replace('z' + q[1] + 'zz/', '');
        }

        // add offset
        o.path = 'z' + delay + 'zz/' + o.path;

        return App.URL.create(o);
    }

    if (this.channel.archive === 1) return url + '?time=' + this.item.ts;

    return false;
};

GWareIPTV.UIBase.CatchUp.infoUpdate = function(){
    var self = this;

    $('.info .panel').each(function(){
        var prog = App.epg.getProgrammeByTimestamp(self.item.id, self.item.ts);

        $(this).find('.logo img').attr('src', self.channel.logo.normal);
        $(this).find('.title').html(prog.name + '<span>(' + ((prog.ut_end - prog.ut_start) / 60) + ' mins)</span>');
        $(this).find('.description').html(prog.description);
        $(this).find('.time').html(new Date(prog.ut_start * 1000).niceTime() + ' - ' + new Date(prog.ut_end * 1000).niceTime());
        $(this).find('.duration').html(Math.floor((prog.ut_end - prog.ut_start)/3600) + ' h ' + Math.floor((prog.ut_end - prog.ut_start)/60) + ' mins');
    });
}
GWareIPTV.UIBase.CatchUp.pause = function(){
    lg('catchup > isPlaying [' + this.isPlaying + ']');
    lg('catchup > ts [' + this.item.ts + '][' + new Date(this.item.ts * 1000).niceTime(true) + ']');

    if(this.isPlaying){
        this.pauseTS = this.elapsed;
        this.isPlaying = false;
        App.player.pause();
        this.preselect('play');
    }else{
        this.isPlaying = true;
        App.player.pause();
        this.infoHide();
        this.preselect('pause');
    };
};
GWareIPTV.UIBase.CatchUp.play = function(){
    lg('catchup > isPlaying [' + this.isPlaying + ']');
    lg('catchup > ts [' + this.item.ts + '][' + new Date(this.item.ts * 1000).niceTime(true) + ']');

    if(this.isPlaying){this.isPlaying = false; App.player.stop()}else{this.reload()};
};

GWareIPTV.UIBase.CatchUp.switch2live = function(){
    this.pageLoader('Channel', 'init', {id: this.item.id});
};

GWareIPTV.UIBase.CatchUp.rewind = function(){
    App.player.stop();

    this.item.ts -= this.skipInterval;

    if (this.timerReload) window.clearTimeout(this.timerReload);
    this.timerReload = window.setTimeout(this.reload.bind(this), 500);
};

GWareIPTV.UIBase.CatchUp.forward = function(){
    App.player.stop();

    var newTS = this.item.ts + this.skipInterval;

    if (newTS < Math.round(new Date().getTime() / 1000))
    {
        this.item.ts = newTS;

        if (this.timerReload) window.clearTimeout(this.timerReload);
        this.timerReload = window.setTimeout(this.reload.bind(this), 500);
    }
    else
    {
        pp({
            message: _('Switch to live stream?'),
            buttons: [
                {label: _('OK'), data: {'data-fn': 'switch2live'}},
                {label: _('Cancel'), data: {}}
            ]
        });
    }
};

GWareIPTV.UIBase.CatchUp.skipPrev = function(){
    var newTS = App.epg.navigate(this.item.ts, this.item.id, -1);

    if (newTS)
    {
        lg('catchup > previous programme found with ts [' + newTS + '], reloading...');

        this.item.ts = newTS;
        this.pauseTS = 0;
        this.reload();
        return false;
    }

    lg('catchup > previous programme not found');
};

GWareIPTV.UIBase.CatchUp.skipNext = function(){
    var newTS = App.epg.navigate(this.item.ts, this.item.id, +1);

    if (newTS)
    {
        lg('catchup > next programme found, reloading...');

        this.item.ts = newTS;
        this.pauseTS = 0;
        this.reload();
        return false;
    }

    lg('catchup > next programme not found');
};

GWareIPTV.UIBase.CatchUp.stop = function(){
    this.isPlaying = true;
    this.play();

    pp({
        message: $('.panel-middle .title').text(),
        buttons: [
            {label: _('Resume Paused TV'), data: {'data-fn': 'play'}},
            {label: _('Continue Live TV'), data: {'data-fn': 'switch2live'}},
            {label: _('Quit TV'), data: {'data-fn': 'btnBack'}}
        ],
        isVertical: false
    });
};

GWareIPTV.UIBase.CatchUp.keyBack = function(){
    if (this.prompt.active)
    {
        App.popup.hide();
        return false;
    }

    if ($('.info').position().top !== window.innerHeight)
    {
        this.infoHide();
        return false;
    }

    this.stop();
};

GWareIPTV.UIBase.CatchUp.keyRewind = GWareIPTV.UIBase.CatchUp.rewind;

GWareIPTV.UIBase.CatchUp.keyForward = GWareIPTV.UIBase.CatchUp.forward;

GWareIPTV.UIBase.CatchUp.keyPlay = GWareIPTV.UIBase.CatchUp.play;

GWareIPTV.UIBase.CatchUp.keyStop = GWareIPTV.UIBase.CatchUp.stop;

GWareIPTV.UIBase.CatchUp.selectPopup = function(){
    switch (this.screenZone)
    {
        case 'middle':
            this.stop();
            break;
    }

    this.screenZone = '';
};

GWareIPTV.UIBase.CatchUp.btnBack = function(){
    this.pageLoader(this.fnBack || App.pageDefault.page);
};
///tv: 	favorite.manager.js
GWareIPTV.UIBase.FavoriteManager.onLoad = function(html){
    $('.main').css('background-color', '#313131');

    this.resetPageLayout(html);

    this.selected = {left: [], right: []};

    var
        length = App.user.package.tv.group.length,
        group = null,
        groups = [];

    for (var i = 0; i < length; i++)
    {
        group = App.user.package.tv.group[i];

        groups.push({html: group.name, data: {'data-fn-select': 'loadChannels', 'data-id': group.id}});

    }

    this.renderGroups(groups);
    this.select($('.groups .item:first-child'));

    this.renderFavorites();
    this.registerEvents();

    this.fnBack = 'TV';
    this.enableMenu('TV');

    App.reports.set({type: 3});
};

GWareIPTV.UIBase.FavoriteManager.renderGroups = function(rows){

    this.makeZone({
        rows: [rows],
        selector: '.groups',
        selection: 'bg',
        scroller: {
            width: 'auto',
            height: '100%'
        }
    });
};

GWareIPTV.UIBase.FavoriteManager.renderFavorites = function(){
    var
        channels = [],
        favorites = App.favorites.favorites;

    for (var i = 0; i < favorites.length; i++)
    {
        var
            channel = App.util.getChannelData(favorites[i].id),
            cls = this.isSelected(channel.id, favorites[i].position) ? 'ico-check-box' : 'ico-check-box-outline-blank';

        if (!channel) continue;

        channels.push([{
            html: '<span class="ico ' + cls + '"></span><span class="number">' + channel.number + '</span><span class="image"><img src="' + channel.logo.small + '" /></span><span>' + channel.name + '</span>',
            data: {
                'data-fn': 'markChannel',
                'data-type': 'right',
                'data-position': favorites[i].position,
                'data-id': channel.id
            }
        }]);
    }

    channels.sort(function(a, b){
        a = parseInt(a[0].data['data-position'], 10);
        b = parseInt(b[0].data['data-position'], 10);

        return (a < b) ? -1 : 1;
    });

    if (channels.length)
    {
        this.renderFavoritesZone(channels);

        if (this.selected['right'].length)
        {
            this.object = $('.favorites .item[data-id="' + this.selected['right'][0].id + '"]');
            this.scroll(this.object);
        }
        else
        {
            this.object = $('.favorites .item:first');
        }
        this.select();
    }
    else
    {
        $('.favorites').html('<p class="empty" style="padding-top:40px">' + _('There are no favorite channels') + '</p>');
    }
};

GWareIPTV.UIBase.FavoriteManager.renderFavoritesZone = function(rows){
    this.makeZone({
        rows: rows,
        selector: '.favorites',
        selection: 'bg',
        scroller: {
            width: '100%',
            height: 'auto'
        }
    });
};

GWareIPTV.UIBase.FavoriteManager.loadChannels = function(item){
//	lg('favorites > load channels with group id' + item.id);
    var
        groupId = item.id,
        channels = [];

    this.clearSelection('left');

    $('.groups .item').removeClass('selected');
    $('.groups .item[data-id="' + groupId + '"]').addClass('selected');

    App.user.package.tv.list.forEach(function(channel){
        if (App.util.channelIsInGroup(channel.id, groupId))
        {
            channels.push([{
                html: '<span class="ico ico-check-box-outline-blank"></span><span class="number">' + channel.number + '</span><span class="image"><img src="' + channel.logo.small + '" /></span><span>' + channel.name + '</span>',
                data: {
                    'data-fn': 'markChannel',
                    'data-type': 'left',
                    'data-position': channel.number,
                    'data-id': channel.id
                }
            }]);
        }
    });

    channels.sort(function(a, b){
        a = parseInt(a[0].data['data-position'], 10);
        b = parseInt(b[0].data['data-position'], 10);

        return (a < b) ? -1 : 1;
    });

    if (channels.length)
    {
        this.renderChannels(channels);
    }
    else
    {
        $('.channels').html('<p class="empty">' + _('There are no channels in this category') + '</p>');
    }
};

GWareIPTV.UIBase.FavoriteManager.renderChannels = function(rows){
//	lg('favorites > number of channels loaded: '  + rows.length);
    this.makeZone({
        rows: rows,
        selector: '.channels',
        selection: 'bg',
        scroller: {
            width: '100%',
            height: 'auto'
        }
    });
};

GWareIPTV.UIBase.FavoriteManager.isSelected = function(id, position){
    for (var i = 0; i < this.selected['right'].length; i++)
    {
        if (this.selected['right'][i].id === id)
        {
            this.selected['right'][i].position = position;
            return true;
        }
    }

    return false;
};

GWareIPTV.UIBase.FavoriteManager.markChannel = function(item){
    var
        was = false,
        selector = (item.type === 'left') ? '.channels' : '.favorites';

    for (var i = 0; i < this.selected[item.type].length; i++)
    {
        if (this.selected[item.type][i].id === item.id)
        {
            this.selected[item.type].splice(i, 1);
            was = true;
            break;
        }
    }

    if (was)
    {
        $(selector + ' .item[data-id="' + item.id + '"] .ico').removeClass('ico-check-box').addClass('ico-check-box-outline-blank');
    }
    else
    {
        this.selected[item.type].push({id: item.id, position: item.position});

        $(selector + ' .item[data-id="' + item.id + '"] .ico').removeClass('ico-check-box-outline-blank').addClass('ico-check-box');
    }
};

GWareIPTV.UIBase.FavoriteManager.clearSelection = function(type){
    this.selected[type] = [];
};

GWareIPTV.UIBase.FavoriteManager.moveToFavorites = function(){
    if (!this.selected['left'].length)
    {
        pp({message: _('Please select at least one channel')});
        return false;
    }

    var i = this.selected['left'].length - 1;
    while (i >= 0)
    {
        App.favorites.add(this.selected['left'][i].id, this.selected['left'][i].position);
        this.markChannel({type: 'left', id: this.selected['left'][i].id, position: this.selected['left'][i].position});

        i--;
    }

    this.renderFavorites();
};

GWareIPTV.UIBase.FavoriteManager.removeFromFavorites = function(){
    if (!this.selected['right'].length)
    {
        pp({message: _('Please select at least one channel')});
        return false;
    }

    var i = this.selected['right'].length - 1;
    while (i >= 0)
    {
        App.favorites.remove(this.selected['right'][i].id);
        this.markChannel({type: 'right', id: this.selected['right'][i].id});

        i--;
    }

    this.renderFavorites();
};

GWareIPTV.UIBase.FavoriteManager.moveSelectionUp = function(){
    this.moveSelection('up');
};

GWareIPTV.UIBase.FavoriteManager.moveSelectionDown = function(){
    this.moveSelection('down');
};

GWareIPTV.UIBase.FavoriteManager.moveSelection = function(direction){
    if (!this.selected['right'].length)
    {
        pp({message: _('Please select at least one channel')});
        return false;
    }

    var
        result = [],
        items = Array.prototype.slice.call(document.querySelectorAll('.favorites .item')),
        control = null;

    if (direction === 'down') items.reverse();

    this.selected['right'].sort(function(a, b){
        if (direction === 'down')
        {
            return (a.position > b.position) ? -1 : 1;
        }
        else
        {
            return (a.position < b.position) ? -1 : 1;
        }
    });

    for (var i = 0; i < items.length; i++)
    {
        var
            id = parseInt(items[i].getAttribute('data-id'), 10),
            position = parseInt(items[i].getAttribute('data-position'), 10);

        if ($(items[i]).find('.ico').hasClass('ico-check-box') && !control)
        {
            if (i === 0) return false;

            control = result.pop();

            for (var j = 0; j < this.selected['right'].length; j++)
            {
                result.push({id: this.selected['right'][j].id, position: this.selected['right'][j].position});
            }

            result.push(control);
        }
        else if ($(items[i]).find('.ico').hasClass('ico-check-box-outline-blank'))
        {
            result.push({id: id, position: position});
        }
    }

    for (var i = 0; i < result.length; i++)
    {
        result[i].position = (direction === 'down') ? result.length - 1 - i : i;
    }

    App.favorites.set(result);
    this.renderFavorites();
};

GWareIPTV.UIBase.FavoriteManager.keyRed = GWareIPTV.UIBase.FavoriteManager.removeFromFavorites;

GWareIPTV.UIBase.FavoriteManager.keyGreen = GWareIPTV.UIBase.FavoriteManager.moveSelectionUp;

GWareIPTV.UIBase.FavoriteManager.keyYellow = GWareIPTV.UIBase.FavoriteManager.moveSelectionDown;

GWareIPTV.UIBase.FavoriteManager.keyBlue = GWareIPTV.UIBase.FavoriteManager.moveToFavorites;

GWareIPTV.UIBase.FavoriteManager.registerEvents = function(){
    var self = this;

    $('.label').on('click', function(){
        var fn = $(this).attr('data-fn');
        self[fn]();
    });
};

GWareIPTV.UIBase.FavoriteManager.scroll = function(object){
    if (!object.length) return false;

    var
        zone = $('.favorites'),
        list = zone.find('.scroller'),
        max = zone.outerHeight(),
        height = object.outerHeight(),
        pos = object.offset().top - zone.offset().top;

    if (pos < 0)
    {
        list.css({top: list.position().top + Math.abs(pos)});
    }
    else if (pos + height > max)
    {
        list.css({top: list.position().top - (pos + height - max)});
    }
};

GWareIPTV.UIBase.FavoriteManager.unload = function(){
    $('.label').off('click');
    $('.main').css('background-color', 'transparent');
};
///tv: 	recording.js
GWareIPTV.UIBase.Recording.onLoad = function(html){
    this.resetPageLayout(html);
    this.render();
};

GWareIPTV.UIBase.Recording.renderZone = function(rows){
    this.makeZone({
        rows: rows,
        selector: '.recordings',
        selection: 'bg',
        scroller: {
            width: '100%',
            height: '540px'
        },
        showArrows: true
    });

    this.select($('.recordings .row:first-child .item'));
};

GWareIPTV.UIBase.Recording.render = function(){
    this.build(App.cloudPVR.recordings);

    this.fnBack = App.pageDefault.page;
    this.enableMenu('Recording');

    App.reports.set({type: 7});
};

GWareIPTV.UIBase.Recording.build = function(recordings){
    var
        was = false,
        rows = [],
        width = $('.recordings').width(),
        nowTS = new Date().getTime() / 1000;

    lg('recordings > listing all');
    //lg(recordings);
    lg('recordings > listing available');
    var recordings_ = recordings;
//	lg(recordings_);
    for (var i = 0; i < recordings_.length; i++)
    {
        if (!recordings_[i].deleted)
        {
            if (recordings_[i].ut_end || !recordings_[i].ut_end)
            {
                var
                    row = [],
                    data = this.getData(recordings_[i]);

                row.push({
                    html: '<div class="non-item" style="width: ' + (width - 300) + 'px">' +
                        '<img src="' + data.image + '" />' +
                        '<div class="channel">' + data.channel + '</div>' +
                        '<div class="prog">' + decodeURI(data.prog) + '</div>' +
                        '<div class="date">' + data.date + '</div>' +
                        '<div class="time">' + data.time + '</div>' +
                        '<div class="length">' + data.length + '</div>' +
                        '</div>',
                    wrap: false
                });
                //only show play button if recording is already done
                if(parseInt(recordings_[i].ut_end) < nowTS){
                    row.push({
                        html: '<span class="ico ico-play-arrow"></span>' + _('Play'),
                        data: {
                            'data-fn': 'play',
                            'data-title': data.channel + ' - ' + decodeURI(data.prog),
                            'data-url': data.url
                        }
                    });
                }else{
                    row.push({
                        html: '<span>&nbsp;</span>',

                    });
                }

                row.push({
                    html: '<span class="ico ico-delete"></span>' + _('Delete'),
                    data: {
                        'data-fn': 'remove',
                        'data-pvr-id': data.pvr_id
                    }
                });

                rows.push(row);
                was = true;
            }
        }
    }

    if (was)
    {
        this.renderZone(rows);
        return false;
    }

    lg('recordings > no recordings found');

    $('.recordings').html('<p class="empty">' + _('There are no recordings') + '</p>');
    App.LS.setupZones();
};

GWareIPTV.UIBase.Recording.play = function(data){
    this.pageLoader('RecordingPlayer', 'init', data);
};

GWareIPTV.UIBase.Recording.remove = function(data){
    this.loading(null, _('Deleting this recording, please wait...'));

    App.cloudPVR.clear(data.pvrId, function(){
        this.init();
    }.bind(this));
};

GWareIPTV.UIBase.Recording.getData = function(rec){
    var
        s = new Date(rec.ut_start * 1000),
        e = new Date(rec.ut_end * 1000);

    return {
        date: s.toString(),
        time: s.niceTime() + ' - ' + e.niceTime(),
        length: (rec.ut_end - rec.ut_start).toCounter(),
        image: App.settings.url.image + rec.channel_icon,
        url: rec.url,
        channel: rec.channel_name,
        prog: rec.program_name,
        pvr_id: rec.pvr_id
    };
};

GWareIPTV.UIBase.Recording.convert = function(str){
    return parseInt(str.replace('MB', '').replace(',', ''), 10);
};
///tv: 	recording.player.js
GWareIPTV.UIBase.RecordingPlayer.onLoad = function(html){
    this.resetPageLayout(html, true);
    this.isPlaying = false;

    this.makeZone({
        rows: [[{html: '&nbsp;', style: {width: window.innerWidth + 'px', height: window.innerHeight + 'px'}}]],
        selector: '.player-holder',
        selection: 'none',
        events: {
            keyLeft: this.preselect.bind(this, 'rewind'),
            keyRight: this.preselect.bind(this, 'forward'),
            keyDown: this.preselect.bind(this, 'pause'),
            keyBack: this.stop.bind(this)
        }
    });

    this.createMenu();

    App.reports.set({
        type: 6,
        name: this.item.title
    });

    $('.movie-header .title').html(this.item.title);

    this.start();

    this.fnBack = (this.item.back) ? this.item.back : 'Recording';
    this.enableMenu();
};

GWareIPTV.UIBase.RecordingPlayer.createMenu = function(){
    var
        width = 0,
        menu = [
            {html: '<span class="ico ico-fast-rewind"></span>', data: {'data-fn': 'rewind'}},
            {html: '<span class="ico ico-pause"></span>', data: {'data-fn': 'pause'}},
            {html: '<span class="ico ico-stop"></span>', data: {'data-fn': 'stop'}},
            {html: '<span class="ico ico-fast-forward"></span>', data: {'data-fn': 'forward'}}
        ];

    if (App.player.canChangeAspectRatio)
    {
        menu.push({html: '<span class="ico ico-aspect-ratio"></span>', data: {'data-fn': 'aspectRatioChoice'}});
    }
    if (Object.keys(App.player.tracks.items.audio.list).length > 1){
        menu.push({html: '<span class="ico ico-audiotrack"></span>', data: {'data-fn': 'playerTracksRender', 'data-type': 'audio'}});
    }
    if (Object.keys(App.player.tracks.items.caption.list).length > 0){
        menu.push({html: '<span class="ico ico-closed-caption"></span>', data: {'data-fn': 'playerTracksRender', 'data-type': 'caption'}});
    }


    // width = 600 / menu.length;

    // for (var i = 0; i < menu.length; i++)
    // {
    // 	menu[i].style = {width: (width - 40) + 'px'};
    // }

    this.renderMenu([menu]);
};

GWareIPTV.UIBase.RecordingPlayer.renderMenu = function(menu){
    this.makeZone({
        rows: menu,
        selector: '.sub-menu',
        selection: 'bg',
        layer: 'info',
        events: {
            keyBack: this.infoHide.bind(this)
        }
    });
};

GWareIPTV.UIBase.RecordingPlayer.start = function(){
    App.player.setup({
        url: this.item.url,
        secure: true,
        events: {
            complete: this.btnBack.bind(this),

            time: function(o){

                $('.progress-holder .progress .bar').css('width', o.percent + '%');
                $('.progress-holder .remaining').html(o.remaining.toCounter());
                $('.progress-holder .duration').html(o.duration.toCounter());

            },

            error: function(e){
                lg(e);
            }.bind(this),

            ready: function(){
                App.player.play();
            }
        }
    });

    this.infoShow();
};

GWareIPTV.UIBase.RecordingPlayer.keyDown = GWareIPTV.UIBase.RecordingPlayer.infoShow;

GWareIPTV.UIBase.RecordingPlayer.rewind = function(){
    App.player.rewind();
};
GWareIPTV.UIBase.RecordingPlayer.pause = function(){
    if(this.isPlaying == true){
        this.isPlaying = false
        App.player.pause();
    }else{
        this.isPlaying = true;
        App.player.pause();
    }
}
GWareIPTV.UIBase.RecordingPlayer.play = function(){
    this.isPlaying = true;
    App.player.play();
};

GWareIPTV.UIBase.RecordingPlayer.stop = function(e){
    if (e && e.type && (e.type === 'keydown')) e.preventDefault();

    pp({
        message: _('Are you sure you want to stop this recording?'),
        buttons: [
            {label: _('Yes'), data: {'data-fn': 'btnBack'}},
            {label: _('Cancel'), data: {}}
        ]
    });
};

GWareIPTV.UIBase.RecordingPlayer.forward = function(){
    App.player.forward();
};

GWareIPTV.UIBase.RecordingPlayer.btnBack = function(){
    this.pageLoader(this.fnBack);
};

GWareIPTV.UIBase.RecordingPlayer.keyRewind = GWareIPTV.UIBase.RecordingPlayer.rewind;

GWareIPTV.UIBase.RecordingPlayer.keyForward = GWareIPTV.UIBase.RecordingPlayer.forward;

GWareIPTV.UIBase.RecordingPlayer.keyPlay = GWareIPTV.UIBase.RecordingPlayer.play;

GWareIPTV.UIBase.RecordingPlayer.keyStop = GWareIPTV.UIBase.RecordingPlayer.keyBack = GWareIPTV.UIBase.RecordingPlayer.stop;
///tv: 	tv.channel.js
GWareIPTV.UIBase.Channel.onLoad = function(html){
    this.resetPageLayout(html, true);
    this.makeZone({
        rows: [[{html: '&nbsp;', style: {width: window.innerWidth + 'px', height: window.innerHeight + 'px'}}]],
        selector: '.player-holder',
        selection: 'none',
        events: {
            keyDown: function(){
                this.addInfoControls();
                this.infoShow(true);
            }.bind(this),

            keyLeft: this.keyChannelDown.bind(this),

            keyRight: this.keyChannelUp.bind(this)
        }
    });

    this.quality = store.get('iptv.stream.quality');
    this.lastSwipe = '';
    this.isSwiping = false;
    this.infoControls = false;
    this.isChannelListOpen = false;
    this.showHint = true;
    this.groupId = store.get('iptv.channel.group') || -1;
    this.groupId = parseInt(this.groupId);
    this.prevId = null;

    if (!this.item || !this.item.id) this.item = {id: App.user.package.tv.list[0].id};

    this.listHide();
    this.reload(this.item.id, true);

    this.fnBack = this.item.back || 'TV';
};

GWareIPTV.UIBase.Channel.reload = function(id, rel){
    lg('channel > reload starting with ID [' + id + ']');

    this.hint = rel ? '' : 'Channel';

    // save previous channel ID
    if (this.channel) this.prevId = this.channel.id;

    this.channel = App.util.getChannelData(id);

    if (!this.channel)
    {
        pp({
            message: _('Channel not available [2001]'),
            buttons: [
                {label: _('OK'), data: {'data-fn': 'init', 'data-page': App.pageDefault}}
            ]
        });
        lg('channel > unable to load channel data, unknown ID [' + id + ']');

        return false;
    }

    this.isAnimated = false;
    this.pauseTime = null;
    this.delay = null;
    this.timerZap = null;
    this.nextChannel = this.next(+1, true);
    this.prevChannel = this.next(-1, true);

    // fix info panels
    if (this.lastSwipe === 'left')
    {
        $('.panel-left, .panel-middle').remove();
        $('.panel-right').css('left', 0).addClass('panel-middle').removeClass('panel-right');
    }
    if (this.lastSwipe === 'right')
    {
        $('.panel-right, .panel-middle').remove();
        $('.panel-left').css('left', 0).addClass('panel-middle').removeClass('panel-left');
    }

    this.panelLeft = this.clonePanel('left');
    this.panelRight = this.clonePanel('right');
    $('.info').prepend(this.panelLeft).append(this.panelRight);

    $('.panel-left').attr('data-id', this.prevChannel);
    $('.panel-right').attr('data-id', this.nextChannel);
    $('.panel-middle').attr('data-id', this.channel.id);
    this.infoUpdate();
    this.i18n();

    if (!App.cloudPVR.enabled)
    {
        $('.controls .span3').addClass('span4').removeClass('span3');
        $('.record').remove();
    }

    this.timerZap = window.setTimeout(function(){
        lg('channel > long key press is false, continue channel setup');
        this.hasPPV();
    }.bind(this), 500);
};

GWareIPTV.UIBase.Channel.clonePanel = function(where){
    var panel = $('.panel-middle').clone();

    panel
        .removeClass('panel-middle')
        .addClass('panel-' + where)
        .css('left', (where === 'left') ? '-100%' : '100%')
        .attr('data-x', '');

    return panel;
};

GWareIPTV.UIBase.Channel.hasPPV = function(){
    this.pageLoader(null, 'ppvValidate', {
        ppv: GWareBase64.encode(JSON.stringify(this.channel.ppv)),
        next: GWareBase64.encode(JSON.stringify({'data-fn': 'hasChildLock'}))
    });
};

GWareIPTV.UIBase.Channel.hasChildLock = function(){
    var
        enabled = store.get('iptv.childlock') || 'enabled',
        userLock = App.util.getChildLockUser(this.channel.id);

    lg('channel > child lock setting [' + enabled + ']; channel property [' + this.channel.childlock + ']; user lock [' + userLock.status + ']');

    if ((enabled === 'enabled') && (this.channel.childlock || userLock.status))
    {
        this.askPIN(function(){
            this.playStream();
        }.bind(this));

        return false;
    }

    this.playStream();
};

GWareIPTV.UIBase.Channel.playStream = function(){
    if (['stb', 'web'].hasValue(App.user.device.category))
    {
        if (this.quality)
        {

            this.qualitySetup({quality: this.quality});
        }
        else
        {
            pp({
                message: _('Choose stream quality'),
                buttons: [
                    {label: _('High'), data: {'data-fn': 'qualitySetup', 'data-quality': 'high'}},
                    {label: _('Low'), data: {'data-fn': 'qualitySetup', 'data-quality': 'low'}}
                ]
            });
        }
    }
    else if (App.user.device.category === 'mobile')
    {
        this.qualitySetup({quality: 'low'});
    }
    else
    {
        this.qualitySetup({quality: 'high'});
    }

    this.buildChannelList();
};

GWareIPTV.UIBase.Channel.qualitySetup = function(item){
    lg('channel > set stream quality to ' + item.quality);

    App.player.stop();

    //@rob
    url = this.channel.url.primary[item.quality];
    if (url.indexOf("#") > -1) {
        var split_hash = url.split('#');
        var server = split_hash[0];
        var channel_name = split_hash[1];
        url =   server +"."+ App.settings.server_location.channel +"/"+ channel_name + "/mono.m3u8";
        if (this.debug) lg('final url is :->>> [' + url + ']');
    }
    App.player.setup({
        url: url,
        //url: this.channel.url.primary[item.quality],
        ads: true,
        hasDRM: this.channel.drm.enabled,
        DRMRewriteRule: this.channel.drm && this.channel.drm.rule ? this.channel.drm.rule : '',
        secure: this.channel.secure,
        toktype:this.channel.toktype[item.quality],
        // toktype:this.channel.toktypehigh,
        hint: this.hint,
        overlay: false,
        events: {
            time: function(o){
                if ((o.position > 30) && !this.reportSent)
                {
                    this.report(this.channel.name);
                    this.reportSent = true;
                }
            }.bind(this),
            ready: function(){
                App.player.play();
                this.infoShow();
            }.bind(this),
            error: function(e){
                lg('channel > error occured', 'error');
                lg(e);

                App.player.stop();
            }.bind(this)
        }
    });
    if (this.debug) lg('this is toktype :->>><<< [' + this.channel.toktype[item.quality] + ']');

    this.quality = item.quality;
    if (!store.get('iptv.stream.quality')) store.set('iptv.stream.quality', item.quality);

    this.resetEvents();

    var prog = App.epg.getProgrammeByTime(this.channel.id);

    App.reports.set({
        type: 1,
        name: this.channel.name,
        id: this.channel.id,
        epg: prog.name
    });

    App.history.add('channels', {id: this.channel.id});

    lg('channel > reload finished [' + this.channel.name + ']');
};

GWareIPTV.UIBase.Channel.addInfoControls = function(){
    var
        width = 213,
        childLock = App.util.getChildLockUser(this.channel.id),
        buttons = [
            {html: '<button class="item btn btn-mini-guide"><span class="ico ico-list"></span>Mini Guide</button>', wrap: false, data: {'data-fn': 'miniGuide'}},
            {html: '<button class="item btn btn-mini-guide"><span class="ico ico-list"></span>Full Guide</button>', wrap: false, data: {'data-fn': 'startEPG', 'data-id': this.channel.id}}
        ];

    if (this.hasReplayTV())
    {
        buttons.push({html: '<button class="item btn btn-replay-prev"><span class="ico ico-previous2"></span>Play Previous</button>', wrap: false, data: {'data-fn': 'replayPrevious'}});
        buttons.push({html: '<button class="item btn btn-pause"><span class="ico ico-pause"></span>PauseTV</button>', wrap: false, data: {'data-fn': 'pauseTV'}});
        buttons.push({html: '<button class="item btn btn-replay-current"><span class="ico ico-replay"></span>Start Over</button>', wrap: false, data: {'data-fn': 'replayCurrent'}});
    }

    if (App.player.canChangeAspectRatio)
    {
        buttons.push({html: '<button class="item btn btn-aspect-ratio"><span class="ico ico-aspect-ratio"></span>' + _('Aspect ratio') + '</button>', wrap: false, data: {'data-fn': 'aspectRatioChoice'}});
    }

    if (Object.keys(App.player.tracks.items.audio.list).length > 1){
        buttons.push({html: '<button class="item btn"><span class="ico ico-audiotrack"></span>' + _('Audio') + '</button>',	wrap: false, data: {'data-fn': 'playerTracksRender', 'data-type': 'audio'}});
    }
    if (Object.keys(App.player.tracks.items.caption.list).length > 0){
        buttons.push({html: '<button class="item btn"><span class="ico ico-closed-caption"></span>' + _('Subtitles') + '</button>', wrap: false, data: {'data-fn': 'playerTracksRender', 'data-type': 'caption'}});
    }


    buttons.push({html: '<button class="item btn btn-childlock"><span class="ico ico-lock"></span>' + childLock.label + '</button>', wrap: false, data: {'data-fn': 'childlockUpdate', 'data-id': this.channel.id}});
    buttons.push({html: '<button class="item btn btn-close-info"><span class="ico ico-clear"></span>Close</button>', wrap: false, data: {'data-fn': 'infoHide'}});

    width = (buttons.length * width > $('.info').width()) ? $('.info').width() / buttons.length : width;

    for (var i = 0; i < buttons.length; i++)
    {
        buttons[i].style = {width: width + 'px'};
    }

    $('.button-bar').remove();
    $('.panel-middle').prepend('<div class="row-fluid button-bar"><div class="span12 info-buttons btn-container" data-nav="false" /></div>');

    this.createInfoControlZone(buttons);
    this.select($('.item[data-fn="pauseTV"]').length ? $('.item[data-fn="pauseTV"]') : $('.item[data-fn="miniGuide"]'));
    this.infoUpdate();
};

GWareIPTV.UIBase.Channel.createInfoControlZone = function(buttons){
    this.makeZone({
        rows: [buttons],
        selector: '.info-buttons',
        selection: 'bg',
        layer: 'info'
    });
};

GWareIPTV.UIBase.Channel.buildChannelList = function(){
    this.makeZone({
        rows: this.loadCategories().matrix('horizontal'),
        selector: '.categories',
        selection: 'bg',
        layer: 'channel-list',
        events: {
            keyBack: this.listHide.bind(this)
        }
    });
};

GWareIPTV.UIBase.Channel.loadCategories = function(){
    var categories = [];

    App.user.package.tv.group.forEach(function(group){
        categories.push({
            html: group.name,
            data: {'data-id': group.id}
        });
    });

    return categories;
};

GWareIPTV.UIBase.Channel.loadChannels = function(item){
    var channels = this.buildChannelsForCategory(item.id);

    if (!channels.length)
    {
        $('.chl').html('<p class="empty">' + _('There are no channels in this category') + '</p>');
        return false;
    }

    this.makeZone({
        rows: channels.matrix('horizontal'),
        selector: '.chl',
        selection: 'border',
        layer: 'channel-list',
        events: {
            keyBack: this.listHide.bind(this)
        },
        chunkSize: 1024
    });

    if (this.preselectRunningChannel && $('.chl .item[data-id="' + this.channel.id + '"]').length) this.select($('.chl .item[data-id="' + this.channel.id + '"]'));
    this.preselectRunningChannel = false;
};

GWareIPTV.UIBase.Channel.buildChannelsForCategory = function(groupId){
    var
        channel = null,
        channels = [],
        length = App.user.package.tv.list.length;

    this.groupId = groupId;
    store.set('iptv.channel.group', this.groupId);

    $('.category-menu .item').removeClass('selected');
    $('.category-menu .item[data-id="' + this.groupId + '"]').addClass('selected');

    for (var i = 0; i < length; i++)
    {
        channel = App.user.package.tv.list[i];

        if ((this.groupId === -1) || App.util.channelIsInGroup(channel.id, this.groupId))
        {
            channels.push({
                html: '<img src="' + channel.logo.normal + '" />',
                data: {'data-id': channel.id}
            });
        }
    }

    return channels;
};

GWareIPTV.UIBase.Channel.listShow = function(){
    var list = $('.channel-list');

    if (list.length === 0) return false;

    this.infoHide();

    list.css('top', window.innerHeight - list.outerHeight());
    this.isChannelListOpen = true;

    this.preselectRunningChannel = true;
    this.select($('.categories .item[data-id="' + this.groupId + '"]'));

    if ($('.ads-ticker').is(':visible'))
    {
        $('.ads-ticker').animate({bottom: 152}, 250, 'easeOutQuad');
    }
};

GWareIPTV.UIBase.Channel.listHide = function(){
    var list = $('.channel-list');

    if (list.length === 0) return false;

    list.css('top', window.innerHeight);
    this.isChannelListOpen = false;

    this.select($('.player-holder .row:first .item:first'));

    if ($('.ads-ticker').is(':visible'))
    {
        $('.ads-ticker').animate({bottom: 0}, 250, 'easeOutQuad');
    }
};

GWareIPTV.UIBase.Channel.infoUpdate = function(){
    var self = this;

    $('.panel').each(function(){

        var
            channelId = parseInt($(this).attr('data-id'), 10),
            prog = App.epg.getProgrammeByTime(channelId),
            now = new Date().getTime() / 1000,
            total = prog.ut_end - prog.ut_start,
            length = (prog.ut_end - prog.ut_start) / 60,
            elapsed = now - prog.ut_start,
            time = (prog.ut_start === 0) ? '' : new Date(prog.ut_start * 1000).niceTime() + ' - ' + new Date(prog.ut_end * 1000).niceTime(),
            remaining = (prog.ut_start === 0) ? '' : Math.round((total - elapsed) / 60) + ' min remaining',
            progress = (prog.ut_start === 0) ? 0 : Math.round(elapsed * 100 / total);

        $(this).find('.favorites .text').html(App.favorites.is(channelId) ? 'Remove from Favorites' : 'Add to Favorites');

        $(this).find('.number').html(prog.channel.number + '.');
        $(this).find('.logo img').attr('src', prog.channel.logo);
        $(this).find('.title').html(prog.name + '<span>(' + length + ' mins)</span>');
        if (length === 0) $(this).find('.title span').hide();

        $(this).find('.description').html(prog.description);
        $(this).find('.time').html(time);
        $(this).find('.current-time').html(new Date().niceTime());
        $(this).find('.elapsed').html(remaining);
        $(this).find('.progress .bar').css('width', progress + '%');

        if ($(this).hasClass('panel-middle')) self.channel.current = prog;
    });
};

GWareIPTV.UIBase.Channel.next = function(direction, dataOnly){
    var index = -1, i = 0, j = 0, list = null;

    for (i = 0; i < App.user.package.tv.group.length; i++)
    {
        if (App.user.package.tv.group[i].id === this.groupId)
        {
            list = App.user.package.tv.group[i].channels;

            for (j = 0; j < list.length; j++)
            {
                if (list[j] === this.channel.id)
                {
                    index = j + direction;
                    break;
                }
            }
            break;
        }
    }

    // if new channel index is invalid jump to first or last one based on direction
    if (!list[index]) index = (direction === 1) ? 0 : list.length - 1;

    if (dataOnly) return list[index];

    lg('channel > changing channel from ' + this.channel.id + ' to ' + list[index]);
    this.reload(list[index], false);
};

GWareIPTV.UIBase.Channel.findChannel = function(number){
    for (var i = 0; i < App.user.package.tv.list.length; i++)
    {
        if (App.user.package.tv.list[i].number === parseInt(number, 10)) return {'id': App.user.package.tv.list[i].id};
    };

    return false;
};

GWareIPTV.UIBase.Channel.hasReplayTV = function(){
    var prog = App.epg.getProgrammeByTime(this.channel.id);

    if (!prog.channel) return false;

    return prog.channel.archive || prog.channel.dveo || prog.channel.flussonic;
};

GWareIPTV.UIBase.Channel.isCloudTV = function(){
    var prog = App.epg.getProgrammeByTime(App.Channel.channel.id);

    if (!prog.channel) return false;

    return App.Channel.channel.flussonic;
};

GWareIPTV.UIBase.Channel.replayCurrent = function(e){
    if (this.pauseTime || !this.hasReplayTV()) return false;

    var prog = App.epg.getProgrammeByTime(this.channel.id);

    this.pageLoader('CatchUp', 'init', {
        id: prog.channel.id,
        ts: prog.ut_start,
        report_action: 29
    });
};

GWareIPTV.UIBase.Channel.replayPrevious = function(e){
    if (this.pauseTime || !this.hasReplayTV()) return false;

    var prog = App.epg.getProgrammeByTime(this.channel.id,true);

    this.pageLoader('CatchUp', 'init', {
        id: prog.channel.id,
        ts: prog.ut_start,
        report_action: 29
    });
};

GWareIPTV.UIBase.Channel.pauseTVResume = function(){
    this.delay = ((new Date().getTime() - this.pauseTime) / 1000).toFixed(0);

    if (this.delay >= 0)
    {
        var prog = App.epg.getProgrammeByTime(this.channel.id);

        this.pageLoader('CatchUp', 'init', {
            ts: this.pauseTime,
            id: prog.channel.id,
            report_action: 30
        });
        this.pauseTime = null;

        return false;
    }

    lg('channel > delay was less than 60s, continuing with live stream');
    this.pauseTime = null;
    this.pauseTVContinue();
};

GWareIPTV.UIBase.Channel.pauseTV = function(){
    var
        prog = App.epg.getProgrammeByTime(this.item.id),
        buttons = [
            {label: _('Quit TV'), data: {'data-fn': 'btnBack'}}
        ];

    if (!this.pauseTime && this.hasReplayTV())
    {
        if (prog.epg_id)
        {
            buttons.unshift(
                {label: _('Resume Paused TV'), data: {'data-fn': 'pauseTVResume'}},
                {label: _('Continue Live TV'), data: {'data-fn': 'pauseTVContinue'}}
            );

            App.player.stop();
            this.pauseTime = Math.round(new Date().getTime() / 1000);
        }
    }

    pp({
        message: this.channel.name,
        buttons: buttons,
        isVertical: false
    });
};

GWareIPTV.UIBase.Channel.pauseTVContinue = function(){
    App.Channel.infoHide();
    this.delay = null;
    this.pauseTime = null;
    App.player.play();
};

GWareIPTV.UIBase.Channel.keyDel = function(){
    if (!this.prevId) return false;

    lg('channel > switching to previous channel [' + this.prevId + ']');

    this.reload(this.prevId);
};

GWareIPTV.UIBase.Channel.keyGreen = function(){
    lg('channel > keyGreen fired');

    var isFavorite = App.favorites.is(this.channel.id);

    if (isFavorite)
    {
        App.favorites.remove(this.channel.id);
        this.notification(_(this.channel.name + ' removed from favorites'));
        $('.info .panel-middle .favorites .text').html('Add to Favorites');
    }
    else
    {
        App.favorites.add(this.channel.id);
        this.notification(_(this.channel.name + ' added to favorites'));
        $('.info .panel-middle .favorites .text').html('Remove from Favorites');
    }
};

GWareIPTV.UIBase.Channel.keyRed = function(){
    var prog = App.epg.getProgrammeByTime(this.channel.id);
    var rec_ = {
        id: this.channel.id,
        start: prog.ut_start,
        end: prog.ut_end,
        title:  GWareBase64.encode(prog.name),
        epgId: prog.epg_id
    }
    this.recordingSet(rec_);
};

GWareIPTV.UIBase.Channel.keyBlue = GWareIPTV.UIBase.Channel.chooseReport;

GWareIPTV.UIBase.Channel.keyChannelDown = function(){
    if (this.isAnimated) return false;

    if (this.timerZap) window.clearTimeout(this.timerZap);
    this.isAnimated = true;
    $('.panel').each(function(){
        $(this).attr({ 'data-x': $(this).position().left });
    });

    $('.info').css('top', window.innerHeight - ($('.info').height() - 80));

    App.Channel.swipe('right', 0, 0, 1);
};

GWareIPTV.UIBase.Channel.keyChannelUp = function(){
    if (this.isAnimated) return false;

    if (this.timerZap) window.clearTimeout(this.timerZap);
    this.isAnimated = true;
    $('.panel').each(function(){
        $(this).attr({ 'data-x': $(this).position().left });
    });

    $('.info').css('top', window.innerHeight - ($('.info').height() - 80));

    lg('channel > key channel up fired');
    App.Channel.swipe('left', 0, 0, 1);
};


GWareIPTV.UIBase.Channel.selectPopup = function(){
    if (this.isChannelListOpen)
    {
        this.listHide();
        return false;
    }

    switch (this.screenZone)
    {
        case 'left':
            this.keyChannelDown();
            break;

        case 'right':
            this.keyChannelUp();
            break;

        case 'middle':
            this.pauseTV();
            break;

        case 'bottom':
        default:
            this.listShow();
            break;
    }

    this.screenZone = '';
};

GWareIPTV.UIBase.Channel.swiping = function(event, phase, direction, distance, duration, fingers, fingerData, currentDirection){
    var dist = (direction === 'left') ? distance * -1 : distance;

    switch (phase)
    {
        case 'start':
            //lg('swipe start');
            $('.panel').each(function(){
                $(this).attr({ 'data-x': $(this).position().left });
            });
            //App.animate($('.info'), 0, window.innerHeight - $('.info').height(), {}, false);

            break;

        case 'move':
            if (direction === 'left' || direction === 'right')
            {
                App.Channel.isSwiping = true;
                App.Channel.infoShow();

                clearTimeout(App.Channel.timerInfo);
                $('.panel').each(function(){
                    $(this).css('left', parseInt($(this).attr('data-x'), 10) + dist);
                });
            }

            break;

        case 'end':
            //lg('swipe end, total distance = ' + distance);
            if (App.user.device.category !== 'mobile') App.Channel.swipe(direction, dist, 0, 1);
            App.Channel.isSwiping = false;

            break;

        case 'cancel':
            //lg('swipe cancel, total distance = ' + distance);

            if (App.Channel.isSwiping)
            {
                App.Channel.infoHide();
                App.Channel.isSwiping = false;
            }

            break;

    }
};

GWareIPTV.UIBase.Channel.swipe = function(direction, distance, duration, fingerCount, fingerData){
    var animationSpeed = 350;

    lg('gesture > swipe fired direction = [' + direction + ']; fingerCount = [' + fingerCount + ']');

    if (fingerCount === 1)
    {
        switch (direction)
        {
            case 'right':

                $('.panel-left').css({left: 0});
                $('.panel-middle').css({left: window.innerWidth});

                setTimeout(function(){
                    clearTimeout(App.Channel.timerInfo);

                    App.Channel.lastSwipe = 'right';
                    App.Channel.timerInfo = setTimeout(App.Channel.infoHide.bind(App.Channel), 5000);
                    App.popup.hide();
                    App.Channel.next(-1);
                }, animationSpeed);

                break;

            case 'down':
                App.Channel.addInfoControls();
                App.Channel.infoShow();
                break;

            case 'left':

                $('.panel-right').css({left: 0});
                $('.panel-middle').css({left: window.innerWidth * -1});

                setTimeout(function(){
                    clearTimeout(App.Channel.timerInfo);

                    App.Channel.lastSwipe = 'left';
                    App.Channel.timerInfo = setTimeout(App.Channel.infoHide.bind(App.Channel), 5000);
                    App.popup.hide();
                    App.Channel.next(+1);
                }, animationSpeed);

                break;
        }
    }
};


GWareIPTV.UIBase.Channel.getRecordingName = function(){
    var prog = App.epg.getProgrammeByTime(this.channel.id);

    return (this.channel.name.safeName() + '_GWare' + prog.name.safeName());
};

GWareIPTV.UIBase.Channel.resetEvents = function(){
    $('.controls .favorites').off('click');
    $('.controls .record').off('click');
    $('.controls .report').off('click');

    $('.controls .favorites').on('click', App.Channel.keyGreen.bind(App.page));
    $('.controls .record').on('click', App.Channel.keyRed.bind(App.page));
    $('.controls .report').on('click', App.Channel.keyBlue.bind(App.page));
};

GWareIPTV.UIBase.Channel.unload = function(){
    App.player.stop();
};

GWareIPTV.UIBase.Channel.btnBack = function(){
    this.pageLoader(this.fnBack || App.pageDefault.page);
};
///tv: 	tv.home.js
GWareIPTV.UIBase.TV.onLoad = function(html){
    this.resetPageLayout(html);
    this.groupId = store.get('iptv.channel.group') || -1;
    this.isPageLoad = true;

    this.makeZone({
        rows: this.loadCategories(),
        selector: '.category-menu',
        selection: 'bg'
    });

    this.select($('.category-menu .item[data-id="' + this.groupId + '"]'));
    this.enableMenu('TV');
    this.listChannels({id: this.groupId, force: true});
    this.fromPage = 'TV';
    App.reports.set({type: 2});
};

GWareIPTV.UIBase.TV.loadCategories = function(){
    var
        menu = {
            tile:   {label: '',	prop: 'display', ico: 'ico-view-headline'},
            list:   {label: '',	prop: 'display', ico: 'ico-view-module'},
            name:   {label: '',	prop: 'sort', ico: 'ico-sort-numeric-asc'},
            number: {label: '',	prop: 'sort', ico: 'ico-sort-alpha-asc'}
        },
        settings = store.get('iptv.channel.list') || { display: 'tile', sort: 'number' },
        categories = [];

    for (var key in settings)
    {
        categories.push({
            html: '<span class="ico ' + menu[settings[key]].ico + '"></span>' + menu[settings[key]].label,
            data: {
                'data-fn': 'updateSettings',
                'data-prop': menu[settings[key]].prop
            }
        });
    }

    categories.push(
        {html: '<span class="ico ico-swap-horiz"></span>', data: {'data-fn': 'init', 'data-page': 'FavoriteManager'}},
        {html: _('Search'),	data: {'data-fn': 'searchPanelShow'}}
    );

    App.user.package.tv.group.forEach(function(group){
        categories.push({
            html: group.name,
            data: {
                'data-id': group.id,
                'data-fn-select': 'listChannels',
                'data-position': group.position
            }
        });
    });

    return [categories];
};

GWareIPTV.UIBase.TV.listChannels = function(item){
    if ((this.groupId === item.id) && !item.force)
    {
        lg('tv home > same group selected, skipping channel listing');
        return false;
    }

    lg('tv home > listing channels for group [' + item.id + ']');
    this.groupId = item.id;

    $('.category-menu .item').removeClass('selected');
    $('.category-menu .item[data-id="' + this.groupId + '"]').addClass('selected');

    var
        rows = this.getChannels(item.id, {tile: Math.floor($('.channels').width() / 110), list: Math.floor($('.channels').width() / 290)}),
        pagerCount = (this.settings.display === 'tile') ? Math.floor($('.channels').height() / 110) : Math.floor($('.channels').height() / 60);

    if (!rows.length)
    {
        this.destroyZone($('.channels').attr('id'));
        $('.channels').html('<p class="empty">' + _('There are no channels in this category') + '</p>');

        return false;
    }

    this.renderChannels(rows, pagerCount);
    store.set('iptv.channel.group', this.groupId);

    window.setTimeout(function(){
        if (this.isPageLoad)
        {
            var object = (App.Channel.channel && App.Channel.channel.id) ? '.channels .item[data-id="' + App.Channel.channel.id + '"]' : '.channels .scroller .row:first-child .item:first-child' ;

            this.select($(object));
            this.isPageLoad = false;
        }
    }.bind(this), 500);
};

GWareIPTV.UIBase.TV.renderChannels = function(rows, count){
    this.makeZone({
        rows: rows,
        selector: '.channels',
        selection: (this.settings.display === 'tile') ? 'border' : 'bg',
        align: 'center',
        scroller: {
            width: 'auto',
            height: 'auto'
        },
        pager: {
            type: 'rows',
            count: count
        },
        showArrows: true
    });
};

GWareIPTV.UIBase.TV.getChannels = function(groupId, perRow){
    var
        length = 0,
        index = 0,
        rows = [],
        coverIcons = '',
        channel = null,
        channels = [];

    this.settings = store.get('iptv.channel.list') || { display: 'tile', sort: 'number' };

    for (var i = 0; i < App.user.package.tv.list.length; i++)
    {
        channel = App.user.package.tv.list[i];

        coverIcons = App.util.createCoverIcons({
            id: channel.channel_id,
            type: 'channel',
            icons: ['purchas']
        });

        if (App.util.channelIsInGroup(channel.id, groupId) || (groupId === -1))
        {
            channels.push({
                html: (this.settings.display === 'tile') ? '<img src="' + channel.logo.normal + '" />' + coverIcons : '<span>' + channel.number + '</span><span><img src="' + channel.logo.small + '" /></span><span>' + channel.name + '</span>' + coverIcons,
                data: {
                    'data-number': channel.number,
                    'data-name': channel.name,
                    'data-id': channel.id
                }
            });
        }
    }

    if (this.settings.sort === 'name')
    {
        channels.sort(function(a, b){
            return (a.data['data-name'] < b.data['data-name']) ? -1 : 1;
        });
    }

    $('.channels').addClass(this.settings.display);

    length = channels.length;
    for (var i = 0; i < length; i++)
    {
        if (!rows[index]) rows[index] = [];

        rows[index].push(channels[i]);

        if (Math.fmod(i + 1, perRow[this.settings.display]) === 0) index++;
    }

    return rows;
};

GWareIPTV.UIBase.TV.setChannelInfo = function(item){
    var
        channel = App.util.getChannelData(item.id),
        prog = App.epg.getProgrammeByTime(item.id);

    $('.channel .logo img').attr('src', channel.logo.normal);
    $('.channel .name').html('<span class="number">' + channel.number + '. </span> ' + channel.name);
    $('.channel .category').html(prog.name);
    $('.channel .info-text').html(prog.description).show();

    this.checkImages($('.channel'));
    this.channelPreviewLoad(item.id);
};

GWareIPTV.UIBase.TV.updateSettings = function(item){
    var settings = store.get('iptv.channel.list') || { display: 'tile', sort: 'number' };

    if (item.prop === 'display')
    {
        settings.display = (settings.display === 'tile') ? 'list' : 'tile';
    }
    else if (item.prop === 'sort')
    {
        settings.sort = (settings.sort === 'number') ? 'name' : 'number';
    }
    store.set('iptv.channel.list', settings);

    this.init();
};

GWareIPTV.UIBase.TV.searchPanelGo = function(){
    var
        term = $('input[name="term"]').val().toLowerCase(),
        results = [],
        was = [];

    if (!term) return false;

    App.user.package.tv.list.forEach(function(ch){
        if ((ch.name.toLowerCase().indexOf(term) > -1) && (!was.hasValue(ch.id)))
        {
            results.push({
                html: ch.name,
                data: {
                    'data-fn': 'init',
                    'data-page': 'Channel',
                    'data-id': ch.id,
                    'data-close-search': true
                }
            });
            was.push(ch.id);
        }
    });

    this.searchPanelRenderResults(results);
};

///settings:	settings.about.js
GWareIPTV.UIBase.SettingsAbout.onLoad = function(html){
    this.resetPageLayout(html);
    this.render();

    this.enableMenu('SettingsAbout');
    this.fnBack = App.pageDefault.page;
};

GWareIPTV.UIBase.SettingsAbout.render = function(){
    App.userSettings.renderMenu();
    App.userSettings.renderOptions({
        section: 'about',
        brand: '.title',
        selection : 'bg'
    });
};

//settings:	settings.catchuptv.js
GWareIPTV.UIBase.SettingsCatchupTV.onLoad = function(html){
    this.resetPageLayout(html);

    this.render();
    this.enableMenu('SettingsAbout');
    this.fnBack = App.pageDefault.page;
};

GWareIPTV.UIBase.SettingsCatchupTV.render = function(){
    App.userSettings.renderMenu();
    App.userSettings.renderOptions({
        section: 'catchup'
    });
};

//settings:	settings.disclaimer.js
GWareIPTV.UIBase.SettingsDisclaimer.onLoad = function(html){
    this.resetPageLayout(html);
    this.render();

    $('.disclaimer .text').html(App.settings.account.disclaimer);

    this.makeZone({
        rows: [[
            {html: '<span class="ico ico-keyboard-arrow-up"></span>', data: {'data-fn': 'scroll', 'data-direction': 'up'}},
            {html: '<span class="ico ico-keyboard-arrow-down"></span>', data: {'data-fn': 'scroll', 'data-direction': 'down'}}
        ]],
        selector: '.scroll',
        selection: 'bg',
        scroller: {
            width: 'auto',
            height: '100%'
        }
    });

    this.enableMenu('SettingsDisclaimer');
    this.fnBack = App.pageDefault.page;
};

GWareIPTV.UIBase.SettingsDisclaimer.render = function(){
    App.userSettings.renderMenu();
};

GWareIPTV.UIBase.SettingsDisclaimer.scroll = function(data){
    var
        area = $('.disclaimer .text'),
        scroll = area.height() * 0.8,
        pos = area.scrollTop();

    if (data.direction === 'up') area.scrollTop(pos - scroll);
    if (data.direction === 'down') area.scrollTop(pos + scroll);
};
//settings:	settings.general.js
GWareIPTV.UIBase.SettingsGeneral.onLoad = function(html){
    this.resetPageLayout(html);

    this.render();
    this.enableMenu('SettingsAbout');
    this.fnBack = App.pageDefault.page;
};

GWareIPTV.UIBase.SettingsGeneral.render = function(){
    App.userSettings.renderMenu();
    App.userSettings.renderOptions({
        section: 'general',
        callback: 'refresh'
    });
};

GWareIPTV.UIBase.SettingsGeneral.refresh = function(){
    App.page.loadCustomStyles();
    this.updateTime();
};

GWareIPTV.UIBase.SettingsGeneral.unload = function(){
    var
        pinCode = $('input[name="pin-code"]').val(),
        deviceLabel = $('input[name="device-label"]').val();

    if (pinCode === '' || pinCode.length !== 4 || isNaN(pinCode))
    {
        pp({
            message: _('Please enter a valid, four digit PIN code'),
            buttons: [
                {label: _('Retry'), data: {}}
            ]
        });
        return false;
    }

    if (deviceLabel === '')
    {
        pp({
            message: _('Please enter a valid device label'),
            buttons: [
                {label: _('Retry'), data: {}}
            ]
        });
        return false;
    }

    store.set('iptv.pin', pinCode);
    store.set('iptv.device.label', deviceLabel);

    App.user.device.label = deviceLabel;
};
//settings:	settings.languages.js
GWareIPTV.UIBase.SettingsLanguages.onLoad = function(html){
    this.resetPageLayout(html);

    this.render();
    this.enableMenu('SettingsAbout');
    this.fnBack = App.pageDefault.page;
};

GWareIPTV.UIBase.SettingsLanguages.render = function(){
    App.userSettings.renderMenu();
    App.userSettings.renderOptions({
        section: 'languages',
        callback: 'refresh'
    });
};

GWareIPTV.UIBase.SettingsLanguages.refresh = function(data){
    App.token.language = data.value;

    var
        loc = window.location,
        newToken = App.AES.encrypt(JSON.stringify(App.token));

    window.location.href = loc.protocol + '//' + loc.host + loc.pathname + '?token=' + newToken;
};
//settings:	settings.screensaver.js
GWareIPTV.UIBase.SettingsScreenSaver.onLoad = function(html){
    this.resetPageLayout(html);

    this.render();
    this.enableMenu('SettingsAbout');
    this.fnBack = App.pageDefault.page;
};

GWareIPTV.UIBase.SettingsScreenSaver.render = function(){
    App.userSettings.renderMenu();
    App.userSettings.renderOptions({
        section: 'screensaver',
        callback: 'restart'
    });
};

GWareIPTV.UIBase.SettingsScreenSaver.restart = function(){
    App.screenSaver.init();
};
//settings:	settings.speedtest.js
GWareIPTV.UIBase.SettingsSpeedTest.onLoad = function(html){
    this.resetPageLayout(html);

    var
        size = this.getSize(),
        scale = size / 250,
        needle = {
            top: 30 * scale,
            width: 25 * scale,
            height: 105 * scale
        },
        margin = needle.width / 2,
        pivot = {
            h: margin,
            v: 90 * scale
        };

    $('.gauge')
        .css({
            'width': size,
            'height': size
        });
    $('.gauge img').css({
        'height': needle.height,
        'width': needle.width,
        'top': needle.top,
        'margin-left': margin * -1,
        '-webkit-transform-origin': pivot.h + 'px ' + pivot.v + 'px'
    });

    this.render();
    this.enableMenu('SettingsAbout');
    this.fnBack = App.pageDefault.page;
};

GWareIPTV.UIBase.SettingsSpeedTest.start = function(){
    var button = $('.controls .row:first-child .item:first-child');

    button.html(_('Stop test')).attr('data-fn', 'stop');
    this.select(button);

    App.speedTest.start({
        selector: {
            value: {
                download: '.download .value',
                ping: '.ping .value'
            },
            needle: {
                download: '.download .gauge img',
                ping: '.ping .gauge img'
            }
        },
        done: function(){
            button.html(_('Start test')).attr('data-fn', 'start');
            this.select(button);
        }.bind(this)
    });
};

GWareIPTV.UIBase.SettingsSpeedTest.stop = function(){
    App.speedTest.stop();
};

GWareIPTV.UIBase.SettingsSpeedTest.render = function(){
    App.userSettings.renderMenu();

    this.makeZone({
        rows: [{html: _('Start test'), data: {'data-fn': 'start'}, style: {width: $('.controls').width() + 'px'}}].matrix('horizontal'),
        selector: '.controls',
        selection: 'bg'
    });

    this.select($('.controls .row:first .item:first'));
};

GWareIPTV.UIBase.SettingsSpeedTest.unload = function(){
    App.speedTest.abort();
};

GWareIPTV.UIBase.SettingsSpeedTest.getSize = function(){
    var max = $('.speed-test').width() / 12 * 5;

    return $('.gauge').height() > max ? max : $('.gauge').height();
};
//settings:	settings.support.js

GWareIPTV.UIBase.SettingsSupport.onLoad = function(html){
    this.resetPageLayout(html);

    store.set('iptv.subscription.warning', 'off');
    $('.warning').hide();
    $('.settings-content .left').html(App.settings.contact.text.decodeHTML());

    if (this.qr) this.qr.clear();

    if (App.settings.contact.url)
    {
        this.qr = new QRCode($(".qr")[0], {
            text: App.settings.contact.url,
            width: 128,
            height: 128,
            colorDark : "#000000",
            colorLight : "#ffffff",
            correctLevel : QRCode.CorrectLevel.H
        });
    }

    this.render();
    this.enableMenu('SettingsAbout');
    this.fnBack = App.pageDefault.page;
};

GWareIPTV.UIBase.SettingsSupport.render = function(){
    App.userSettings.renderMenu();
    App.userSettings.renderOptions({
        section: 'support',
        brand: '.title'
    });
};

///series:  series.browse.js

GWareIPTV.UIBase.SeriesBrowse.onLoad = function(html){
    this.resetPageLayout(html);

    var rows = this.getSeries();

    if (!rows.length) return false;

    this.makeZone({
        rows: rows,
        selector: '.stores',
        selection: 'border',
        stretchImages: true,
        align: 'center',
        scroller: {
            width: 'auto',
            height: 'auto'
        },
        pager: {
            type: 'rows',
            count: GWareConfig.zoneItemCount
        },
        showArrows: true
    });


};

GWareIPTV.UIBase.SeriesBrowse.getSeries = function(){
    this.movieIds = [];
    var
        index = 0,
        store = App.util.getSeriesStore(this.item.id),
        zone = this.getOptimalItemSize({
            selector: '.stores',
            type: 'store'
        }),
        rowIndex = 0,
        rows = [];

    store.series.forEach(function(serie){

        var watched = App.history.hasWatchedSeries(serie.id) ? '<div class="watched"><span class="ico ico-done"></span></div>' : '';

        if (!rows[rowIndex]) rows[rowIndex] = [];
        rows[rowIndex].push({
            html: '<img src="' + serie.logo + '" />' + watched,
            data: {
                'data-id': serie.id,
                'data-store-id': this.item.id,
                'data-fn': (serie.seasons.length > 0) ? 'init' : 'warn',
                'data-page': (serie.seasons.length > 0) ? 'SeriesDetail' : 'SeriesBrowse'
            }
        });

        index++;

        if (Math.fmod(index, zone.total) === 0) rowIndex++;
    }.bind(this));

    if (!rows.length)
    {
        $('.main').html('<p class="empty">' + _('There are no series') + '</p>');
    }

    this.enableMenu('SeriesBrowse');

    App.reports.set({type: 14});

    return rows;
};

GWareIPTV.UIBase.SeriesBrowse.warn = function(){
    pp({message: _('There are no episodes in this serie')});
};
///series:	series.detail.js
GWareIPTV.UIBase.SeriesDetail.onLoad = function(html){
    this.resetPageLayout(html);

    var
        seasonIndex = this.item.index ? this.item.index : 0,
        seasonMenu = this.getSeasonMenu();

    if (!seasonMenu || !seasonMenu.length)
    {
        $('.vod').html('<p class="empty">' + _('This series is not available at the moment, please contact support.') + '</p>');
        return false;
    }

    this.makeZone({
        rows: [seasonMenu],
        selector: '.sub-menu',
        selection: 'bg'
    });

    this.select($('.sub-menu .item[data-index="' + seasonIndex + '"]'));
    this.loadSeason(this.object.data());
};
GWareIPTV.UIBase.SeriesDetail.btnBack = function(){
    if (this.item.storeId)
    {
        this.pageLoader('SeriesBrowse', 'init', {id: this.item.storeId});
    }
    else
    {
        this.pageLoader(App.pageDefault.page);
    }
};
GWareIPTV.UIBase.SeriesDetail.getSeasonMenu = function(){
    if (this.item)
    {
        this.lastId = this.item.id;
        this.serieId = this.item.id;
    }
    else
    {
        this.serieId = this.lastId;
    }

    this.serie = App.util.getSerie(this.serieId, this.item.storeId);

    if (!this.serie) return false;

    var
        selectedSeason = null,
        menu = [{html: _('Back'), data: {'data-fn': 'btnBack'}}];

    for (var i = 0; i < this.serie.seasons.length; i++)
    {
        var
            season = this.serie.seasons[i],
            coverIcons = App.util.createCoverIcons({
                id: season.id,
                type: 'season',
                icons: ['purchase', 'watch']
            });

        menu.push({
            html:  season.name + coverIcons,
            data: {
                'data-fn': 'loadSeason',
                'data-index': i
            }
        });

        if (i === 0) selectedSeason = season;
    };

    this.enableMenu('SeriesBrowse');

    return menu;
};

GWareIPTV.UIBase.SeriesDetail.loadSeason = function(item){
    var episodes = this.getEpisodes(item.index);

    this.makeZone({
        rows: episodes,
        selector: '.playlist',
        selection: 'bg',
        scroller: {
            width: '100%',
            height: 'auto'
        },
        showArrows: true
    });
};

GWareIPTV.UIBase.SeriesDetail.getEpisodes = function(index, noBackdrop){
    var
        season = this.serie.seasons[index],
        ppv = GWareBase64.encode(JSON.stringify(season.ppv));

    if (!noBackdrop)
    {
        if ($('body').css('background-image') !== 'url("' + season.backdrop + '")');
        {
            $('body').css({
                'background-image': 'url("' + season.backdrop + '")',
                'background-repeat': 'no-repeat',
                'background-size': 'cover'
            });
        }
    }

    $('.sub-menu .item').removeClass('selected');
    $('.sub-menu .item[data-index="' + index + '"]').addClass('selected');

    $('.poster img').attr('src', season.poster);
    $('.title').html(season.name);
    $('.rating').html(this.rating2stars(season.rating));
    $('.description').html(this.getDescription(season.descriptions));
    $('.year').html(season.year);
    $('.language').html(season.language);
    // $('.duration').html(_('{$} minutes', season.length));
    $('.actors').html(this.limitActors(season.actors));
    $('.tags').html(this.getTags(season.tags));

    var episodes = [];

    for (var i = 0; i < season.episodes.length; i++)
    {
        var
            ep = season.episodes[i],
            number = (i + 1 < 10) ? '0' + (i + 1) : i + 1,
            coverIcons = App.util.createCoverIcons({
                id: ep.id,
                type: 'episode',
                icons: ['watch']
            });

        if (!episodes[i]) episodes[i] = [];

        if (season.ppv.enabled)
        {
            if (App.ppv.hasPurchased(season.id, 'season'))
            {
                episodes[i].push({
                    html: '<span>' + number + '.</span><span>' + ep.name + coverIcons + '</span>',
                    data: {
                        'data-fn': 'init',
                        'data-page': 'SeriesPlayer',
                        'data-id': this.serie.id,
                        'data-store-id': this.item.storeId,
                        'data-season': index,
                        'data-episode': i
                    }
                });
            }
            else
            {
                episodes[i].push({
                    html: _('Purchase'),
                    data: {
                        'data-fn': 'ppvValidate',
                        'data-ppv': ppv,
                        'data-next': GWareBase64.encode(JSON.stringify({
                            'data-page': 'SeriesDetail',
                            'data-fn': 'init',
                            'data-store-id': this.item.storeId,
                            'data-id': this.serie.id
                        }))
                    }
                });
            }
        }
        else
        {
            episodes[i].push({
                html: '<span>' + number + '.</span><span>' + ep.name + coverIcons + '</span>',
                data: {
                    'data-fn': 'init',
                    'data-page': 'SeriesPlayer',
                    'data-id': this.serie.id,
                    'data-store-id': this.item.storeId,
                    'data-season': index,
                    'data-episode': i
                }
            });
        }
    }

    App.reports.set({
        type: 15,
        name: this.serie.name,
        id: this.serie.id
    });

    return episodes;
};

GWareIPTV.UIBase.SeriesDetail.purchaseSeason = function(data){

};

GWareIPTV.UIBase.SeriesDetail.downloadSource = function(data){
    var episode = this.serie.seasons[data.season].episodes[data.episode];

    this.pageLoader(null, 'download', {
        type: 'serie',
        serieId: this.serie.id,
        episode: data.episode,
        name: episode.name,
        length: episode.length,
        url: episode.streams[data.index].url
    });
};

GWareIPTV.UIBase.SeriesDetail.selectDownloadSource = function(data){
    var
        btnPopup = [],
        episode = this.serie.seasons[data.season].episodes[data.episode];

    if (episode.streams.length > 1)
    {
        for (var i = 0; i < episode.streams.length; i++)
        {
            btnPopup.push({
                label: episode.streams[i].language,
                data: {
                    'data-fn': 'downloadSource',
                    'data-season': data.season,
                    'data-episode': data.episode,
                    'data-index': i
                }
            });
        }

        pp({
            message: _('Choose movie language'),
            buttons: btnPopup,
            isVertical: btnPopup.length > 3
        });

        return false;
    }

    this.downloadSource({
        season: data.season,
        episode: data.episode,
        index: 0
    });
};

GWareIPTV.UIBase.SeriesDetail.getDescription = function(items){
    for (var i = 0; i < items.length; i++)
    {
        if (items[i].language === App.language.current) return items[i].description.limit(128);
    }

    return items[0].description.limit(128);
};

GWareIPTV.UIBase.SeriesDetail.rating2stars = function(value){
    var out = [], value = parseFloat(value);

    while (value > 0)
    {
        if (value >= 1)
        {
            out.push('<span class="ico ico-star"></span>');
            value--;
        }
        else if (value >= 0.5)
        {
            out.push('<span class="ico ico-star-half"></span>');
            value = 0;
        }
    }

    for (var i = 0; i < 5; i++)
    {
        if (!out[i]) out[i] = '<span class="ico ico-star-outline"></span>';
    }

    return out.join('');
};

GWareIPTV.UIBase.SeriesDetail.limitActors = function(actors){
    if (!actors) return '';

    var arr = actors.split(',');

    if (arr.length > 5) arr.length = 5;

    return arr.join(', ');
};

GWareIPTV.UIBase.SeriesDetail.getTags = function(tags){
    if (tags.length) return tags.join(', ');

    return 'No information available';
};



GWareIPTV.UIBase.SeriesDetail.keyBack = GWareIPTV.UIBase.SeriesDetail.btnBack;

///series:	series.player.js
GWareIPTV.UIBase.SeriesPlayer.onLoad = function(html){
    this.resetPageLayout(html, true);
    this.isPlaying = false;

    this.makeZone({
        rows: [[{html: '&nbsp;', style: {width: window.innerWidth + 'px', height: window.innerHeight + 'px'}}]],
        selector: '.player-holder',
        selection: 'none',
        events: {
            keyLeft: this.preselect.bind(this, 'rewind', true),
            keyRight: this.preselect.bind(this, 'forward', true),
            keyDown: this.preselect.bind(this, 'pause'),
            keyBack: this.stop.bind(this)
        }
    });

    this.createMenu();

    this.reportSent = false;
    this.storeId = this.item.storeId;
    this.serieId = this.item.id;
    this.serie = App.util.getSerie(this.item.id, this.storeId);
    this.season = this.item.season;
    this.episode = this.item.episode;

    if (this.item.resume) // set progress if content is shared
    {
        App.history.add('series', {
            id: this.serie.seasons[this.season].episodes[this.episode].id,
            seasonId: this.serie.seasons[this.season].id,
            seriesId: this.serie.id,
            storeId: this.storeId,
            p: this.item.resume
        });
    }

    this.hasChildLock();
    this.enableMenu('SeriesBrowse');
    this.preselect('pause');
    $(document).on('click', '.report', GWareIPTV.UIBase.SeriesPlayer.keyBlue);
};

GWareIPTV.UIBase.SeriesPlayer.createMenu = function(){
    var menu = [
        {html: '<span class="ico ico-fast-rewind"></span>', data: {'data-fn': 'rewind'}},
        {html: '<span class="ico ico-pause"></span>', data: {'data-fn': 'pause'}},
        {html: '<span class="ico ico-stop"></span>', data: {'data-fn': 'stop'}},
        {html: '<span class="ico ico-fast-forward"></span>', data: {'data-fn': 'forward'}}
    ];

    if (App.player.canChangeAspectRatio)
    {
        menu.push({html: '<span class="ico ico-aspect-ratio"></span>', data: {'data-fn': 'aspectRatioChoice'}});
    }

    if (Object.keys(App.player.tracks.items.audio.list).length > 1){
        menu.push({html: '<span class="ico ico-audiotrack"></span>', data: {'data-fn': 'playerTracksRender', 'data-type': 'audio'}});
    }
    if (Object.keys(App.player.tracks.items.caption.list).length > 0){
        menu.push({html: '<span class="ico ico-closed-caption"></span>', data: {'data-fn': 'playerTracksRender', 'data-type': 'caption'}});
    }

    this.renderMenu([menu]);
};

GWareIPTV.UIBase.SeriesPlayer.renderMenu = function(menu){
    this.makeZone({
        rows: menu,
        selector: '.sub-menu',
        selection: 'bg',
        layer: 'info',
        events: {
            keyBack: this.infoHide.bind(this)
        }
    });
};

GWareIPTV.UIBase.SeriesPlayer.startEpisode = function(){
    var
        btnPopup = [],
        episode = this.serie.seasons[this.season].episodes[this.episode];

    $('.movie-header .title').html(episode.name);
    this.episodeName = episode.name;

    if (episode.streams.length > 1)
    {
        for (var i = 0; i < episode.streams.length; i++)
        {
            btnPopup.push({label: episode.streams[i].language, data: {'data-fn': 'selectStream', 'data-index': i}});
        }

        pp({
            message: _('Choose movie language'),
            buttons: btnPopup,
            isVertical: btnPopup.length > 3
        });

        return false;
    }

    this.selectStream({index: 0});
};

GWareIPTV.UIBase.SeriesPlayer.selectStream = function(item){
    var
        episode = this.serie.seasons[this.season].episodes[this.episode],
        progress = App.history.getProgress('series', episode.id),
        url = episode.streams[item.index].url;

    if (url.indexOf("#") > -1) {
        var split_hash = url.split('#');
        var server = split_hash[0];
        var serie_name = split_hash[1];
        url =   server +"."+ App.settings.server_location.serie +"/"+ serie_name;
        lg('final serie url is :->>> [' + url + ']');
    }


    App.player.setup({
        url: url,
        ads: true,
        toktype: episode.streams[item.index].toktype,
        hasDRM: episode.has_drm ? episode.has_drm : false,
        secure: episode.streams[item.index].secure,
        events: {
            complete: function(){
                App.history.add('series', {
                    id: this.serie.seasons[this.season].episodes[this.episode].id,
                    seasonId: this.serie.seasons[this.season].id,
                    seriesId: this.serie.id,
                    storeId: this.storeId
                });
                this.next();
            }.bind(this),

            error: function(e){
                lg(e);
            }.bind(this),

            time: function(o){

                $('.main .progress .bar').css('width', o.percent + '%');
                $('.progress-holder .remaining').html(o.remaining.toCounter());
                $('.progress-holder .duration').html(o.duration.toCounter());

                if ((o.position > 30) && !this.reportSent)
                {
                    this.report(this.serie.name, episode.name);
                    this.reportSent = true;
                }
            }.bind(this),

            ready: function(){
                App.reports.set({
                    type: 13,
                    name: this.serie.name,
                    id: this.serie.id,
                    tags: this.serie.seasons[this.season].tags.join(',')
                });
                if (progress.position > 0)
                {
                    pp({
                        message: _('Would you like to resume where you left off?'),
                        buttons: [
                            {label: _('Yes'), data: {'data-fn': 'resume', 'data-time': progress.position}},
                            {label: _('No'), data: {'data-fn': 'play'}}
                        ]
                    });
                }
                else
                {
                    App.player.play();
                    this.infoShow();
                }
            }.bind(this)
        }
    });
};

GWareIPTV.UIBase.SeriesPlayer.hasChildLock = function(){
    if (this.serie.childlock)
    {
        this.askPIN(function(){
            this.startEpisode();
        }.bind(this));
        return;
    }

    this.startEpisode();
};

GWareIPTV.UIBase.SeriesPlayer.prev = function(){
    if (this.episode > 0)
    {
        this.episode--;
        this.startEpisode();
    }
};

GWareIPTV.UIBase.SeriesPlayer.next = function(){
    if (this.episode < this.serie.seasons[this.season].episodes.length - 1)
    {
        lg('ui controller > loading next episode');
        this.episode++;
        this.startEpisode();
    }
    else
    {
        lg('ui controller > no more episodes, going back to detail page');
        this.pageLoader('SeriesDetail', 'init', {id: this.serieId, storeId: this.storeId});
    }
};

GWareIPTV.UIBase.SeriesPlayer.rewind = function(){
    App.player.rewind();
};
GWareIPTV.UIBase.SeriesPlayer.pause = function(){
    if(this.isPlaying == true){
        this.isPlaying = false
        window.clearTimeout(this.timerInfo);
        App.player.pause();
    }else{
        this.isPlaying = true;
        this.timerInfo = setTimeout(this.infoHide.bind(this), 5000);
        App.player.pause();
    }
}
GWareIPTV.UIBase.SeriesPlayer.play = function(){
    this.isPlaying = true;
    App.player.play();
    this.infoShow();
};

GWareIPTV.UIBase.SeriesPlayer.resume = function(item){
    lg('player > jump to [' + item.time + ']');

    App.player.play();
    App.player.jumpTo(item.time);
    this.infoShow();
};

GWareIPTV.UIBase.SeriesPlayer.stop = function(){
    if (this.prompt.active) return false;

    this.infoHide();

    pp({
        message: _('Are you sure you want to stop this serie?'),
        buttons: [
            {label: _('Yes'), data: {'data-fn': 'btnBack'}},
            {label: _('Cancel'), data: {}}
        ]
    });
};

GWareIPTV.UIBase.SeriesPlayer.forward = function(){
    App.player.forward();
};

GWareIPTV.UIBase.SeriesPlayer.keyBlue = GWareIPTV.UIBase.SeriesPlayer.chooseReport;

GWareIPTV.UIBase.SeriesPlayer.btnBack = function(){
    App.history.add('series', {
        id: this.serie.seasons[this.season].episodes[this.episode].id,
        seasonId: this.serie.seasons[this.season].id,
        seriesId: this.serie.id,
        storeId: this.storeId
    });
    App.player.stop();

    this.pageLoader('SeriesDetail', 'init', {id: this.serieId, storeId: this.storeId, index: this.season});
};

GWareIPTV.UIBase.SeriesPlayer.infoBarShow = function(){
    this.preselect('play');
};

GWareIPTV.UIBase.SeriesPlayer.keyRewind = GWareIPTV.UIBase.SeriesPlayer.rewind;

GWareIPTV.UIBase.SeriesPlayer.keyForward = GWareIPTV.UIBase.SeriesPlayer.forward;

GWareIPTV.UIBase.SeriesPlayer.keyPlay = GWareIPTV.UIBase.SeriesPlayer.play;

GWareIPTV.UIBase.SeriesPlayer.keyStop = GWareIPTV.UIBase.SeriesPlayer.keyBack = GWareIPTV.UIBase.SeriesPlayer.stop;

GWareIPTV.UIBase.SeriesPlayer.selectPopup = function(){
    this.infoHide();

    switch (this.screenZone)
    {
        case 'left':
        case 'right':
        case 'middle':
            this.stop();
            break;

        case 'bottom':
        default:
            this.infoBarShow();
            break;
    }

    this.screenZone = '';
};
///series:	series.store.js
GWareIPTV.UIBase.SeriesStore.onLoad = function(html){
    this.resetPageLayout(html);

    var rows = this.getStores(420);

    if (rows.length)
    {
        this.makeZone({
            rows: rows,
            selector: '.stores',
            selection: 'border',
            stretchImages: true,
            align: 'center',
            scroller: {
                width: 'auto',
                height: 'auto'
            },
            showArrows: true
        });
    }
    else
    {
        $('.main').html('<div><p class="empty">' + _('There are no series stores') + '</p></div>');
    }

    this.fnBack = App.pageDefault.page;
    this.enableMenu('Series');
};

GWareIPTV.UIBase.SeriesStore.getStores = function(width){
    var
        index = 0,
        rowIndex = 0,
        zone = this.getOptimalItemSize({
            selector: '.stores',
            type: 'store'
        }),
        rows = [];

    App.user.package.serie.forEach(function(store){
        if (!rows[rowIndex]) rows[rowIndex] = [];

        rows[rowIndex].push({
            html: '<img src="' + store.logo + '" />',
            data: {
                'data-id': store.id,
                'data-fn': 'init',
                'data-page': 'SeriesBrowse'
            }
        });

        index++;

        if (Math.fmod(index, zone.total) === 0) rowIndex++;
    });

    return rows;
};
///promotion: promotion.js

GWareIPTV.UIBase.Advertisement.onLoad = function(html){
    this.resetPageLayout(html, true);

    $('#player').hide();
    $('.content, .stb .content').css('height', window.innerHeight);
    $('.ad-bg').css('background-image', 'url("' + window.location.protocol + App.settings.url.image + this.item.backdrop + '")');

    this.makeZone({
        rows: [
            [{html: _('Play commercial'), data: {'data-fn': 'play', 'data-page': ''}}],
            [{html: _('Request more information'), data: {'data-fn': 'info', 'data-page': ''}}],
            [{html: _('Back to menu'), data: {'data-fn': 'init', 'data-page': App.pageDefault.page}}]
        ],
        selector: '.ad-menu',
        selection: 'bg',
        scroller: {
            width: '100%',
            height: 'auto'
        }
    });

    App.reports.set({
        type: 31,
        name: this.item.text,
        id: this.item.id
    });

    this.fnBack = App.pageDefault.page;
};

GWareIPTV.UIBase.Advertisement.play = function(){
    $('#player').show();

    App.player.setup({
        url: this.item.stream,
        events: {
            complete: function(){
                this.pageLoader('Advertisement', 'init', this.item);
            }.bind(this),

            error: function(){
                lg(e);
                this.notification(_('Stream is not available at this moment'));
            }.bind(this),

            ready: function(){
                $('.ad-menu-holder').hide();
                $('.ad-bg').css({'background-image': 'none'});

                App.player.play();
            }
        }
    });

    $('html').css('background-color');

    App.reports.set({
        type: 25,
        name: this.item.text,
        id: this.item.id
    });
};

GWareIPTV.UIBase.Advertisement.info = function(){
    App.reports.set({
        type: 32,
        name: this.item.text,
        id: this.item.id
    });

    xhr({
        url: App.baseURL.report + 'RequestInformation',
        data: {
            boxMac: App.user.UUID,
            campaignId: this.item.id,
            cmsService: App.settings.cms,
            crmService: App.settings.crm,
            city: App.user.location.city,
            state: App.user.location.state,
            country: App.user.location.country,
            userid: App.user.id
        }
    });

    pp({
        message: _('Request sent, thank you!')
    });
};

///music:	album.js

GWareIPTV.UIBase.Album.onLoad = function(html){
    this.album = App.util.getMusicAlbum(this.item.id);
    this.index = 0;
    this.reportSent = false;
    this.isPlaying = false;
    this.resetPageLayout(html);

    $('#player').css({
        opacity: 0,
        position: 'absolute',
        width: 0,
        height: 0
    });

    this.renderMenu([[
        {html: _('Back'), data: {'data-fn': 'init', 'data-page': 'Music'}},
        {html: '<span class="ico ico-skip-previous"></span>', data: {'data-fn': 'prev'}},
        {html: '<span class="ico ico-fast-rewind"></span>', data: {'data-fn': 'rewind'}},
        {html: '<span class="ico ico-pause"></span>', data: {'data-fn': 'pause'}},
        {html: '<span class="ico ico-fast-forward"></span>', data: {'data-fn': 'forward'}},
        {html: '<span class="ico ico-skip-next"></span>', data: {'data-fn': 'next'}},
    ]]);

    $('.detail img').attr('src', this.album.poster);
    $('.detail .artist').html(this.album.artist);
    $('.detail .name').html(this.album.name);
    $('.detail .description').html(this.album.description);

    var
        playlist = [],
        ppv = GWareBase64.encode(JSON.stringify(this.album.ppv));

    this.album.songs.forEach(function(tr, index){
        if (!playlist[index]) playlist[index] = [];
        playlist[index].push({
            html: 	'<div class="span1">' + (index + 1) + '.</div>' +
                '<div class="span8">' + tr.name + '</div>' +
                '<div class="span3 time"></div>',
            data: {
                'data-fn': 'ppvValidate',
                'data-ppv': ppv,
                'data-index': index,
                'data-next': GWareBase64.encode(JSON.stringify({
                    'data-index': index,
                    'data-fn': 'loadTrack'
                }))
            },
            cls: 'row-fluid'
        });
    });

    App.reports.set({
        type: 16,
        name: this.album.name,
        id: this.album.id
    });

    this.renderPlaylist(playlist);
    if (!this.album.ppv.enabled && this.album.songs.length) this.loadTrack();

    this.fnBack = 'Music';
    this.preselect('pause');
    //this.enableMenu('Music');

};

GWareIPTV.UIBase.Album.renderMenu = function(rows){
    this.makeZone({
        rows: rows,
        selector: '.sub-menu',
        selection: 'bg',
        scroller: {
            width: 'auto',
            height: '100%'
        }
    });
};

GWareIPTV.UIBase.Album.renderPlaylist = function(rows){
    if (rows.length)
    {
        this.makeZone({
            rows: rows,
            selector: '.playlist',
            selection: 'bg',
            scroller: {
                width: '100%',
                height: 'auto'
            },
            showArrows: true
        });

        this.select($('.playlist .row:first .item:first'));
    }
    else
    {
        $('.playlist').html('<p class="empty">There are no tracks in this album</p>');
    }
};

GWareIPTV.UIBase.Album.loadTrack = function(item){
    if (item) this.index = item.index;

    var
        self = this,
        track = this.album.songs[this.index].url;

    $('.playlist .item').each(function(){
        $(this).find('.ico').remove();
        $(this).find('.progress').remove();
        $(this).find('.time').html('');
    });

    $('.playlist .item[data-index="' + this.index + '"]').append('<div class="progress"><div class="bar"></div></div>');
    $('.playlist .item[data-index="' + this.index + '"]').find('.span9').prepend('<span class="ico ico-play-arrow"></span>');

    url= track;
    if (url.indexOf("#") > -1) {
        var split_hash = url.split('#');
        var server = split_hash[0];
        var music_name = split_hash[1];
        url =   server +"."+ App.settings.server_location.music +"/"+ music_name;
        lg('final album url is :->>> [' + url + ']');
    }

    App.player.setup({
        url: url,
        hasDRM: this.album.songs[this.index].has_drm ? this.album.songs[this.index].has_drm : false,
        secure: this.album.songs[this.index].secure,
        toktype:this.album.songs[this.index].toktype,
        events: {
            time: function(o){
                function seconds2minutes(seconds){
                    if (seconds < 0) return '';

                    var
                        out = '',
                        m = Math.floor(seconds.toFixed(0) / 60),
                        s = seconds.toFixed(0) - m * 60;

                    out += m + ':';
                    out += (s < 10) ? '0' + s : s;

                    return out;
                };

                $('.playlist .item[data-index="' + self.index + '"] .progress .bar').css('width', o.percent + '%');
                $('.playlist .item[data-index="' + self.index + '"] .time').html((o.remaining).toCounter());

                if ((o.position > 30) && !this.reportSent)
                {
                    this.report(this.album.name);
                    this.reportSent = true;
                }
            }.bind(this),

            error: function(e){
                lg(e);
            },

            complete: function(){
                if (this.index < this.album.songs.length - 1)
                {
                    this.index++;
                    this.loadTrack();
                }
            }.bind(this),

            ready: function(){
                App.player.play();
            }
        }
    });
};

GWareIPTV.UIBase.Album.pause = function(){
    if(this.isPlaying == true){
        this.isPlaying = false
        window.clearTimeout(this.timerInfo);
        App.player.pause();
    }else{
        this.isPlaying = true;
        this.timerInfo = setTimeout(this.infoHide.bind(this), 5000);
        App.player.pause();
    }
}
GWareIPTV.UIBase.Album.play = function(){
    this.isPlaying = true;
    App.player.play();
};

GWareIPTV.UIBase.Album.prev = function(){
    if (this.index > 0)
    {
        this.index--;
        this.loadTrack();
    }
};

GWareIPTV.UIBase.Album.next = function(){
    if (this.index < this.album.songs.length - 1)
    {
        this.index++;
        this.loadTrack();
    }
};

GWareIPTV.UIBase.Album.rewind = function(){
    App.player.rewind();
};

GWareIPTV.UIBase.Album.forward = function(){
    App.player.forward();
};

GWareIPTV.UIBase.Album.keyPlay = function(){
    App.player.play();
};

GWareIPTV.UIBase.Album.keyStop = function(){
    App.player.stop();
};

///music:	music.js

GWareIPTV.UIBase.Music.onLoad = function(html){
    this.resetPageLayout(html);

    var menu = [{html: _('Search'), data: {'data-fn': 'searchPanelShow'}}];

    App.user.package.music.forEach(function(category){
        menu.push({
            html: category.name,
            data: {
                'data-id': category.id,
                'data-fn': 'loadCategory'
            }
        });
    });

    if (menu.length > 1)
    {
        this.renderMenu(menu);
        this.select($('.sub-menu .item:nth-child(2)'));

        this.loadCategory(this.object.data());
    }
    else
    {
        $('.store').html('<p class="empty">' + _('There are no albums') + '</p>');
    }

    this.enableMenu('Music');
};

GWareIPTV.UIBase.Music.renderMenu = function(rows){
    this.makeZone({
        rows: rows.matrix('horizontal'),
        selector: '.sub-menu',
        selection: 'bg',
        scroller: {
            width: 'auto',
            height: '100%'
        }
    });
};

GWareIPTV.UIBase.Music.renderCategory = function(rows){
    this.makeZone({
        rows: rows,
        selector: '.movies',
        selection: 'border',
        stretchImages: true,
        scroller: {
            width: 'auto',
            height: '100%'
        },
        pager: {
            type: 'cols',
            count: GWareConfig.zoneItemCount
        },
        showArrows: true
    });
};

GWareIPTV.UIBase.Music.loadCategory = function(item){
    this.albums = App.util.getMusicAlbums(item.id);

    var
        rows = [[], []],
        index = 0;

    if (this.albums.length === 0)
    {
        $('.movies').html('<p class="empty">' + _('There are no albums in this category') + '</div>');
        return;
    }

    for (var i = 0; i < this.albums.length; i++)
    {
        var album = this.albums[i],
            coverIcons = App.util.createCoverIcons({
                id: album.id,
                type: 'album',
                icons: ['purchase']
            });

        rows[index].push({
            html: '<img src="' + album.poster + '" />' + coverIcons,
            data: {
                'data-id': album.id,
                'data-fn': 'init',
                'data-page':'Album'
            }
        });

        index = (index === 0) ? 1 : 0;
    };

    this.renderCategory(rows);

    $('.sub-menu .item').each(function(){ $(this).removeClass('selected'); });
    $('.sub-menu .item[data-id="' + item.id + '"]').addClass('selected');

    App.reports.set({
        type: 17,
        name: item.name,
        id: item.id
    });
};

GWareIPTV.UIBase.Music.searchPanelGo = function(){
    var
        term = $('input[name="term"]').val().toLowerCase(),
        search = [],
        results = [];

    if (term !== '')
    {
        this.albums.forEach(function(album){
            if (album.name.toLowerCase().indexOf(term) > -1)
            {
                search.push({ id: album.id, name: album.name });
            }
        });

        search.forEach(function(album){
            results.push({
                html: album.name,
                data: {
                    'data-id': album.id,
                    'data-fn': 'init',
                    'data-page': 'Album',
                    'data-close-search': true
                }
            });
        });

        this.searchPanelRenderResults(results);
    }
};



///misc:    offline.js
GWareIPTV.UIBase.Offline.onLoad = function(html){
    this.resetPageLayout(html);
    this.enableMenu('Offline content');

    var rows = [];

    for (var i = 0; i < App.DM.downloads.length; i++)
    {
        var
            row = [],
            dl = App.DM.downloads[i],
            visible = dl.running ? '' : ' hide';

        row.push({
            html:
                '<div class="name">' + dl.name + '</div>' +
                '<div class="date">' + new Date(dl.added).toString(true) + '</div>' +
                '<div class="progress' + visible + '" data-id="' + dl.id + '" data-type="' + dl.type + '"><div class="bar"></div></div>',
            wrap: false});

        if (dl.done)
        {
            row.push({
                html: '<div class="status">' + _('finished') + '</div>',
                wrap: false
            });
            row.push({
                html: '<span class="ico ico-play-arrow"></span>' + _('Play'),
                data: {
                    'data-page': 'VODMovie',
                    'data-fn': 'init',
                    'data-mode': 'offline',
                    'data-id': dl.id
                }
            });
            row.push({
                html: '<span class="ico ico-delete"></span>' + _('Delete'),
                data: {
                    'data-fn': 'offlineMediaAskDelete',
                    'data-id': dl.id,
                    'data-type': dl.type
                }
            });
        }
        else if (!dl.running)
        {
            row.push({
                html: '<div class="status">' + _('stopped') + '</div>',
                wrap: false
            });
            row.push({
                html: _('Download'),
                data: {
                    'data-fn': 'offlineMediaDownload',
                    'data-type': dl.type,
                    'data-id': dl.id,
                    'data-name': dl.name,
                    'data-url': dl.url
                }
            });
        }
        else
        {
            row.push({
                html: '<div class="status">' + _('downloading') + '</div>',
                wrap: false
            });
        }

        rows.push(row);
    }

    if (!rows.length)
    {
        $('.media').html('<p class="empty">' + _('No items found') + '</p>');
        return false;
    }

    this.makeZone({
        rows: rows,
        selector: '.media',
        selection: 'bg',
        scroller: {
            width: '100%',
            height: 'auto'
        }
    });
};

GWareIPTV.UIBase.Offline.onProgress = function(data){
    if (App.page.name === 'Offline')
    {
        var e = $('.progress[data-id="' + data.id + '"][data-type="' + data.type + '"]');

        if (e.length) e.removeClass('hide').find('.bar').css({width: (data.percent * 100) + '%'});

        if (data.percent === 1) this.init();
    }
};
///misc:	search.js
GWareIPTV.UIBase.Search.onLoad = function(html){
    this.lastSearch = '';
    this.resetPageLayout(html);

    var
        total = parseInt($('.search-results-holder').height(), 10),
        tools = [
            {
                html: '<input class="item" type="text" placeholder="' + _('Search') + '" />',
                data: {'data-fn': 'keyboardShow'},
                wrap: false,
                style: {
                    width: '200px',
                    height: '43px'
                }
            },
            {html: '<span class="ico ico-check-box"></span>' + _('Movies'), data: {'data-fn': 'mark', 'data-type': 'movies'}},
            {html: '<span class="ico ico-check-box"></span>' + _('TV channels'), data: {'data-fn': 'mark', 'data-type': 'channels'}},
            {html: '<span class="ico ico-check-box"></span>' + _('Series'), data: {'data-fn': 'mark', 'data-type': 'series'}},
            {html: '<span class="ico ico-check-box"></span>' + _('Music albums'), data: {'data-fn': 'mark', 'data-type': 'music'}}
        ];

    if (total < 320) total = 320;

    this.makeZone({
        rows: [tools],
        selector: '.tools',
        selection: 'bg'
    });

    this.select($('.tools .row .item:first'));
    this.enableMenu('Search');

    $('.main').css('background-color', 'rgba(0, 0, 0, 0.4)');
    $('.tools input').on('keyup input focus', this.reload.bind(this));

    $('.sr-row.l').css('height', total * 0.5);
    $('.sr-row.m').css('height', total * 0.4);
    $('.sr-row.s').css('height', total * 0.33);
    $('.sr-row.xs').css('height', total * 0.3);

    App.reports.set({type: 23});
};

GWareIPTV.UIBase.Search.mark = function(){
    if (this.object.find('.ico').hasClass('ico-check-box'))
    {
        this.object.find('.ico').removeClass('ico-check-box').addClass('ico-check-box-outline-blank');
    }
    else
    {
        this.object.find('.ico').removeClass('ico-check-box-outline-blank').addClass('ico-check-box');
    }

    this.reload({}, true);
};

GWareIPTV.UIBase.Search.reload = function(item, forceReload){
    var
        empty = true,
        term = $('.tools input').val(),
        movies = $('.tools [data-type="movies"] .ico').hasClass('ico-check-box'),
        channels = $('.tools [data-type="channels"] .ico').hasClass('ico-check-box'),
        series = $('.tools [data-type="series"] .ico').hasClass('ico-check-box'),
        music = $('.tools [data-type="music"] .ico').hasClass('ico-check-box');

    if (!term || (term.length < 3)) return false;
    if ((term === this.lastSearch) && !forceReload) return false;

    lg('search > term [' + term + '] for movies [' + movies + ']; channels [' + channels + ']; series [' + series + ']; music [' + music + '];');

    this.lastSearch = term;

    $('p.empty').remove();
    $('.sr-row').hide();

    if (music)
    {
        music = this.searchMusic(term);

        if (music.length)
        {
            $('.search-results-music').show();
            this.makeZone({
                rows: [music],
                selector: '.music',
                selection: 'zone',
                layer: 'results',
                events: {
                    keyUp: this.scrollUp.bind(this),
                    keyDown: this.scrollDown.bind(this)
                }
            });

            empty = false;
        }
    }

    if (movies)
    {
        movies = this.searchMovies(term);

        if (movies.length)
        {
            $('.search-results-movies').show();
            this.makeZone({
                rows: [movies],
                selector: '.movies',
                selection: 'zone',
                layer: 'results',
                events: {
                    keyUp: this.scrollUp.bind(this),
                    keyDown: this.scrollDown.bind(this)
                }
            });

            empty = false;
        }
    }

    if (channels)
    {
        channels = this.searchChannels(term);

        if (channels.length)
        {
            $('.search-results-channels').show();
            this.makeZone({
                rows: [channels],
                selector: '.channels',
                selection: 'zone',
                layer: 'results',
                events: {
                    keyUp: this.scrollUp.bind(this),
                    keyDown: this.scrollDown.bind(this)
                }
            });

            empty = false;
        }
    }

    if (series)
    {
        series = this.searchSeries(term);

        if (series.length)
        {
            $('.search-results-series').show();
            this.makeZone({
                rows: [series],
                selector: '.series',
                selection: 'zone',
                layer: 'results',
                events: {
                    keyUp: this.scrollUp.bind(this),
                    keyDown: this.scrollDown.bind(this)
                }
            });

            empty = false;
        }
    }

    if (empty)
    {
        $('.search-results-holder').append('<p class="empty">' + _('No results found for [{$}]', term) + '</p>');
    }
};

GWareIPTV.UIBase.Search.searchChannels = function(term){
    var
        result = [],
        channel = null,
        length = App.user.package.tv.list.length;

    for (var i = 0; i < length; i++)
    {
        channel = App.user.package.tv.list[i];

        if (this.findInFields(term, [channel.name]))
        {
            result.push({
                html: '<img src="' + channel.logo.normal + '" /><div>' + channel.name + '</div>',
                data: {
                    'data-number': channel.number,
                    'data-name': channel.name,
                    'data-id': channel.id,
                    'data-page': 'Channel',
                    'data-fn': 'init'
                },
                style: {width: '130px'}
            });
        }
    }

    return result;
};

GWareIPTV.UIBase.Search.searchMusic = function(term){
    var
        result = [],
        was = [];

    App.user.package.music.forEach(function(store){
        store.albums.forEach(function(album){

            if (was.hasValue(album.id)) return false;

            if (this.findInFields(term, [album.name, album.artist]))
            {
                result.push({
                    html: '<img src="' + album.poster + '" /><div>' + album.name + '</div>',
                    data: {
                        'data-id': album.id,
                        'data-fn': 'init',
                        'data-page':'Album'
                    },
                    style: {width: '200px'}
                });

                was.push(album.id);
            }

        }.bind(this));
    }.bind(this));

    return result;
};

GWareIPTV.UIBase.Search.searchMovies = function(term){
    var
        result = [],
        was = [];

    App.user.package.movie.forEach(function(store){
        store.categories.forEach(function(category){
            category.movies.forEach(function(movie){
                if (was.hasValue(movie.id)) return false;

                if (this.findInFields(term, [movie.name, movie.actors, movie.year, movie.tags.join(',')]))
                {
                    result.push({
                        html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/'+ movie.poster + '" /><div>' + movie.name + '</div>',
                        //html: '<img src="' + App.settings.url.image + movie.poster + '" /><div>' + movie.name + '</div>',
                        data: {
                            'data-id': movie.id,
                            'data-fn': 'init',
                            'data-page': 'VODDetail'
                        },
                        style: {
                            width: '220px'
                        }
                    });

                    was.push(movie.id);
                }

            }.bind(this));
        }.bind(this));
    }.bind(this));

    return result;
};

GWareIPTV.UIBase.Search.searchSeries = function(term){
    var
        result = [],
        serie = null,
        season = {},
        length = App.user.package.serie.length;

    for (var j = 0; j < length; j++)
    {
        var series = App.user.package.serie[j].series;

        for (var i = 0; i < series.length; i++)
        {
            serie = series[i];
            season = serie.seasons.length ? serie.seasons[0] : {actors: '', year: '', tags: []};

            if (this.findInFields(term, [serie.name, season.actors, season.year, season.tags.join(',')]))
            {
                result.push({
                    html: '<img src="' + serie.logo + '" /><div>' + serie.name + '</div>',
                    data: {
                        'data-id': serie.id,
                        'data-fn': (serie.seasons.length > 0) ? 'init' : 'warn',
                        'data-page': (serie.seasons.length > 0) ? 'SeriesDetail' : 'SeriesBrowse'
                    },
                    style: {width: '320px'}
                });
            }
        }
    }

    return result;
};

GWareIPTV.UIBase.Search.keyUp = function(){
    if (App.LS.zoneActive.id.indexOf('main-menu') > -1)
    {
        var item = App.LS.getOptimalObjecFromZone($('.sr-row:visible:last'), $('.tools'));

        this.select(item);
        return false;
    }

    App.LS.run('up');
};

GWareIPTV.UIBase.Search.keyDown = function(){
    if (App.LS.zoneActive.id.indexOf('tools') > -1)
    {
        var item = App.LS.getOptimalObjecFromZone($('.sr-row:visible:first'), $('.main-menu'));

        this.select(item);
        return false;
    }

    App.LS.run('down');
};

GWareIPTV.UIBase.Search.scrollUp = function(){
    if (App.LS.run('up'))
    {
        // make sure row is visible
        var
            container = $('.search-results-holder')[0].getBoundingClientRect(),
            row = $('.active').parents('.sr-row')[0].getBoundingClientRect();

        if (row.top < container.top)
        {
            var top = $('.search-results-scroller').position().top;

            $('.search-results-scroller').css('top', top + (container.top - row.top));
        }
    }
    else
    {
        this.select($('.tools .item:first'));
    }
};

GWareIPTV.UIBase.Search.scrollDown = function(){
    if (App.LS.run('down'))
    {
        // make sure row is visible
        var
            container = $('.search-results-holder')[0].getBoundingClientRect(),
            row = $('.active').parents('.sr-row')[0].getBoundingClientRect();

        if (row.bottom > container.bottom)
        {
            var top = $('.search-results-scroller').position().top;

            $('.search-results-scroller').css('top', top + (container.bottom - row.bottom));
        }
    }
    else
    {
        var item = $('.main-menu .item:first');

        if ($('.main-menu .was-active').length) item = $('.main-menu .was-active');
        if ($('.main-menu .selected').length) item = $('.main-menu .selected');

        this.select(item);
    }
};

GWareIPTV.UIBase.Search.findInFields = function(query, items){
    query = query.toLowerCase().trim();

    for (var i = 0; i < items.length; i++)
    {
        if (items[i] && items[i].toLowerCase().trim().indexOf(query) > -1) return true;
    }

    return false;
};

GWareIPTV.UIBase.Search.unload = function(){
    $('.main').css('background-color', 'transparent');
};
///misc:	user.js


GWareIPTV.UIBase.User.onLoad = function(html){
    this.resetPageLayout(html, true);

    var
        buttons = [
            {html: '<p><span class="ico ico-add"></span></p><p><span class="label">' + _('New user') + '</span></p>', data: {'data-fn': 'fbGetCode'}, cls: 'icon'},
            {html: _('Skip'), data: {'data-fn': 'skip'}, cls: 'text'}
        ];

    for (var i = 0; i < App.account.users.length; i++)
    {
        buttons.unshift({
            html: (App.account.users[i].id === 0) ? '<p><span class="ico-kids"></span></p><p><span class="label">' + _('Kids') + '</span></p>' : '<img src="' + App.account.users[i].picture + '" />',
            data: {
                'data-fn': 'selectUser',
                'data-user-id': App.account.users[i].id
            },
            cls: (App.account.users[i].id === 0) ? 'image' : ''
        });
    }

    this.makeZone({
        rows: [buttons],
        selector: '.profiles',
        selection: 'bg-border',
        scroller: {
            width: 'auto',
            height: '100%'
        },
        layer: 'users'
    });
    this.select($('.profiles .item:first-child'));
    this.enableMenu();
};

GWareIPTV.UIBase.User.selectUser = function(data){
    App.account.set(data.userId);
    this.loadUI();
};

GWareIPTV.UIBase.User.skip = function(){
    App.account.set(null);
    this.loadUI();
};

GWareIPTV.UIBase.User.loadUI = function(){
    App.loadPackages();
    this.loading();
    App.loadDefaultPage();
};

GWareIPTV.UIBase.User.unload = function(){
    App.account.render();
};


///epg:epg.h.js
GWareIPTV.UIBase.EPGh.onLoad = function(html){
    this.html = html;
    this.fnBack = App.pageDefault.page;
    this.timerTimeline = null;
    this.maxTS = 0;

    App.reports.set({
        type: 4,
        name: 'horizontal'
    });

    App.epg.viewInit('.epgh', this.loaded.bind(this));
};

GWareIPTV.UIBase.EPGh.renderPage = function(){
    App.timer({key: 'loaded'});

    this.resetPageLayout(this.html);
    this.resetEvents();
    this.enableMenu('startEPG');
    this.renderExtra();

    this.channels = App.epg[App.epg.viewDate];

    $('.date').html(App.epg.isToday(App.epg.viewDate));

    if (document.querySelector('.channels'))
    {
        document.querySelector('.channels').style.overflowX = App.mobile ? 'auto' : 'hidden';
        document.querySelector('.hours').style.overflowX = App.mobile ? 'auto' : 'hidden';
    }

    if (App.epg.isToday(App.epg.viewDate) === 'Today')
    {
        this.updateTimeline();
        this.clearTimer();
        window.setInterval(this.updateTimeline.bind(this), 1000 * 60);
    }
};

GWareIPTV.UIBase.EPGh.renderExtra = function(){};

GWareIPTV.UIBase.EPGh.buildChannelItemHTML = function(channel){
    return '<div class="ch"><img src="' + channel.logo + '" />' + channel.number + '. ' + channel.name + '</div>';
};

GWareIPTV.UIBase.EPGh.onReload = function(offset){
    lg('epgh > onReload called');

    var
        channel = null,
        from = (App.user.device.category === 'mobile') ? 0 : offset,
        to = (App.user.device.category === 'mobile') ? App.user.package.tv.list.length : offset + this.pagerCount,
        channelScroller = '';

    for (var i = from; i < to; i++)
    {
        if (App.user.package.tv.list[i])
        {
            var temp = App.user.package.tv.list[i];

            channel = this.channels[temp.number + '-' + temp.id];
            channelScroller += this.buildChannelItemHTML(channel);
        }
    }

    if (channelScroller !== '')
    {
        var o = document.querySelector('.channel-scroller') || document.querySelector('.channel-header-scroller');
        o.innerHTML = channelScroller;
        o.style.top = '0px';

        if (offset === 0) window.setTimeout(function(){App.epg.viewSelectRunning();}, 2000);
    }

    document.querySelector('.epgh .scroller').insertAdjacentHTML('afterbegin', '<div class="timeline"></div>');
    this.updateTimeline();
};

GWareIPTV.UIBase.EPGh.buildItemHTML = function(icon, name){
    return icon + '<span class="title">' + name + '</span>';
};

GWareIPTV.UIBase.EPGh.buildData = function(){
    var
        now = new Date().getTime() / 1000,
        rows = [],
        progs = [],
        tvListLength = App.user.package.tv.list.length,
        channel = null,
        lengthData = 0,
        width = 0;

    for (var i = 0; i < tvListLength; i++)
    {
        var temp = App.user.package.tv.list[i];

        channel = (this.channels && this.channels[temp.number + '-' + temp.id]) ? this.channels[temp.number + '-' + temp.id] : {data: []};
        progs = [];
        lengthData = channel.data.length;

        for (var j = 0; j < lengthData; j++)
        {
            width = (channel.data[j].ut_end - channel.data[j].ut_start) / 6;

            if (channel.data[j].ut_end > this.maxTS) this.maxTS = channel.data[j].ut_end;

            var action = this.buildEPGData(channel, channel.data[j], now);

            progs.push({
                html: (width > 50) ? this.buildItemHTML(action.icon, channel.data[j].progname) : '...',
                data: action.data,
                cls: (width < 50) ? 'prog tiny' : 'prog',
                style: {width: width + 'px'}
            });
        }

        rows.push(progs);
    }

    return rows;
};

GWareIPTV.UIBase.EPGh.loaded = function(){
    this.renderPage();
    this.getPagerCount();

    this.makeZone({
        rows: this.buildData(),
        selector: '.epgh',
        selection: 'bg',
        scroller: {
            width: 'auto',
            height: 'auto'
        },
        pager: {
            type: 'rows',
            count: this.pagerCount,
            onReload: this.onReload.bind(this)
        },
        scrollIntoView: false,
        nudgeText: true,
        showArrows: true,
        events: {
            scroll: this.onScroll
        }
    });

    this.makeHourScroller();
};

GWareIPTV.UIBase.EPGh.getPagerCount = function(){
    this.pagerCount = Math.floor($('.epgh').height() / 45);

    lg('epg > pager count [' + this.pagerCount + ']');
};

GWareIPTV.UIBase.EPGh.updateTimeline = function(){
    var now = new Date();
    $('.timeline').css('left', (now.getHours() * 60 + now.getMinutes()) * 10);
};

GWareIPTV.UIBase.EPGh.setPreview = function(item){
    $('.preview .prog-img').remove();
    lg('epg > requesting date stuff after recording: ' + App.epg.viewDate + '');

    var
        prog = App.epg.getProgramme(App.epg.viewDate, item.id, item.epgId),
        start = new Date(prog.ut_start * 1000),
        end = new Date(prog.ut_end * 1000),
        description = prog.progimg ? '<img src="' + prog.progimg + '" /><div>' + prog.description + '</div>' : '<div>' + prog.description + '</div>';

    $('.epg-channel-preview-logo').attr('src', prog.channel.logo);
    $('.epg-channel-preview-lines .channel-name').html(prog.channel.number + '. ' + prog.channel.name);
    $('.epg-channel-preview-lines .programme-name').html(prog.name);
    $('.epg-channel-preview-lines .date').html(start.longDate());
    $('.epg-channel-preview-lines .time').html(start.niceTime() + ' - ' + end.niceTime());

    $('.epg-channel-preview-show').html(description);

    this.channelPreviewLoad(prog.channel.id);
};

GWareIPTV.UIBase.EPGh.makeHourScroller = function(){
    if (document.querySelector('.hour-scroller'))
    {
        var
            html = '',
            min = App.newDate(App.epg.viewDate);

        min.setHours(0);
        min.setMinutes(0);

        while ((min.getTime() / 1000) < this.maxTS)
        {
            html += '<div class="half">' + min.niceTime() + '</div>';

            min.setMinutes(min.getMinutes() + 30);
        }

        document.querySelector('.hour-scroller').innerHTML = html;
    }
};

GWareIPTV.UIBase.EPGh.keyBlue = function(){
    this.cleanUp();
    App.epg.viewChangeDay(-1);
};

GWareIPTV.UIBase.EPGh.keyGreen = function(){
    this.cleanUp();
    App.epg.viewChangeDay(+1);
};

GWareIPTV.UIBase.EPGh.resetEvents = function(){
    $('.epg-control').off('click');

    $('.epg-control, .epg-controls .control').on('click', function(){
        App.EPGh[$(this).attr('data-fn')]();
    });

    if (App.user.device.category === 'mobile')
    {
        var
            self = this,
            channelScroller = $('.channel-scroller').length ? true : false,
            hourScroller = $('.hour-scroller').length ? true : false;

        $('.epgh').on('scroll', function(){
            var pos = $('.epgh .scroller').position();

            if (channelScroller) $('.channel-scroller').css('top', pos.top);
            if (hourScroller) $('.hour-scroller').css('left', pos.left);

            if (typeof self.onScroll === 'function') self.onScroll();
        });
    }
};

GWareIPTV.UIBase.EPGh.clearTimer = function(){
    if (this.timerTimeline) window.clearInterval(this.timerTimeline);
};

GWareIPTV.UIBase.EPGh.unload = GWareIPTV.UIBase.EPGh.clearTimer;

GWareIPTV.UIBase.EPGh.onScroll = function(){};
///epg:epg.v.js

GWareIPTV.UIBase.EPGv.onLoad = function(html){
    this.html = html;
    this.fnBack = App.pageDefault.page;

    App.reports.set({
        type: 4,
        name: 'vertical'
    });

    App.epg.viewInit('.programmes', this.loaded.bind(this));
};

GWareIPTV.UIBase.EPGv.loaded = function(){
    var
        rows = [],
        channels = App.epg[App.epg.viewDate];

    this.resetPageLayout(this.html);
    this.resetEvents();
    this.enableMenu('startEPG');

    $('.gv-left .date').html(App.epg.isToday(App.epg.viewDate));

    for (var id in channels)
    {
        rows.push({
            html: '<img src="' + channels[id].logo + '" />',
            data: {'data-id': id}
        });
    }

    this.makeZone({
        rows: [rows],
        selector: '.channels',
        selection: 'border',
        showArrows: true
    });

    this.object = App.epg.viewChannelId ? $('.channels .item[data-id="' + App.epg.viewChannelId + '"]') : $('.channels .item:first-child');
    this.select();

    this.loadProgrammes(this.object.data());
};

GWareIPTV.UIBase.EPGv.loadProgramme = function(item){
    $('.gv-right .prog-img').html('');
    var
        pr = App.epg.getProgramme(App.epg.viewDate, item.id, item.epgId),
        start = new Date(pr.ut_start * 1000),
        end = new Date(pr.ut_end * 1000),
        elapsed = this.elapsed(pr.ut_start, pr.ut_end);

    if (pr.progimg) $('.gv-right .img').html('<img src="' + pr.progimg + '" />');

    $('.gv-right .logo').html('<img src="' + pr.channel.logo + '" />');
    $('.gv-right .name').html(pr.channel.name);
    $('.gv-right .date').html(start.longDate());
    $('.gv-right .time').html(start.niceTime() + ' - ' + end.niceTime());
    $('.gv-right .title').html(pr.name);
    $('.gv-right .description').html(pr.description);
    $('.gv-right .progress').removeClass('progress-hidden');
    $('.gv-right .progress .bar').css('width', elapsed + '%');

    if (elapsed === false) $('.gv-right .progress').addClass('progress-hidden');
};

GWareIPTV.UIBase.EPGv.loadProgrammes = function(item){
    this.makeZone({
        rows: this.buildProgrammes(App.epg[App.epg.viewDate][item.id]),
        selector: '.programmes',
        selection: 'bg',
        scroller: {
            width: '100%',
            height: 'auto'
        },
        showArrows: true
    });

    App.epg.viewSetChannel(item.id);
    App.epg.viewSelectRunning();

    var data = item.id.split('-');
    this.channelPreviewLoad(parseInt(data[1], 10));
};

GWareIPTV.UIBase.EPGv.buildProgrammes = function(channel){
    var programmes = [];
    var now = new Date().getTime() / 1000;

    for (var i = 0; i < channel.data.length; i++)
    {
        var
            item = channel.data[i],
            s = new Date(item.ut_start * 1000),
            action = this.buildEPGData(channel, item, now),
            prog = {
                html: '<div class="span3">' + s.niceTime() + '</div><div class="span9">' + action.icon + '<span class="title">' + item.progname + '</span>' + '</div>',
                data: action.data,
                cls: 'row-fluid'
            };

        if (!programmes[i]) programmes[i] = [];
        programmes[i].push(prog);
    }

    return programmes;
};

GWareIPTV.UIBase.EPGv.elapsed = function(from, to){
    if (!App.epg.isNow(from, to)) return false;

    var
        now = new Date().getTime() / 1000,
        total = to - from,
        elapsed = now - from;

    return Math.round(elapsed * 100 / total);
};

GWareIPTV.UIBase.EPGv.findChannel = function(channelId, direction){
    var arr = [], index = 0;

    $('.channels .item').each(function(i){
        var id = parseInt($(this).attr('data-id'), 10);

        arr.push(id);
        if (id === channelId) index = i;
    });

    if (direction === 1)
    {
        return (index + 1 < arr.length) ? arr[index + 1] : arr[0];
    }

    if (direction === -1)
    {
        return (index - 1 >= 0) ? arr[index - 1] : arr[arr.length - 1];
    }
};

GWareIPTV.UIBase.EPGv.keyLeft = function(){
    if (!this.object.parent().parent().hasClass('programmes'))
    {
        App.LS.run('left');
        return false;
    }

    var data = this.object.data();

    this.loadProgrammes({id: this.findChannel(data.id, -1)});
};

GWareIPTV.UIBase.EPGv.keyRight = function(){
    if (!this.object.parent().parent().hasClass('programmes'))
    {
        App.LS.run('right');
        return false;
    }

    var data = this.object.data();

    this.loadProgrammes({id: this.findChannel(data.id, +1)});
};

GWareIPTV.UIBase.EPGv.keyBlue = function(){
    App.epg.viewChangeDay(-1);
};

GWareIPTV.UIBase.EPGv.keyGreen = function(){
    App.epg.viewChangeDay(+1);
};

GWareIPTV.UIBase.EPGv.keyBack = function(e){
    if (e) e.preventDefault();

    var parent = this.object.parents('.hot-zone');

    if (parent.hasClass('programmes'))
    {
        var obj = $('.channels .item.was-active').length ? $('.channels .item.was-active') : $('.channels .item:first-child');
        this.select(obj);
        return false;
    }

    if (!parent.hasClass('main-menu') && $('.main-menu').is(':visible'))
    {
        this.select($('.main-menu .item:first-child'));
        return false;
    }

    this.pageLoader(App.pageDefault.page);
};

GWareIPTV.UIBase.EPGv.resetEvents = function(){
    $('.epg-control').off('click');

    $('.epg-control').on('click', function(){
        App.EPGv[$(this).attr('data-fn')]();
    });
};
///apps: apps.js


GWareIPTV.UIBase.Apps.onLoad = function(html){
    this.resetPageLayout(html);
    this.menu = this.buildCategories();

    if (this.menu[0].length > 1)
    {
        this.renderCategories();
        this.select($('.category-menu .item[data-group="Installed"]'));
    }
    else
    {
        $('.main').html('<p class="empty">' + _('There are no apps') + '</p>');
    }

    this.fnBack = App.pageDefault.page;
    this.enableMenu('Apps');
};

GWareIPTV.UIBase.Apps.renderCategories = function(){
    this.makeZone({
        rows: this.menu,
        selector: '.category-menu',
        selection: 'bg'
    });
};

GWareIPTV.UIBase.Apps.buildCategories = function(){
    var menu = [{html: _('Installed'), data: {'data-group': 'Installed'}}];

    for (var i = 0; i < App.user.package.app.group.length; i++)
    {
        var group = App.user.package.app.group[i];

        menu.push({html: group,	data: {'data-group': group}});
    }

    return [menu];
};

GWareIPTV.UIBase.Apps.loadCategory = function(item){
    var
        list = [],
        rows = [],
        rowIndex = 0,
        group = item.group;

    $('.category-menu .item').removeClass('selected');
    $('.category-menu .item[data-group="' + group + '"]').addClass('selected');

    lg('apps > loading category [' + group + ']');
    if (group === 'Installed')
    {
        this.apps = App.player.getApps();
        this.apps.forEach(function(app){
            list.push({
                html: '<img src="' + app.appImage + '" />',
                data: {
                    'data-package': app.appPackage,
                    'data-name': app.appName,
                    'data-icon': app.appImage,
                    'data-system': app.appIsSystemApp,
                    'data-fn': 'askOpen',
                    'data-text': _('Press OK to open this app')
                }
            });
        });

        list.sort(function(a, b){
            if (a.data['data-system'] === 'true') return 1;
            if (b.data['data-system'] === 'true') return -1;
            return 0;
        });

        for (var i = 0; i < list.length; i++)
        {
            if (!rows[rowIndex]) rows[rowIndex] = [];

            rows[rowIndex].push(list[i]);

            if (Math.fmod(i + 1, 10) === 0) rowIndex++;
        }

        if (this.apps.length)
        {
            this.renderApps(rows);
        }
        else
        {
            $('.channels').html('<p class="empty">' + _('There are no installed apps') + '</p>');
        }

        return false;
    }

   App.user.package.app.list.forEach(function(app){
        if (app.group === group)
        {
        
         var appUrl = app.url;

            if (appUrl.indexOf("#") > -1) {
                var split_hash = appUrl.split('#');
                var server = split_hash[0];
                var app_name = split_hash[1];
                appUrl =   server +"."+ App.settings.server_location.app +"/"+ app_name;
                lg('final apps url is :->>> [' + appUrl + ']');
            }
            appUrl = appUrl.split("?")[0];

            //adding token
            if (app.toktype || app.toktype !=='LOC') {
                appUrl += '?' + App.user.extra[app.toktype] ;}
            list.push({
                html: '<img src="'+ app.icon +'" />',
              

           data: {
                    'data-name': app.name,
                    'data-icon':  app.icon,
                    'data-url': appUrl,
                    'data-system': false,
                    'data-fn': 'askInstall',
                    'data-text': _('Press OK to install this app')
                }
            });
        }
    });

    for (var i = 0; i < list.length; i++)
    {
        if (!rows[rowIndex]) rows[rowIndex] = [];

        rows[rowIndex].push(list[i]);

        if (Math.fmod(i + 1, 10) === 0) rowIndex++;
    }

    if (list.length)
    {
        this.renderApps(rows);
    }
    else
    {
        $('.channels').html('<p class="empty">' + _('There are no apps in this category') + '</p>');
    }
};

GWareIPTV.UIBase.Apps.renderApps = function(rows){
    this.makeZone({
        rows: rows,
        selector: '.channels',
        selection: 'border',
        stretchImages: true,
        scroller: {
            width: 'auto',
            height: 'auto'
        },
        showArrows: true
    });
};

GWareIPTV.UIBase.Apps.getAppFromPackage = function(name, prop){
    lg('apps > looking for [' + name + '] app');

    for (var i = 0; i < App.user.package.app.list.length; i++)
    {
        if (App.user.package.app.list[i].name.toLowerCase() === name.toLowerCase())
        {
            return prop ? App.user.package.app.list[i][prop] : App.user.package.app.list[i];
        }
    }
};

GWareIPTV.UIBase.Apps.askOpen = function(appData){
    delete appData.fn;

    pp({
        message: _('What would you like to do?'),
        buttons: [
            {label: _('Open'), data: {'data-fn': 'open', 'data-string': GWareBase64.encode(JSON.stringify(appData))}},
            {label: _('Delete'), data: {'data-fn': 'remove', 'data-string': GWareBase64.encode(JSON.stringify(appData))}}
        ]
    });
};

GWareIPTV.UIBase.Apps.askInstall = function(appData){
    delete appData.fn;

    pp({
        message: _('Would you like to install this app?'),
        buttons: [
            {label: _('Install'), data: {'data-fn': 'install', 'data-string': GWareBase64.encode(JSON.stringify(appData))}},
            {label: _('Cancel'), data: {'data-fn': ''}}
        ]
    });
};

GWareIPTV.UIBase.Apps.info = function(item){
    $('.channel .logo').html('<img src="' +  item.icon + '" />');
    $('.channel .name').html(item.name);
    $('.channel .category').html(item.description);
    $('.channel .info-text').text(item.text).show();
    this.checkImages($('.channel .logo'));
};

GWareIPTV.UIBase.Apps.open = function(data){
    var appData = JSON.parse(GWareBase64.decode(data.string));

    App.reports.set({
        type: 20,
        name: appData.name
    });

    App.player.openApp(appData.package);
};

GWareIPTV.UIBase.Apps.install = function(data){
    var appData = JSON.parse(GWareBase64.decode(data.string));

    lg(appData);
    var result = App.player.installApp(appData.name, appData.url);
    lg(result);
};

GWareIPTV.UIBase.Apps.remove = function(data){
    var appData = JSON.parse(GWareBase64.decode(data.string));

    App.player.deleteApp(appData.package);

    this.select($('.category-menu .item').first());
};

GWareIPTV.UIBase.Apps.getIcon = function(name, isSystem){
    var iconURL = '//cloudtv.akamaized.net/userinterfaces/appicons/';
    var serverURL = '//wpc.4b01.edgecastcdn.net/004B01/images2/';
    return (isSystem === 'true') ? iconURL + name + '.png' : serverURL + name + '.jpg';
};