GWareIPTV.UIPrototype.prototype.updateTime = function () {
    $(".header .right .time").html((new Date).niceTime())
}, GWareIPTV.UIPrototype.prototype.updateWeather = function (e, t, s) {
    if (lg("weather > data arrived"), App.settings.access.feature.weather) {
        var a = (new Date).getHours(), i = a < 6 || 21 < a ? "night" : "day";
        $(".header .city").html(t), $(".header .country").html(s), $(".header .degree").html(e.temp_F + " &deg; F / " + e.temp_C + " &deg; C"), $(".header .icon").html('<img src="artwork/weather/' + i + "/" + e.weatherCode + '.png" />')
    }
}, GWareIPTV.UIPrototype.prototype.resetPageLayout = function (e, t) {
    $(".header").css("display", t ? "none" : "flex"), $(".main").css("height", t || "mobile" === App.user.device.category ? window.innerHeight : window.innerHeight - 180), $(".header, .footer").css("display", t ? "none" : "block"), e && $(".main").html(e), this.isPlayerPage = this.playerPages.hasValue(this.name), this.setupHoverMenu(t)
}, GWareIPTV.UIPrototype.prototype.setupFrame = function () {
    this.setupMenuFrame({selection: "zone", vertical: !1, type: "text", preType: "icon", perRow: !1})
}, GWareIPTV.UIPrototype.prototype.loadCustomStyles = function () {
    var e = App.hex2rgb(App.settings.style.highlight.primary),
        t = [{selector: "body", style: {"font-size": App.getFontSize()}}, {
            selector: ".item.selected",
            style: {"background-color": "transparent"}
        }, {
            selector: ".selection.selection-bg",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".selection.selection-border",
            style: {"border-color": App.settings.style.highlight.primary}
        }, {
            selector: ".bg-border.hot-zone .scroller .row .item.active",
            style: {
                "background-color": App.settings.style.highlight.primary,
                "border-color": App.settings.style.highlight.primary
            }
        }, {
            selector: ".epg .programmes .timeline",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".epg .programmes .timeline:before",
            style: {"border-top-color": App.settings.style.highlight.primary}
        }, {
            selector: ".epg .programmes .timeline:after",
            style: {"border-bottom-color": App.settings.style.highlight.primary}
        }, {
            selector: ".metro-news-date",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".hover-menu .btn",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".progress .bar",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".ad-placeholder",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .line",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .cursor",
            style: {"border-bottom": "10px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .tick",
            style: {"border-left": "3px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".progress .handle",
            style: {"background-color": "rgba(" + e.r + ", " + e.g + ", " + e.b + ", 0.5)"}
        }, {selector: ".progress .handle .dot", style: {"background-color": App.settings.style.highlight.primary}}];
    App.injectStyle(t)
}, GWareIPTV.UIPrototype.prototype.getZone = function () {
    return this.object.parents(".hot-zone").attr("class")
}, App.Apps = GWareIPTV.UIBase.Apps, App.Apps.renderCategories = function () {
    this.makeZone({rows: this.menu, selector: ".category-menu", selection: "zone"})
}, App.Apps.renderApps = function (e) {
    this.makeZone({
        rows: e,
        selector: ".channels",
        selection: "zone",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        showArrows: !0
    })
}, App.EPGh = GWareIPTV.UIBase.EPGh, App.EPGh.buildItemHTML = function (e, t) {
    return '<div class="scale">' + e + '<span class="title">' + t + "</span></div>"
}, App.EPGh.loaded = function () {
    this.renderPage(), this.getPagerCount(), this.makeZone({
        rows: this.buildData(),
        selector: ".epgh",
        selection: "zone",
        scroller: {width: "auto", height: "auto"},
        pager: {type: "rows", count: this.pagerCount, onReload: this.onReload.bind(this)},
        scrollIntoView: !1,
        nudgeText: !0,
        showArrows: !0
    }), this.makeHourScroller()
}, App.EPGv = GWareIPTV.UIBase.EPGv, App.EPGv.loaded = function () {
    var e = [], t = App.epg[App.epg.viewDate];
    for (var s in this.resetPageLayout(this.html), this.resetEvents(), this.enableMenu("startEPG"), t) e.push({
        html: '<img src="' + t[s].logo + '" />',
        data: {"data-id": s}
    });
    this.makeZone({
        items: e,
        selector: ".channels",
        selection: "zone"
    }), this.object = App.epg.viewChannelId ? $('.channels .item[data-id="' + App.epg.viewChannelId + '"]') : $(".channels .item:first-child"), this.select(), $(".gv-left .span6.date").html(App.epg.isToday(App.epg.viewDate)), this.loadProgrammes(this.object.data())
}, App.EPGv.loadProgrammes = function (e) {
    this.makeZone({
        rows: this.buildProgrammes(App.epg[App.epg.viewDate][e.id]),
        selector: ".programmes",
        selection: "zone",
        scroller: {width: "100%", height: "auto"},
        chunkSize: 128
    }), App.epg.viewSetChannel(e.id), App.epg.viewSelectRunning();
    var t = e.id.split("-");
    this.channelPreviewLoad(parseInt(t[1], 10))
}, App.HomeHOTEL = GWareIPTV.UIBase.HomeHOTEL, App.Home = GWareIPTV.UIBase.Home, App.Home.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home"), App.metro._fetch(this.renderMetro.bind(this)), this.fromPage = null
}, App.Home.renderMetro = function () {
    var s = [], a = [], i = [], e = App.history.getSeriesUnique();
    App.metro.movies.forEach(function (e) {
        var t = App.util.createCoverIcons({id: e.id, type: "movie", icons: ["purchase", "watch"]});
        s.push({
            html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '" />' + t,
            data: {
                "data-image": e.backdrop,
                "data-preview-text": e.description,
                "data-preview-name": e.name,
                "data-id": e.id,
                "data-fn": "init",
                "data-page": "VODDetail"
            }
        })
    }), 0 < e.length ? e.forEach(function (e) {
        var t = App.util.getSerie(e.seriesId, e.storeId);
        if (t) {
            var s = App.Home.getEpisode(t, e.seasonId, e.episodeId);
            a.push({
                html: '<span class="higher">' + t.name + '</span><div class="data"><div class="title">' + s + '</div><div class="progress"><div class="bar" style="width: 0%"></div></div></div><div class="overlay"></div> ',
                data: {
                    "data-id": t.id,
                    "data-page": "SeriesDetail",
                    "data-store-id": App.util.getStoreIdBySerieId(e.vod_id),
                    "data-fn": "init"
                },
                style: {"background-image": "url(" + t.seasons[0].backdrop + ")"}
            })
        }
    }) : App.metro.series.forEach(function (e) {
        a.push({
            html: "<span>" + e.name + '</span><div class="overlay"></div>',
            data: {
                "data-id": e.vod_id,
                "data-page": "SeriesDetail",
                "data-store-id": App.util.getStoreIdBySerieId(e.vod_id),
                "data-fn": "init"
            },
            style: {"background-image": "url('" + App.settings.server_location.serie_location + '/images/series/'+ e.backdrop + "')"}
        })
    }), App.metro.tv.forEach(function (e) {
        var t = App.util.createCoverIcons({id: e.channel_id, type: "channel", icons: ["purchase"]});
        i.push({
            html: '<img src="' +  App.settings.server_location.channel_location + '/images/channels/'+ e.channel_image + '" />' + t,
            data: {"data-id": e.channel_id, "data-fn": "init", "data-page": "Channel"}
        })
    });
    var t = App.metro.movies[App.random(0, App.metro.movies.length - 1)];
    this.makeZone({
        items: [{
            html: '<img src="'  + App.settings.server_location.movie_location + '/images/movies/' + t.backdrop + '" /><div class="description">' + t.description + '</div><span class="title">' + t.name + '</span><div class="overlay" />',
            data: {"data-id": t.id, "data-fn": "init", "data-page": "VODDetail"}
        }], selector: ".featured", selection: "zone"
    }), this.makeZone({items: s, selector: ".movies", selection: "zone"}), this.makeZone({
        items: a,
        selector: ".series",
        selection: "zone"
    }), this.makeZone({
        items: i,
        selector: ".channels",
        selection: "zone"
    }), $(".movies-holder img, .series-holder img, .channels-holder img").waitForImages(function () {
        App.showPage()
    })
}, App.Home.getEpisode = function (e, t, s) {
    for (var a = 0; a < e.seasons.length; a++) if (e.seasons[a].id === t) for (var i = 0; i < e.seasons[a].episodes.length; i++) if (e.seasons[a].episodes[i].id === s) return "Episode " + (i + 1)
}, App.HomePLAYER = GWareIPTV.UIBase.HomePLAYER, App.HomeTV = GWareIPTV.UIBase.HomeTV, App.HomeVOD = GWareIPTV.UIBase.HomeVOD, App.Offline = GWareIPTV.UIBase.Offline, App.Search = GWareIPTV.UIBase.Search, App.User = GWareIPTV.UIBase.User, App.Album = GWareIPTV.UIBase.Album, App.Album.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "zone",
        scroller: {width: "auto", height: "100%"},
        align: "center"
    }), $(".sub-menu .scroller .item").wrapAll('<div class="sbg" />'), $(".footer").css("background-color", "rgba(0, 0, 0, 0.8)")
}, App.Album.renderPlaylist = function (e) {
    this.makeZone({rows: e, selector: ".playlist", selection: "zone", scroller: {width: "100%", height: "auto"}})
}, App.Music = GWareIPTV.UIBase.Music, App.Music.renderMenu = function (e) {
    this.makeZone({
        rows: e.matrix("horizontal"),
        selector: ".sub-menu",
        selection: "zone",
        scroller: {width: "auto", height: "100%"},
        align: "center"
    }), $(".sub-menu .scroller .item").wrapAll('<div class="sbg" />')
}, App.Music.renderCategory = function (e) {
    this.makeZone({
        rows: e,
        selector: ".movies",
        selection: "zone",
        stretchImages: !0,
        scroller: {width: "auto", height: "100%"}
    })
}, App.Advertisement = GWareIPTV.UIBase.Advertisement, App.SeriesBrowse = GWareIPTV.UIBase.SeriesBrowse, App.SeriesBrowse.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getSeries(406.6666);
    if (!t.length) return !1;
    this.makeZone({
        rows: t,
        selector: ".stores",
        selection: "zone",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        align: "center",
        pager: {type: "rows", count: GWareConfig.zoneItemCount}
    })
}, App.SeriesDetail = GWareIPTV.UIBase.SeriesDetail, App.SeriesDetail.onLoad = function (e) {
    this.resetPageLayout(e), $(".footer").css("background-color", "rgba(0, 0, 0, 0.8)");
    var t = this.getSeasonMenu();
    if (!t.length) return !1;
    this.makeZone({
        rows: [t],
        selector: ".sub-menu",
        selection: "zone",
        align: "center"
    }), $(".sub-menu .scroller .row").wrapAll('<div class="sbg" />'), this.object = $(".sub-menu .item:nth-child(2)"), this.select(), this.loadSeason(this.object.data())
}, App.SeriesDetail.loadSeason = function (e) {
    var t = this.getEpisodes(e.index);
    this.makeZone({rows: t, selector: ".playlist", selection: "zone", scroller: {width: "100%", height: "auto"}})
}, App.SeriesDetail.unload = function () {
    $(".footer").css("background-color", "transparent")
}, App.SeriesDetail.keyBack = App.SeriesDetail.btnBack, App.SeriesPlayer = GWareIPTV.UIBase.SeriesPlayer, App.SeriesPlayer.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "none",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    })
}, App.SeriesStore = GWareIPTV.UIBase.SeriesStore, App.SettingsAbout = GWareIPTV.UIBase.SettingsAbout, App.SettingsAbout.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        align: "center"
    }), $(".settings-menu .scroller .item").wrapAll('<div class="sbg" />'), App.userSettings.renderOptions({
        section: "about",
        selection: "zone",
        brand: ".title"
    })
}, App.SettingsCatchupTV = GWareIPTV.UIBase.SettingsCatchupTV, App.SettingsCatchupTV.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        align: "center"
    }), $(".settings-menu .scroller .item").wrapAll('<div class="sbg" />'), App.userSettings.renderOptions({
        section: "catchup",
        selection: "zone",
        brand: ".title"
    })
}, App.SettingsDisclaimer = GWareIPTV.UIBase.SettingsDisclaimer, App.SettingsGeneral = GWareIPTV.UIBase.SettingsGeneral, App.SettingsGeneral.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        align: "center"
    }), $(".settings-menu .scroller .item").wrapAll('<div class="sbg" />'), App.userSettings.renderOptions({
        section: "general",
        selection: "zone",
        brand: ".title"
    })
}, App.SettingsLanguages = GWareIPTV.UIBase.SettingsLanguages, App.SettingsLanguages.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        align: "center"
    }), $(".settings-menu .scroller .item").wrapAll('<div class="sbg" />'), App.userSettings.renderOptions({
        section: "languages",
        selection: "zone",
        brand: ".title"
    })
}, App.SettingsScreenSaver = GWareIPTV.UIBase.SettingsScreenSaver, App.SettingsScreenSaver.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        align: "center"
    }), $(".settings-menu .scroller .item").wrapAll('<div class="sbg" />'), App.userSettings.renderOptions({
        section: "screensaver",
        selection: "zone",
        brand: ".title"
    })
}, App.SettingsSpeedTest = GWareIPTV.UIBase.SettingsSpeedTest, GWareIPTV.UIBase.SettingsSpeedTest.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        align: "center"
    }), $(".settings-menu .scroller .item").wrapAll('<div class="sbg" />'), this.makeZone({
        rows: [{
            html: _("Start test"),
            data: {"data-fn": "start"},
            style: {width: $(".controls").width() + "px"}
        }].matrix("horizontal"), selector: ".controls", selection: "zone"
    }), this.select($(".controls .row:first .item:first"))
}, App.SettingsSupport = GWareIPTV.UIBase.SettingsSupport, App.SettingsSupport.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        align: "center"
    }), $(".settings-menu .scroller .item").wrapAll('<div class="sbg" />'), App.userSettings.renderOptions({
        section: "support",
        selection: "zone",
        brand: ".title"
    })
}, App.CatchUpHome = GWareIPTV.UIBase.CatchUpHome, App.CatchUp = GWareIPTV.UIBase.CatchUp, App.CatchUp.renderMenu = function () {
    this.makeZone({
        rows: [[{
            html: '<span class="ico ico-skip-previous"></span>',
            data: {"data-fn": "skipPrev"}
        }, {
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {
            html: '<span class="ico ico-fast-forward"></span>',
            data: {"data-fn": "forward"}
        }, {html: '<span class="ico ico-skip-next"></span>', data: {"data-fn": "skipNext"}}]],
        selector: ".sub-menu",
        selection: "zone",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    })
}, App.FavoriteManager = GWareIPTV.UIBase.FavoriteManager, App.FavoriteManager.renderGroups = function (e) {
    this.makeZone({rows: e, selector: ".groups", selection: "zone", scroller: {width: "auto", height: "100%"}})
}, App.FavoriteManager.renderFavoritesZone = function (e) {
    this.makeZone({rows: e, selector: ".favorites", selection: "zone", scroller: {width: "100%", height: "auto"}})
}, App.FavoriteManager.renderChannels = function (e) {
    this.makeZone({rows: e, selector: ".channels", selection: "bg", scroller: {width: "100%", height: "auto"}})
}, App.Recording = GWareIPTV.UIBase.Recording, App.RecordingPlayer = GWareIPTV.UIBase.RecordingPlayer, App.Channel = GWareIPTV.UIBase.Channel, App.Channel.createInfoControlZone = function (e) {
    this.makeZone({
        items: e,
        selector: ".info-buttons",
        selection: "zone",
        scroller: {width: "auto", height: "100%"}
    }), $(".info-buttons .scroller .row").wrapAll('<div class="sbg" />')
}, App.TV = GWareIPTV.UIBase.TV, App.TV.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = [], s = [], a = 0;
    if (0 < App.user.package.serie.length) {
        for (var i = App.user.package.serie[0].series.length < 5 ? App.user.package.serie[0].series.length : 5; a < i;) {
            var r = App.random(0, App.user.package.serie[0].series.length - 1);
            if (!t.hasValue(r) && 0 < App.user.package.serie[0].series[r].seasons.length) {
                var n = App.user.package.serie[0].series[r].seasons[0];
                s.push({
                    html: '<div class="overlay"></div><div class="description">' + this.getDescription(n.descriptions) + '</div><div class="title">' + n.name + "</div>",
                    cls: "serie",
                    data: {
                        "data-id": App.user.package.serie[0].series[r].id,
                        "data-page": "SeriesDetail",
                        "data-fn": "init"
                    },
                    style: {"background-image": "url(" + n.backdrop + ")"}
                }), t.push(r), a++
            }
        }
        this.makeZone({items: s, selector: ".tv .series", selection: "zone"})
    }
    return this.makeZone({
        rows: this.loadCategories(),
        selector: ".category-menu",
        selection: "zone",
        align: "center"
    }), $(".category-menu .scroller .row").wrapAll('<div class="sbg" />'), this.select($('.category-menu .item[data-id="-1"]')), $(".main-menu .item").removeClass("selected"), $('.main-menu .item[data-page="TV"]').addClass("selected"), this.fnBack = App.pageDefault.page, this.enableMenu("TV"), !0
}, App.TV.renderChannels = function (e) {
    this.makeZone({
        rows: e,
        selector: ".channels",
        selection: "zone",
        scroller: {width: "auto", height: "auto"},
        pager: {type: "rows", count: pagerCount},
        showArrows: !0
    })
}, App.TV.getDescription = function (e) {
    for (var t = 0; t < e.length; t++) if (e[t].language === App.language.current) return e[t].description;
    return e[0].description
}, App.VODBrowse = GWareIPTV.UIBase.VODBrowse, App.VODBrowse.onLoad = function (e) {
    this.item ? (this.lastId = this.item.id, this.back = this.item.back, this.storeId = this.item.id) : this.storeId = this.lastId, this.store = App.util.getVODStore(this.storeId), this.resetPageLayout(e);
    var s = [{html: _("Back"), data: {"data-fn": "btnBack"}}, {
        html: _("Search"),
        data: {"data-fn": "searchPanelShow"}
    }];
    this.store.categories.forEach(function (e, t) {
        s.push({html: e.name, data: {"data-index": t, "data-fn": "loadCategory"}})
    }), this.makeZone({
        items: s,
        selector: ".sub-menu",
        selection: "zone"
    }), $(".sub-menu .scroller .item").wrapAll('<div class="sbg" />'), this.object = $('.sub-menu .item[data-index="0"]'), this.select(), this.enableMenu("VOD"), this.fnBack = this.back, this.loadCategory(this.object.data())
}, App.VODBrowse.loadCategory = function (e) {
    var t = [[], []], s = 0;
    this.movieIds = [], this.store.categories[e.index].movies.forEach(function (e) {
        App.VODBrowse.movieIds.push(e.id), coverIcons = App.util.createCoverIcons({
            id: e.id,
            type: "movie",
            icons: ["purchase", "watch"]
        }), t[s].push({
            html: '<img src="' +  App.settings.server_location.movie_location + '/images/movie/'+ e.poster + '" />' + coverIcons,
            data: {"data-id": e.id, "data-fn": "init", "data-page": "VODDetail"}
        }), s = 0 === s ? 1 : 0
    }), 0 === this.movieIds.length && $(".movies").html('<p class="empty">' + _("This category is empty") + "</p>"), this.makeZone({
        rows: t,
        selector: ".movies",
        selection: "zone",
        scroller: {width: "auto", height: "100%"},
        pager: {type: "cols", count: GWareConfig.zoneItemCount}
    }), $(".sub-menu .item").each(function () {
        $(this).removeClass("selected")
    }), $('.sub-menu .item[data-index="' + e.index + '"]').addClass("selected")
}, App.VODDetail = GWareIPTV.UIBase.VODDetail, App.VODDetail.loadAfter = function () {
    null !== this.movie.backdrop && $("body").css({
        "background-image": 'url("' + App.settings.server_location.movie_location + '/images/movies/'+ this.movie.backdrop + '")',
        "background-repeat": "no-repeat",
        "background-size": "cover"
    }), this.makeZone({
        rows: [[{html: _("Previous"), data: {"data-fn": "prev"}}, {
            html: _("Back"),
            data: {"data-fn": "btnBack"}
        }, {
            html: _("Watch Trailer"),
            data: {
                "data-fn": "init",
                "data-page": "VODTrailer",
                "data-name": this.movie.name,
                "data-length": this.movie.length,
                "data-url": this.movie.trailer_url
            }
        }, {
            html: _("Watch Movie"),
            data: {"data-fn": "ppvValidate", "data-ppv": this.ppv, "data-next": this.ppvNext}
        }, {
            html: '<span class="ico ico-share"></span> ' + _("Social Share"),
            data: {"data-fn": "fbShare", "data-title": this.movie.name, "data-type": "movie", "data-id": this.movie.id}
        }, {html: _("Next"), data: {"data-fn": "next"}}]], selector: ".sub-menu", selection: "zone"
    }), $(".sub-menu .scroller .row").wrapAll('<div class="sbg" />'), $(".footer").css("background-color", "rgba(0, 0, 0, 0.8)")
}, App.VODDetail.unload = function () {
    $(".footer").css("background-color", "transparent")
}, App.VOD = GWareIPTV.UIBase.VOD, App.VOD.onLoad = function (e) {
    this.resetPageLayout(e);
    var s = 0, a = 0, i = Math.floor($(".vod").width() / 406.6666), r = [];
    App.user.package.movie.forEach(function (e) {
        if (e.isMain) {
            var t = null;
            t = 0 === e.categories.length && 0 === e.subs.length ? {"data-fn": "warn"} : {
                "data-id": e.id,
                "data-fn": "init",
                "data-back": "VOD",
                "data-page": 0 === e.subs.length ? "VODBrowse" : "VODSub"
            }, r[a] || (r[a] = []), r[a].push({
                html: '<img src="' + e.logo + '" />',
                data: t
            }), s++, 0 === Math.fmod(s, i) && a++
        }
    }), r.length ? this.makeZone({
        rows: r,
        selector: ".stores",
        selection: "zone",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        align: "center"
    }) : $(".main").html('<div><p class="empty">' + _("There are no movie stores") + "</p></div>"), this.fnBack = App.pageDefault.page, this.enableMenu("VOD")
}, App.VODMovie = GWareIPTV.UIBase.VODMovie, App.VODMovie.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "none",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), $(".sub-menu .scroller .item").wrapAll('<div class="sbg" />')
}, App.VODSub = GWareIPTV.UIBase.VODSub, App.VODSub.onLoad = function (e) {
    this.item ? (this.lastId = this.item.id, this.storeId = this.item.id) : this.storeId = this.lastId, this.resetPageLayout(e);
    for (var t = App.util.getVODStore(this.storeId), s = this.getOptimalItemSize({
        selector: ".stores",
        type: "store"
    }), a = 0, i = 0, r = t.subs.length, n = [], o = [], l = 0; l < r; l++) n.push(App.util.getVODStore(t.subs[l]));
    n.sort(function (e, t) {
        return e.position < t.position ? -1 : 1
    });
    for (l = 0; l < r; l++) o[a] || (o[a] = []), o[a].push({
        html: '<img src="' + n[l].logo + '" />',
        data: {
            "data-id": n[l].id,
            "data-fn": "init",
            "data-back": "VODSub",
            "data-page": 0 === n[l].subs.length ? "VODBrowse" : "VODSub"
        },
        style: {width: s.item.width - .05 * s.item.width}
    }), i++, 0 === Math.fmod(i, s.total) && a++;
    this.render(o), this.enableMenu("VOD"), this.fnBack = "VOD", App.reports.set({type: 9, name: t.name, id: t.id})
}, App.VODSub.render = function (e) {
    this.makeZone({
        rows: e,
        selector: ".stores",
        selection: "zone",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        align: "center"
    }), this.makeZone({
        items: [{html: _("Back"), data: {"data-fn": "btnBack"}}],
        selector: ".sub-menu",
        selection: "zone"
    }), $(".sub-menu .scroller .item").wrapAll('<div class="sbg" />')
}, App.VODTrailer = GWareIPTV.UIBase.VODTrailer, App.VODTrailer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind"),
            keyRight: this.preselect.bind(this, "forward"),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "none",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        align: "center"
    }), $(".sub-menu .scroller .item").wrapAll('<div class="sbg" />'), $(".movie-header .title").html(this.item.name), App.player.setup({
        url: this.item.url,
        events: {
            complete: function () {
                this.pageLoader(this.fnBack)
            }.bind(this), time: function (e) {
                $(".progress-holder .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function () {
                pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), this.fnBack = "VODDetail", App.reports.set({type: 12, name: this.item.name})
}, App.Youtube = GWareIPTV.UIBase.Youtube, App.Youtube.loaded = function () {
    var e = App.Youtube, t = [];
    e.resetPageLayout(e.html), t.push({
        html: _("Search"),
        data: {"data-fn": "searchPanelShow"}
    }), e.categories.forEach(function (e) {
        if ("Music" === e.name) return !1;
        t.push({
            html: e.name,
            data: {"data-id": e.id, "data-channel-id": e.channelId, "data-name": e.name, "data-fn": "loadCategory"}
        })
    }), e.makeZone({
        items: t,
        selector: ".sub-menu",
        selection: "zone",
        align: "center"
    }), $(".sub-menu .scroller .item").wrapAll('<div class="sbg" />'), e.fnBack = App.pageDefault.page, e.enableMenu("Youtube"), e.object = $(".sub-menu .item:nth-child(3)"), e.select(), e.loadCategory(e.object.data())
}, App.YoutubePlayer = GWareIPTV.UIBase.YoutubePlayer, App.YoutubePlayer.reload = function () {
    var e = App.baseURL.youtube + "?videoid=" + this.videos[this.index].id,
        t = this.index < this.videos.length - 1 ? this.index + 1 : 0,
        s = 0 < this.index ? this.index - 1 : this.videos.length - 1;
    App.reports.set({type: 18, name: this.videos[this.index].title}), App.player.setup({
        url: e,
        events: {
            complete: function () {
                this.next()
            }.bind(this), time: function (e) {
                $(".progress-holder .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function (e) {
                lg(e), pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), "left" === this.lastSwipe && ($(".panel-left, .panel-middle").remove(), $(".panel-right").addClass("panel-middle").removeClass("panel-right")), "right" === this.lastSwipe && ($(".panel-right, .panel-middle").remove(), $(".panel-left").addClass("panel-middle").removeClass("panel-left")), $(".info").prepend(this.clonePanel("left")).append(this.clonePanel("right")), $(".panel-left").attr("data-index", s), $(".panel-right").attr("data-index", t), $(".panel-middle").attr("data-index", this.index), $(".panel-left .sub-menu, .panel-right .sub-menu").html(""), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".panel-middle .sub-menu",
        selection: "none",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), $(".sub-menu .scroller .item").wrapAll('<div class="sbg" />'), this.infoUpdate(), this.preselect("play")
};
//# sourceMappingURL=4-gajarhalwa.min.js.map