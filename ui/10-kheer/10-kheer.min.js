GWareIPTV.UIPrototype.prototype.updateTime = function () {
    $(".header .right .time").html((new Date).niceTime())
}, GWareIPTV.UIPrototype.prototype.updateWeather = function (e, t, s) {
    if (lg("weather > data arrived"), App.settings.access.feature.weather) {
        var a = (new Date).getHours(), i = a < 6 || 21 < a ? "night" : "day";
        $(".header .city").html(t), $(".header .country").html(s), $(".header .degree").html(e.temp_C + " &deg;"), $(".header .icon").html('<img src="artwork/weather/' + i + "/" + e.weatherCode + '.png" />')
    }
}, GWareIPTV.UIPrototype.prototype.resetPageLayout = function (e, t) {
    $(".header, .footer").css("display", t ? "none" : "flex"), $(".main").css("height", t || "mobile" === App.user.device.category ? window.innerHeight : window.innerHeight - 180), e && $(".main").html(e), this.isPlayerPage = this.playerPages.hasValue(this.name), this.setupHoverMenu(t)
}, GWareIPTV.UIPrototype.prototype.setupFrame = function () {
    this.setupMenuFrame({selection: "menu", vertical: !1, type: "text", preType: "icon", perRow: !1})
}, GWareIPTV.UIPrototype.prototype.loadCustomStyles = function () {
    var e = App.hex2rgb(App.settings.style.highlight.primary),
        t = [{selector: "body", style: {"font-size": App.getFontSize()}}, {
            selector: ".item.selected",
            style: {"background-color": "transparent"}
        }, {
            selector: ".info-color",
            style: {color: App.settings.style.highlight.primary}
        }, {
            selector: ".selection.selection-sub-menu",
            style: {"border-color": App.settings.style.highlight.primary}
        }, {
            selector: ".player-control .sub-menu .item.active, .youtube-info .panel .sub-menu .scroller .row .item.active,.info.catchup .sub-menu.hot-zone .scroller .row .item.active,.sub-menu-holder.album-sub-menu .sub-menu .scroller .item.active",
            style: {color: App.settings.style.highlight.primary}
        }, {
            selector: ".bg-border.hot-zone .scroller .row .item.active",
            style: {
                "background-color": App.settings.style.highlight.primary,
                "border-color": App.settings.style.highlight.primary
            }
        }, {
            selector: ".speed-test-controls .controls.hot-zone .scroller .row .item.active",
            style: {"border-color": App.settings.style.highlight.primary, color: App.settings.style.highlight.primary}
        }, {
            selector: ".settings-menu.hot-zone .scroller .row .item.active",
            style: {"border-color": App.settings.style.highlight.primary, color: App.settings.style.highlight.primary}
        }, {
            selector: ".settings-menu.hot-zone .scroller .row .item.selected",
            style: {"border-color": App.settings.style.highlight.primary, color: App.settings.style.highlight.primary}
        }, {
            selector: ".selection.selection-bg",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".selection.selection-border",
            style: {"border-color": App.settings.style.highlight.primary}
        }, {
            selector: ".epg .programmes .timeline",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".metro-news-date",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".hover-menu .btn",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".progress .bar",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".ad-placeholder",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .line",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .cursor",
            style: {"border-bottom": "10px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .tick",
            style: {"border-left": "3px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".progress .handle",
            style: {"background-color": "rgba(" + e.r + ", " + e.g + ", " + e.b + ", 0.5)"}
        }, {selector: ".progress .handle .dot", style: {"background-color": App.settings.style.highlight.primary}}];
    App.injectStyle(t)
}, GWareIPTV.UIPrototype.prototype.getZone = function () {
    return this.object.parents(".hot-zone").attr("class")
}, App.Apps = GWareIPTV.UIBase.Apps, App.Apps.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = [{html: _("Installed"), data: {"data-group": "Installed"}}];
    App.user.package.app.group.forEach(function (e) {
        t.push({html: e, data: {"data-group": e}})
    }), 1 < t.length ? (this.makeZone({
        items: t,
        selector: ".category-menu",
        selection: "sub-menu"
    }), this.object = $('.category-menu .item[data-group="Installed"]'), this.select()) : $(".main").html('<p class="empty">' + _("There are no apps") + "</p>"), this.fnBack = App.pageDefault.page, this.enableMenu("Apps")
}, App.Apps.loadCategory = function (e) {
    var s = this, a = [], t = [], i = 0, n = e.group;
    if ($(".category-menu .item").removeClass("selected"), $('.category-menu .item[data-group="' + n + '"]').addClass("selected"), lg("apps > loading category [" + n + "]"), "Installed" === n) {
        this.apps = App.player.getApps(), this.apps.forEach(function (e) {
            var t = "true" === e.appIsSystemApp ? "loc:/" + e.appImage : s.getAppFromPackage(e.appName, "icon");
            a.push({
                html: '<img src="' + t + '" />',
                data: {
                    "data-package": e.appPackage,
                    "data-name": e.appName,
                    "data-icon": t,
                    "data-system": e.appIsSystemApp,
                    "data-fn": "askOpen",
                    "data-text": _("Press OK to open this app")
                }
            })
        });
        for (var r = 0; r < a.length; r++) t[i] || (t[i] = []), t[i].push(a[r]), 0 === Math.fmod(r + 1, 10) && i++;
        return this.apps.length ? s.makeZone({
            rows: t,
            selector: ".channels",
            selection: "zone",
            stretchImages: !0,
            scroller: {width: "auto", height: "auto"}
        }) : $(".channels").html('<p class="empty">' + _("There are no installed apps") + "</p>"), !1
    }
    App.user.package.app.list.forEach(function (e) {
        e.group === n && a.push({
            html: '<img src="' + e.icon + '" />',
            data: {
                "data-name": e.name,
                "data-icon": e.icon,
                "data-url": e.url,
                "data-system": !1,
                "data-fn": "askInstall",
                "data-text": _("Press OK to install this app")
            }
        })
    });
    for (r = 0; r < a.length; r++) t[i] || (t[i] = []), t[i].push(a[r]), 0 === Math.fmod(r + 1, 10) && i++;
    a.length ? this.makeZone({
        rows: t,
        selector: ".channels",
        selection: "zone",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"}
    }) : $(".channels").html('<p class="empty">' + _("There are no apps in this category") + "</p>")
}, App.EPGh = GWareIPTV.UIBase.EPGh, App.EPGh.loaded = function () {
    var r = App.epg[App.epg.viewDate], o = null, e = 0, t = 0, s = [], a = 0;
    for (var i in this.resetPageLayout(this.html), $(".date-controls .date").html(App.epg.isToday(App.epg.viewDate)), r) {
        a < (e = (o = r[i]).data.length) && (a = e);
        for (var n = 0; n < e; n++) {
            var l = this.buildEPGData(o, o.data[n]);
            s[n] || (s[n] = []), s[n][t] = {
                html: '<span class="time">' + new Date(1e3 * o.data[n].ut_start).niceTime() + '</span><span class="title">' + o.data[n].progname + '</span><span class="icon">' + l.icon + "</span>",
                data: l.data,
                cls: "prog"
            }
        }
        t++
    }
    for (var p = 0; p < a; p++) for (n = 0; n < s[p].length; n++) s[p][n] || (s[p][n] = {
        html: '<div class="padding"></div>',
        wrap: !1
    });
    this.makeZone({
        rows: s,
        selector: ".epgh",
        selection: "bg",
        scroller: {width: "auto", height: "auto"},
        pager: {
            type: "cols", count: 10, onReload: function (e) {
                for (var t = "", s = "mobile" === App.user.device.category ? 0 : e, a = "mobile" === App.user.device.category ? App.user.package.tv.list.length : e + 10, i = s; i < a; i++) if (App.user.package.tv.list[i]) {
                    var n = App.user.package.tv.list[i];
                    t += '<div class="ch"><span class="number">' + (o = r[n.number + "-" + n.id]).number + '.</span><img src="' + o.logo + '" /></div>'
                }
                "" !== t && (document.querySelector(".channel-header-scroller").innerHTML = t, document.querySelector(".channel-header-scroller").style.left = "0px", App.epg.viewSelectRunning())
            }
        },
        events: {scroll: this.onScroll},
        scrollIntoView: !1,
        nudgeText: !0
    }), this.resetEvents(), this.enableMenu("startEPG")
}, App.EPGh.preview = function (e) {
    for (var t = App.epg.getProgramme(App.epg.viewDate, e.id, e.epgId), s = new Date(1e3 * t.ut_start), a = new Date(1e3 * t.ut_end), i = App.epg.isNow(s, a) ? '<div class="progress"><div class="bar" style="width: ' + App.epg.getElapsedPercent(t.ut_start, t.ut_end) + '%" /></div>' : "", n = "", r = 0; r < t.channel.data.length; r++) t.ut_start === t.channel.data[r].ut_start && null !== t.channel.data[r].progimg && (n = '<img src="' + t.channel.data[r].progimg + '">');
    $(".card").remove(), $('.item[data-epg-id="' + e.epgId + '"]').append('<div class="card"><div class="time">' + s.niceTime() + " - " + a.niceTime() + '</div><div class="title">' + t.name + '</div><div class="description">' + n + t.description + "</div>" + i + "</div>")
}, App.EPGh.onScroll = function () {
    $(".channel-header-scroller").css("left", $(".epgh .scroller").position().left)
}, App.EPGv = GWareIPTV.UIBase.EPGv, App.EPGv.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = new Date, s = new Date(t.getTime() - 864e5), a = new Date(t.getTime() - 1728e5),
        i = new Date(t.getTime() + 864e5), n = new Date(t.getTime() + 1728e5),
        r = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], o = [];
    [{label: r[a.getDay()], date: a.toString()}, {label: "Yesterday", date: s.toString()}, {
        label: "Today",
        date: t.toString()
    }, {label: "Tomorrow", date: i.toString()}, {label: r[n.getDay()], date: n.toString()}].forEach(function (e, t) {
        o[t] || (o[t] = []), o[t].push({html: e.label, data: {"data-date": e.date}})
    }), this.makeZone({
        rows: o,
        selector: ".date",
        selection: "zone",
        scroller: {width: "100%", height: "auto"}
    }), App.epg.viewInit(".programmes", this.loaded.bind(this)), this.fnBack = App.pageDefault.page
}, App.EPGv.loaded = function () {
    var e = App.epg[App.epg.viewDate], t = [[]];
    for (var s in this.resetPageLayout(this.html), this.resetEvents(), this.enableMenu("startEPG"), e) t[0].push({
        html: '<img src="' + e[s].logo + '" />',
        data: {"data-id": s}
    });
    this.makeZone({
        rows: t,
        selector: ".channels",
        selection: "zone",
        scroller: {width: "auto", height: "100%"}
    }), this.object = App.epg.viewChannelId ? $('.channels .item[data-id="' + App.epg.viewChannelId + '"]') : $(".channels .item:first-child"), this.select(), this.loadProgrammes(this.object.data())
}, App.EPGv.loadProgramme = function (e) {
    var t = App.epg.getProgramme(App.epg.viewDate, e.id, e.epgId), s = new Date(1e3 * t.ut_start),
        a = new Date(1e3 * t.ut_end), i = this.elapsed(s, a);
    $(".gv-right .logo").html('<img src="' + t.channel.logo + '" />'), $(".gv-right .name").html(t.channel.name), $(".gv-right .pdate").html(s.longDate()), $(".gv-right .time").html(s.niceTime() + " - " + a.niceTime()), $(".gv-right .title").html(t.name), $(".gv-right .description").html(t.description), $(".gv-right .progress").removeClass("progress-hidden"), $(".gv-right .progress .bar").css("width", i + "%"), 0 === i && $(".gv-right .progress").addClass("progress-hidden")
}, App.EPGv.loadProgrammes = function (e) {
    this.makeZone({
        rows: this.buildProgrammes(App.epg[App.epg.viewDate][e.id]),
        selector: ".programmes",
        selection: "zone",
        scroller: {width: "100%", height: "auto"}
    }), App.epg.viewSetChannel(e.id), App.epg.viewSelectRunning()
}, App.EPGv.selectDate = function (e) {
    $(".date .item").removeClass("selected"), $('.date .item[data-date="' + e.date + '"]').addClass("selected"), lg("epg > loading day [" + e.date + "]"), App.epg.viewJumpDay(e.date)
}, App.HomeHOTEL = GWareIPTV.UIBase.HomeHOTEL, App.Home = GWareIPTV.UIBase.Home, App.Home.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home"), App.metro._fetch(this.renderMetro.bind(this)), this.fromPage = null
}, App.Home.renderMetro = function () {
    var e = [], t = [];
    this.pool = [], this.getRandomMetroItems(), this.totalHero = 7 < this.pool.length ? 7 : this.pool.length, this.mainHero = Math.floor(this.totalHero / 2);
    for (var s = 0; s < this.totalHero; s++) if (this.pool[s]) {
        var a = s * $(".metro").width() * .1 / (this.totalHero - 1),
            i = s === this.mainHero ? this.mainHero : s < this.mainHero ? s : this.totalHero - s - 1, n = this.pool[s],
            r = App.util.createCoverIcons({id: n.id, type: "movie", icons: ["purchase", "watch"]});
        e.push({
            html: '<div class="backdrop" style="background-image: url(' + n.backdrop + ')"></div><div class="overlay"></div><h1>' + r + n.name + "</h1><p>" + (n.description ? n.description : "") + '</p><img class="btn-play" src="ui/10-kheer/artwork/btn-play.png" />',
            data: {
                "data-index": s,
                "data-id": n.id,
                "data-page": n.page,
                "data-fn": "init",
                "data-rotate": GWareBase64.encode(JSON.stringify({
                    l: a,
                    m: i >= this.mainHero - 1 ? 0 : 10 * (this.mainHero - i),
                    h: i >= this.mainHero - 1 ? 0 : 20 * (this.mainHero - i),
                    z: i
                }))
            },
            style: {width: .9 * $(".metro").width() + "px"}
        })
    }
    e.length && (this.makeZone({
        items: e, selector: ".metro", selection: "zone", events: {
            keyLeft: function () {
                if (this.scrollHero(!0)) return !1;
                App.LS.run("left")
            }, keyRight: function () {
                if (this.scrollHero()) return !1;
                App.LS.run("right")
            }
        }
    }), $(".metro.hot-zone").css("overflow", "visible"), this.indexHero = this.mainHero, this.timerHero = null, this.scrollHero());
    for (s = 0; s < App.metro.tv.length; s++) {
        var o = App.metro.tv[s];
        r = App.util.createCoverIcons({id: o.channel_id, type: "channel", icons: ["purchase"]});
        t.push({
            html: '<img src="' + App.settings.server_location.channel_location + '/images/channels/' + o.channel_image + '" />' + r,
            data: {"data-id": o.channel_id, "data-page": "Channel", "data-fn": "init"}
        })
    }
    this.makeZone({
        items: t,
        selector: ".channels",
        selection: "zone"
    }), $(".movies-holder img, .series-holder img, .channels-holder img").waitForImages(function () {
        App.showPage()
    }), 0 === App.metro.news.length ? $(".news-holder").remove() : (this.indexNews = 0, this.timerNews = null, this.scrollNews())
}, App.Home.getRandomMetroItems = function () {
    for (var e = [], t = 0; t < App.metro.movies.length; t++) e.push({
        page: "VODDetail",
        id: App.metro.movies[t].id,
        name: App.metro.movies[t].name,
        description: App.metro.movies[t].description,
        backdrop: App.settings.server_location.movie_location + '/images/movies/'+ App.metro.movies[t].backdrop
    });
    for (t = 0; t < App.metro.series.length; t++) e.push({
        page: "SeriesDetail",
        id: App.metro.series[t].vod_id,
        name: App.metro.series[t].name,
        description: App.metro.series[t].description,
        backdrop: App.settings.server_location.serie_location + '/images/series/' + App.metro.series[t].backdrop
    });
    for (t = 0; t < 7 && t < e.length;) {
        for (var s = !1, a = App.random(0, e.length - 1), i = 0; i < this.pool.length; i++) if (this.pool[i].page === e[a].page && this.pool[i].id === e[a].id) {
            s = !0;
            break
        }
        s || (this.pool.push(e[a]), t++)
    }
}, App.Home.scrollHero = function (e) {
    if (e) {
        if (0 === this.indexHero) return !1;
        this.indexHero = 0 < this.indexHero ? this.indexHero - 1 : this.totalHero - 1
    } else {
        if (this.indexHero === this.totalHero - 1) return !1;
        this.indexHero = this.indexHero < this.totalHero - 1 ? this.indexHero + 1 : 0
    }
    $(".metro .item").removeClass("last-active").addClass("no-mouse-selection"), $('.metro .item[data-index="' + this.indexHero + '"]').addClass("last-active").removeClass("no-mouse-selection"), this.object = $('.metro .item[data-index="' + this.indexHero + '"]'), this.select();
    var a = [];
    return $(".metro .item").each(function () {
        a.push($(this).attr("data-rotate"))
    }), a.rotate(void 0 === typeof e || !e), $(".metro .item").each(function (e) {
        var t = $(".metro").height(), s = JSON.parse(GWareBase64.decode(a[e]));
        $(this).attr("data-rotate", a[e]).css({"z-index": s.z, left: s.l, "margin-top": s.m, height: t - s.h})
    }), App.LS.setupZones(), !0
}, App.Home.scrollNews = function () {
    var e = App.metro.news[this.indexNews];
    $(".news-holder .date").html((new Date).niceDate()), $(".news-holder .image").css("background-image", "url(" + window.location.protocol + App.settings.url.image + e.image + ")"), $(".news-holder .text").html(e.description.limit(256)), this.indexNews = this.indexNews < App.metro.news.length - 1 ? this.indexNews + 1 : 0, this.timerNews = window.setTimeout(this.scrollNews.bind(this), 1e4), this.checkImages($(".news-holder"))
}, App.Home.unload = function () {
    window.clearTimeout(this.timerNews), window.clearInterval(this.loadImageInterval)
}, App.HomePLAYER = GWareIPTV.UIBase.HomePLAYER, App.HomeTV = GWareIPTV.UIBase.HomeTV, App.HomeVOD = GWareIPTV.UIBase.HomeVOD, App.Offline = GWareIPTV.UIBase.Offline, App.Search = GWareIPTV.UIBase.Search, App.Search.onLoad = function (e) {
    this.lastSearch = "", this.resetPageLayout(e);
    var t = parseInt($(".search-results-holder").height(), 10), s = [{
        html: '<input type="text" placeholder="' + _("Search") + '" />',
        data: {"data-fn": "keyboardShow"},
        cls: "item",
        wrap: !1,
        style: {width: "180px", height: "40px"}
    }, {
        html: '<span class="ico ico-check-box"></span>' + _("Movies"),
        data: {"data-fn": "mark", "data-type": "movies"}
    }, {
        html: '<span class="ico ico-check-box"></span>' + _("TV channels"),
        data: {"data-fn": "mark", "data-type": "channels"}
    }, {
        html: '<span class="ico ico-check-box"></span>' + _("Series"),
        data: {"data-fn": "mark", "data-type": "series"}
    }, {
        html: '<span class="ico ico-check-box"></span>' + _("Music albums"),
        data: {"data-fn": "mark", "data-type": "music"}
    }];
    this.makeZone({
        rows: [s],
        selector: ".tools",
        selection: "zone"
    }), this.select($(".tools .row .item:first")), this.enableMenu("Search"), $(".main").css("background-color", "rgba(0, 0, 0, 0.4)"), $(".tools input").on("keyup input focus", this.reload.bind(this)), $(".sr-row.l").css("height", .5 * t), $(".sr-row.m").css("height", .4 * t), $(".sr-row.s").css("height", .33 * t), $(".sr-row.xs").css("height", .3 * t), App.reports.set({type: 23})
}, App.Search.searchMovies = function (t) {
    var s = [], a = [];
    return App.user.package.movie.forEach(function (e) {
        e.categories.forEach(function (e) {
            e.movies.forEach(function (e) {
                if (a.hasValue(e.id)) return !1;
                this.findInFields(t, [e.name, e.actors, e.year, e.tags.join(",")]) && (s.push({
                    html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '" /><div>' + e.name + "</div>",
                    data: {"data-id": e.id, "data-fn": "init", "data-page": "VODDetail"},
                    style: {width: "160px"}
                }), a.push(e.id))
            }.bind(this))
        }.bind(this))
    }.bind(this)), s
}, App.Search.searchSeries = function (e) {
    for (var t = [], s = null, a = {}, i = App.user.package.serie.length, n = 0; n < i; n++) for (var r = App.user.package.serie[n].series, o = 0; o < r.length; o++) a = (s = r[o]).seasons.length ? s.seasons[0] : {
        actors: "",
        year: "",
        tags: []
    }, this.findInFields(e, [s.name, a.actors, a.year, a.tags.join(",")]) && t.push({
        html: '<img src="' + s.logo + '" /><div>' + s.name + "</div>",
        data: {
            "data-id": s.id,
            "data-fn": 0 < s.seasons.length ? "init" : "warn",
            "data-page": 0 < s.seasons.length ? "SeriesDetail" : "SeriesBrowse"
        },
        style: {width: "320px"}
    });
    return t
}, App.Search.searchMusic = function (t) {
    var s = [], a = [];
    return App.user.package.music.forEach(function (e) {
        e.albums.forEach(function (e) {
            if (a.hasValue(e.id)) return !1;
            this.findInFields(t, [e.name, e.artist]) && (s.push({
                html: '<img src="' + e.poster + '" /><div>' + e.name + "</div>",
                data: {"data-id": e.id, "data-fn": "init", "data-page": "Album"},
                style: {width: "160px"}
            }), a.push(e.id))
        }.bind(this))
    }.bind(this)), s
}, App.User = GWareIPTV.UIBase.User, App.Album = GWareIPTV.UIBase.Album, App.Album.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "menu",
        scroller: {width: "auto", height: "100%"},
        align: "center"
    })
}, App.Music = GWareIPTV.UIBase.Music, App.Music.renderMenu = function (e) {
    this.makeZone({
        rows: e.matrix("horizontal"),
        selector: ".sub-menu",
        selection: "sub-menu",
        scroller: {width: "auto", height: "100%"},
        align: "center"
    })
}, GWareIPTV.UIBase.Music.renderCategory = function (e) {
    this.makeZone({
        rows: e,
        selector: ".movies",
        selection: "zone",
        stretchImages: !0,
        scroller: {width: "auto", height: "100%"}
    })
}, App.Advertisement = GWareIPTV.UIBase.Advertisement, App.SeriesBrowse = GWareIPTV.UIBase.SeriesBrowse, App.SeriesBrowse.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getSeries(420);
    if (!t.length) return !1;
    this.makeZone({
        rows: t,
        selector: ".stores",
        selection: "zone",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        pager: {type: "rows", count: GWareConfig.zoneItemCount},
        align: "center"
    })
}, App.SeriesBrowse.getSeries = function (e) {
    this.movieIds = [];
    var t = App.util.getSeriesStore(this.item.id), a = this.getOptimalItemSize({selector: ".stores", type: "store"}),
        i = 0, n = [];
    return t.series.forEach(function (e, t) {
        var s = App.history.hasWatchedSeries(e.id) ? '<div class="watched"><span class="ico ico-done"></span></div>' : "";
        n[i] || (n[i] = []), n[i].push({
            html: '<img src="' + e.logo + '" />' + s,
            data: {
                "data-id": e.id,
                "data-store-id": this.item.id,
                "data-fn": 0 < e.seasons.length ? "init" : "warn",
                "data-page": 0 < e.seasons.length ? "SeriesDetail" : "SeriesBrowse"
            }
        }), n[i].length === a.total && i++
    }.bind(this)), n.length || $(".main").html('<p class="empty">' + _("There are no series") + "</p>"), this.enableMenu("SeriesBrowse"), App.reports.set({type: 14}), n
}, App.SeriesDetail = GWareIPTV.UIBase.SeriesDetail, App.SeriesDetail.onLoad = function (e) {
    this.playerPages.hasValue("SeriesDetail") || this.playerPages.push("SeriesDetail"), this.resetPageLayout(e);
    var t = this.getSeasonMenu();
    if (!t.length) return !1;
    this.makeZone({
        rows: [t],
        selector: ".sub-menu",
        selection: "sub-menu",
        align: "center"
    }), this.select($(".sub-menu .item:nth-child(2)")), this.loadSeason(this.object.data())
}, App.SeriesDetail.loadSeason = function (e) {
    var t = this.getEpisodes(e.index);
    this.makeZone({rows: t, selector: ".playlist", selection: "zone", scroller: {width: "100%", height: "auto"}})
}, App.SeriesPlayer = GWareIPTV.UIBase.SeriesPlayer, App.SeriesPlayer.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "menu",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    })
}, App.SeriesStore = GWareIPTV.UIBase.SeriesStore, App.SeriesStore.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getStores(420);
    t.length ? this.makeZone({
        rows: t,
        selector: ".stores",
        selection: "zone",
        stretchImages: !0,
        align: "center",
        scroller: {width: "auto", height: "auto"}
    }) : $(".main").html('<div><p class="empty">' + _("There are no series stores") + "</p></div>"), this.fnBack = App.pageDefault.page, this.enableMenu("Series")
}, App.SettingsAbout = GWareIPTV.UIBase.SettingsAbout, App.SettingsAbout.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        type: "vertical"
    }), App.userSettings.renderOptions({selection: "zone", section: "about", brand: ".title"})
}, App.SettingsCatchupTV = GWareIPTV.UIBase.SettingsCatchupTV, App.SettingsCatchupTV.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        type: "vertical"
    }), App.userSettings.renderOptions({selection: "zone", section: "catchup", brand: ".title"})
}, App.SettingsDisclaimer = GWareIPTV.UIBase.SettingsDisclaimer, App.SettingsGeneral = GWareIPTV.UIBase.SettingsGeneral, App.SettingsGeneral.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        type: "vertical"
    }), App.userSettings.renderOptions({selection: "zone", section: "general", brand: ".title"})
}, App.SettingsLanguages = GWareIPTV.UIBase.SettingsLanguages, App.SettingsLanguages.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        type: "vertical"
    }), App.userSettings.renderOptions({selection: "zone", section: "languages", brand: ".title"})
}, App.SettingsScreenSaver = GWareIPTV.UIBase.SettingsScreenSaver, App.SettingsScreenSaver.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        type: "vertical"
    }), App.userSettings.renderOptions({selection: "zone", section: "screensaver", brand: ".title"})
}, App.SettingsSpeedTest = GWareIPTV.UIBase.SettingsSpeedTest, App.SettingsSpeedTest.render = function () {
    App.userSettings.renderMenu({selection: "zone", type: "vertical"}), this.makeZone({
        rows: [{
            html: _("Start test"),
            data: {"data-fn": "start"},
            style: {width: $(".controls").width() - 40 + "px"}
        }].matrix("horizontal"), selector: ".controls", selection: "zone"
    }), this.select($(".controls .row:first .item:first"))
}, App.SettingsSupport = GWareIPTV.UIBase.SettingsSupport, App.SettingsSupport.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        type: "vertical"
    }), App.userSettings.renderOptions({section: "support", brand: ".title", selection: "zone"})
}, App.CatchUpHome = GWareIPTV.UIBase.CatchUpHome, App.CatchUp = GWareIPTV.UIBase.CatchUp, App.CatchUp.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.timerError = null, this.pausedTS = null, this.programme = {
        start_p: 0,
        end_p: 0
    }, this.makeZone({
        rows: [[{html: "&nbsp;", style: {width: window.innerWidth, height: window.innerHeight}}]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind", !0),
            keyRight: this.preselect.bind(this, "forward", !0),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-skip-previous"></span>',
            data: {"data-fn": "skipPrev"}
        }, {
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {
            html: '<span class="ico ico-fast-forward"></span>',
            data: {"data-fn": "forward"}
        }, {html: '<span class="ico ico-skip-next"></span>', data: {"data-fn": "skipNext"}}]],
        selector: ".sub-menu",
        selection: "menu",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), this.item.ts || (this.item.ts = this.item.start), this.channel = App.util.getChannelData(this.item.id), this.skipInterval = 60, this.reload(!0);
    var t = App.epg.getProgrammeByTime(this.channel.id);
    this.programme.start_p = t.ut_start, this.programme.end_p = t.ut_end, this.item.report || (lg("catchup > start report action as catchup"), App.reports.set({
        type: this.item.report_action ? this.item.report_action : 5,
        name: this.channel.name,
        id: this.channel.id,
        epg: t.name
    })), App.player.setup({
        url: this.url, secure: this.channel.secure, events: {
            complete: function () {
            }, time: function (e) {
                30 < e.position && !this.reportSent && (this.report($(".panel-middle .title").text()), this.reportSent = !0)
            }.bind(this), play: function () {
                this.timerError && window.clearTimeout(this.timerError)
            }.bind(this), error: function (e) {
                lg("catchup > error event fired", "error"), lg(e)
            }.bind(this), ready: function () {
                App.player.play(), this.isPaused = !1, this.preselect("play"), App.timer({key: "catchup-playback"})
            }.bind(this)
        }
    }), this.timeline(), this.timerTimeline = window.setInterval(this.timeline.bind(this), 500), this.fnBack = "TV"
}, App.FavoriteManager = GWareIPTV.UIBase.FavoriteManager, App.FavoriteManager.onLoad = function (e) {
    $(".main").css("background-color", "#313131"), this.resetPageLayout(e), this.selected = {left: [], right: []};
    for (var t = App.user.package.tv.group.length, s = null, a = [], i = 0; i < t; i++) s = App.user.package.tv.group[i], a.push({
        html: s.name,
        data: {"data-fn-select": "loadChannels", "data-id": s.id},
        style: {width: "150px"}
    });
    this.makeZone({
        rows: [a],
        selector: ".groups",
        selection: "zone",
        scroller: {width: "auto", height: "100%"}
    }), this.select($(".groups .item:first-child")), this.renderFavorites(), this.registerEvents(), this.fnBack = "TV", this.enableMenu("TV"), App.reports.set({type: 3})
}, App.FavoriteManager.renderFavorites = function () {
    for (var e = [], t = App.favorites.favorites, s = 0; s < t.length; s++) {
        var a = App.util.getChannelData(t[s].id),
            i = this.isSelected(a.id, t[s].position) ? "ico-check-box" : "ico-check-box-outline-blank";
        a && e.push([{
            html: '<span class="ico ' + i + '"></span><span class="number">' + a.number + '</span><span class="image"><img src="' + a.logo.small + '" /></span><span>' + a.name + "</span>",
            data: {"data-fn": "markChannel", "data-type": "right", "data-position": t[s].position, "data-id": a.id}
        }])
    }
    e.sort(function (e, t) {
        return (e = parseInt(e[0].data["data-position"], 10)) < (t = parseInt(t[0].data["data-position"], 10)) ? -1 : 1
    }), e.length ? (this.makeZone({
        rows: e,
        selector: ".favorites",
        selection: "zone",
        scroller: {width: "100%", height: "auto"}
    }), this.selected.right.length ? (this.object = $('.favorites .item[data-id="' + this.selected.right[0].id + '"]'), this.scroll(this.object)) : this.object = $(".favorites .item:first"), this.select()) : $(".favorites").html('<p class="empty" style="padding-top:40px">' + _("There are no favorite channels") + "</p>")
}, App.FavoriteManager.loadChannels = function (e) {
    var t = e.id, s = [];
    this.clearSelection("left"), $(".groups .item").removeClass("selected"), $('.groups .item[data-id="' + t + '"]').addClass("selected"), App.user.package.tv.list.forEach(function (e) {
        App.util.channelIsInGroup(e.id, t) && s.push([{
            html: '<span class="ico ico-check-box-outline-blank"></span><span class="number">' + e.number + '</span><span class="image"><img src="' + e.logo.small + '" /></span><span>' + e.name + "</span>",
            data: {"data-fn": "markChannel", "data-type": "left", "data-position": e.number, "data-id": e.id}
        }])
    }), s.sort(function (e, t) {
        return (e = parseInt(e[0].data["data-position"], 10)) < (t = parseInt(t[0].data["data-position"], 10)) ? -1 : 1
    }), s.length ? this.makeZone({
        rows: s,
        selector: ".channels",
        selection: "zone",
        scroller: {width: "100%", height: "auto"}
    }) : $(".channels").html('<p class="empty">' + _("There are no channels in this category") + "</p>")
}, App.Recording = GWareIPTV.UIBase.Recording, App.Recording.renderZone = function (e) {
    this.makeZone({rows: e, selector: ".recordings", selection: "zone", scroller: {width: "auto", height: "auto"}})
}, App.Recording.build = function (e) {
    for (var t = !1, s = $(".recordings-holder").width() / 2 - 30, a = ($(".recordings-holder").outerHeight() - 10) / 4.3, i = [[], [], [], []], n = (new Date).getTime() / 1e3, r = 0, o = 0; o < e.length; o++) if (!e[o].deleted && (e[o].ut_end && parseInt(e[o].ut_end) < n || !e[o].ut_end)) {
        var l = this.getData(e[o]);
        i[r].push({
            html: '<img src="' + l.image + '" /><div class="content"><div class="prog">' + decodeURI(l.prog) + '</div><div class="channel">' + l.channel + '</div><div class="date">' + l.date + "</div></div>",
            data: {
                "data-dir": l.dir,
                "data-name": l.name,
                "data-title": l.channel + " - " + l.prog,
                "data-url": l.url,
                "data-pvr-id": l.pvr_id,
                "data-back": "Recording"
            },
            style: {width: s, height: a}
        }), r = r < 3 ? r + 1 : 0, t = !0
    }
    if (t) return this.renderZone(i), !1;
    lg("recordings > no recordings found"), $(".recordings").html('<p class="empty">' + _("There are no recordings") + "</p>"), App.LS.setupZones()
}, App.RecordingPlayer = GWareIPTV.UIBase.RecordingPlayer, App.RecordingPlayer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {keyLeft: this.preselect.bind(this, "rewind"), keyRight: this.preselect.bind(this, "forward")}
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "menu",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), App.reports.set({
        type: 6,
        name: this.item.title
    }), $(".movie-header .title").html(this.item.title), this.start(), this.fnBack = this.item.back ? this.item.back : "Recording", this.enableMenu()
}, App.Channel = GWareIPTV.UIBase.Channel, App.Channel.buildChannelList = function () {
    this.makeZone({
        rows: this.loadCategories().matrix("vertical"),
        selector: ".categories",
        selection: "zone",
        layer: "channel-list",
        events: {keyBack: this.listHide.bind(this)}
    })
}, App.Channel.loadChannels = function (e) {
    var t = this.buildChannelsForCategory(e);
    if (!t.length) return $(".chl").html('<p class="empty">' + _("There are no channels in this category") + "</p>"), !1;
    this.makeZone({
        rows: t.matrix("horizontal"),
        selector: ".chl",
        selection: "zone",
        layer: "channel-list",
        events: {keyBack: this.listHide.bind(this)}
    }), this.preselectRunningChannel && this.select($('.chl .item[data-id="' + this.channel.id + '"]')), this.preselectRunningChannel = !1
}, App.TV = GWareIPTV.UIBase.TV, App.TV.onLoad = function (e) {
    this.resetPageLayout(e), this.groupId = null, this.makeZone({
        rows: this.loadCategories(),
        selector: ".category-menu",
        selection: "sub-menu"
    }), this.select($('.category-menu .item[data-id="-1"]')), this.enableMenu("TV"), App.reports.set({type: 2})
}, App.TV.listChannels = function (e) {
    var t = this.getChannels(e.id, {
        tile: Math.floor($(".channels").width() / 120),
        list: Math.floor($(".channels").width() / 300)
    });
    if (!t.length) return this.destroyZone($(".channels").attr("id")), $(".channels").html('<p class="empty">' + _("There are no channels in this category") + "</p>"), !1;
    this.makeZone({
        rows: t,
        selector: ".channels",
        selection: "zone",
        scroller: {width: "auto", height: "auto"},
        align: "center",
        pager: {type: "rows", count: GWareConfig.zoneItemCount}
    })
}, App.VODBrowse = GWareIPTV.UIBase.VODBrowse, App.VODBrowse.onLoad = function (e) {
    this.item ? (this.lastId = this.item.id, this.back = this.item.back, this.storeId = this.item.id) : this.storeId = this.lastId, this.store = App.util.getVODStore(this.storeId), this.resetPageLayout(e);
    var s = [{html: _("Back"), data: {"data-fn": "btnBack"}}, {
        html: _("Search"),
        data: {"data-fn": "searchPanelShow"}
    }];
    this.store.categories.forEach(function (e, t) {
        s.push({html: e.name, data: {"data-index": t, "data-fn": "loadCategory"}})
    }), this.makeZone({
        items: s,
        selector: ".sub-menu",
        selection: "sub-menu"
    }), this.select($('.sub-menu .item[data-index="0"]')), this.enableMenu("VOD"), this.fnBack = this.back, this.loadCategory(this.object.data())
}, App.VODBrowse.loadCategory = function (e) {
    var t = [[], []], s = 0;
    $(".sub-menu .item").each(function () {
        $(this).removeClass("selected")
    }), $('.sub-menu .item[data-index="' + e.index + '"]').addClass("selected"), this.movieIds = [];
    for (var a = 0; a < this.store.categories[e.index].movies.length; a++) {
        var i = this.store.categories[e.index].movies[a],
            n = App.util.createCoverIcons({id: i.id, type: "movie", icons: ["purchase", "watch"]});
        App.VODBrowse.movieIds.push(i.id), t[s].push({
            html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + i.poster + '" />' + n,
            data: {"data-id": i.id, "data-fn": "init", "data-page": "VODDetail"}
        }), s = 0 === s ? 1 : 0
    }
    if (!this.movieIds.length) return $(".movies").html('<p class="empty">' + _("This category is empty") + "</p>"), !1;
    this.makeZone({
        rows: t,
        selector: ".movies",
        selection: "zone",
        scroller: {width: "auto", height: "100%"},
        pager: {type: "cols", count: GWareConfig.zoneItemCount}
    }), App.reports.set({type: 10, name: this.store.categories[e.index].name, id: this.store.categories[e.index].id})
}, App.VODDetail = GWareIPTV.UIBase.VODDetail, App.VODDetail.loadAfter = function () {
    null !== this.movie.backdrop && $(".detail").css({
        "background-image": 'url("' + App.settings.server_location.movie_location + '/images/movies/' + this.movie.backdrop + '")',
        "background-repeat": "no-repeat",
        "background-size": "cover"
    }), this.makeZone({
        rows: [[{html: _("Previous"), data: {"data-fn": "prev"}}, {
            html: _("Back"),
            data: {"data-fn": "btnBack"}
        }, {
            html: _("Watch Trailer"),
            data: {
                "data-fn": "init",
                "data-page": "VODTrailer",
                "data-name": this.movie.name,
                "data-length": this.movie.length,
                "data-url": this.movie.trailer_url
            }
        }, {
            html: _("Watch Movie"),
            data: {"data-fn": "ppvValidate", "data-ppv": this.ppv, "data-next": this.ppvNext}
        }, {
            html: '<span class="ico ico-share"></span> ' + _("Social Share"),
            data: {"data-fn": "fbShare", "data-title": this.movie.name, "data-type": "movie", "data-id": this.movie.id}
        }, {html: _("Next"), data: {"data-fn": "next"}}]], selector: ".sub-menu", selection: "sub-menu", align: "center"
    })
}, App.VODDetail.getDescription = function (e) {
    for (var t = 0; t < e.length; t++) if (e[t].language === App.language.current) return e[t].description.limit(256);
    return e.length ? e[0].description.limit(256) : ""
}, App.VODDetail.unload = function () {
    $(".main").css("background-image", "none")
}, App.VOD = GWareIPTV.UIBase.VOD, App.VOD.onLoad = function (e) {
    this.resetPageLayout(e);
    var s = 0, a = 0, i = Math.floor($(".vod").width() / 413.3333), n = [];
    App.user.package.movie.forEach(function (e) {
        if (e.isMain) {
            var t = null;
            t = 0 === e.categories.length && 0 === e.subs.length ? {"data-fn": "warn"} : {
                "data-id": e.id,
                "data-fn": "init",
                "data-back": "VOD",
                "data-page": 0 === e.subs.length ? "VODBrowse" : "VODSub"
            }, n[a] || (n[a] = []), n[a].push({
                html: '<img src="' + e.logo + '" />',
                data: t
            }), s++, 0 === Math.fmod(s, i) && a++
        }
    }), n.length ? this.makeZone({
        rows: n,
        selector: ".stores",
        selection: "zone",
        stretchImages: !0,
        align: "center",
        scroller: {width: "auto", height: "auto"}
    }) : $(".main").html('<div><p class="empty">' + _("There are no movie stores") + "</p></div>"), this.fnBack = App.pageDefault.page, this.enableMenu("VOD")
}, App.VODMovie = GWareIPTV.UIBase.VODMovie, App.VODMovie.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "menu",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    })
}, App.VODSub = GWareIPTV.UIBase.VODSub, App.VODSub.render = function (e) {
    this.makeZone({
        rows: e,
        selector: ".stores",
        selection: "zone",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        align: "center"
    }), this.makeZone({
        items: [{html: _("Back"), data: {"data-fn": "btnBack"}}],
        selector: ".sub-menu",
        selection: "zone"
    })
}, App.VODTrailer = GWareIPTV.UIBase.VODTrailer, App.VODTrailer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind"),
            keyRight: this.preselect.bind(this, "forward"),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "menu",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), $(".movie-header .title").html(this.item.name), App.player.setup({
        url: this.item.url,
        events: {
            complete: function () {
                this.pageLoader(this.fnBack)
            }.bind(this), time: function (e) {
                $(".progress-holder .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function () {
                pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), this.fnBack = "VODDetail", App.reports.set({type: 12, name: this.item.name})
},App.Youtube = GWareIPTV.UIBase.Youtube,App.Youtube.loaded = function () {
    var e = null, t = [];
    this.resetPageLayout(this.html), t.push({html: _("Search"), data: {"data-fn": "searchPanelShow"}});
    for (var s = 0; s < this.categories.length; s++) "Music" !== (e = this.categories[s]).name && t.push({
        html: e.name,
        data: {"data-id": e.id, "data-channel-id": e.channelId, "data-name": e.name, "data-fn": "loadCategory"}
    });
    this.makeZone({
        items: t,
        selector: ".sub-menu",
        selection: "sub-menu",
        align: "center"
    }), App.reports.set({type: 19}), this.fnBack = App.pageDefault.page, this.enableMenu("Youtube"), this.select($(".sub-menu .item:nth-child(2)")), this.loadCategory(this.object.data())
},GWareIPTV.UIBase.Youtube.loadCategory = function (e) {
    var o = this;
    $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-id="' + e.id + '"]').addClass("selected"), this.loading($(".clips")), this.videos = [], xhr({
        url: "https://www.googleapis.com/youtube/v3/videos?part=snippet&maxResults=50&chart=mostPopular&videoCategoryId=" + e.id + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var a = [[], [], [], []], i = $(".clips").width() / 2 - 30, n = ($(".clips").outerHeight() - 5) / 4.15,
                r = 0;
            e.items.forEach(function (e, t) {
                var s = "";
                e.snippet.thumbnails && (s = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url), o.videos.push({
                    id: e.id,
                    image: s,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), a[r].push({
                    html: '<div class="image-holder" style="background-image: url(' + s + ')"></div><div class="content"><div class="title">' + e.snippet.title + '</div><div class="description">' + e.snippet.description.limit(256) + "</div></div>",
                    data: {
                        "data-index": t,
                        "data-fn": "init",
                        "data-title": e.snippet.title,
                        "data-desc": encodeURIComponent(e.snippet.description),
                        "data-back": "Youtube",
                        "data-page": "YoutubePlayer"
                    },
                    style: {height: n + "px", width: i + "px"}
                }), r = r < 3 ? r + 1 : 0
            }), o.makeZone({
                rows: a,
                selector: ".clips",
                selection: "",
                scroller: {width: "auto", height: "auto"},
                chunkSize: 64
            }), o.object = $(".clips .scroller .row:nth-child(1) .item:nth-child(1)"), o.select()
        },
        error: function () {
            o.notification("An error occured, please try again later")
        }
    })
},App.Youtube.searchPanelGo = function () {
    var n = this, e = $('input[name="term"]').val().toLowerCase();
    "" !== e && ($(".clips").html('<div class="spinner-holder"><span class="text">Loading</span><div class="loader"></div></div>'), this.videos = [], xhr({
        url: "https:///www.googleapis.com/youtube/v3/search?part=snippet&maxResults=50&q=" + e + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var a = [[], [], [], []], i = 0;
            n.searchPanelHide(), e.items.forEach(function (e, t) {
                var s = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url;
                n.videos.push({
                    id: e.id.videoId,
                    image: s,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), a[i].push({
                    html: '<div class="image-holder" style="background-image: url(' + s + ')"></div><div class="content"><div class="title">' + e.snippet.title + '</div><div class="description">' + e.snippet.description.limit(256) + "</div></div>",
                    data: {"data-index": t, "data-fn": "init", "data-page": "YoutubePlayer", "data-back": "Youtube"},
                    style: {
                        height: ($(".clips").outerHeight() - 5) / 4.15 + "px",
                        width: $(".clips").width() / 2 - 30 + "px"
                    }
                }), i = i < 3 ? i + 1 : 0
            }), n.makeZone({rows: a, selector: ".clips", selection: "bg", scroller: {width: "auto", height: "auto"}})
        }
    }))
},App.YoutubePlayer = GWareIPTV.UIBase.YoutubePlayer,App.YoutubePlayer.reload = function () {
    var e = App.baseURL.youtube + "?videoid=" + this.videos[this.index].id,
        t = this.index < this.videos.length - 1 ? this.index + 1 : 0,
        s = 0 < this.index ? this.index - 1 : this.videos.length - 1;
    App.reports.set({type: 18, name: this.videos[this.index].title}), App.player.setup({
        url: e,
        events: {
            complete: function () {
                this.next()
            }.bind(this), time: function (e) {
                $(".info .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function (e) {
                lg(e), pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), "left" === this.lastSwipe && ($(".panel-left, .panel-middle").remove(), $(".panel-right").addClass("panel-middle").removeClass("panel-right").css("left", "0")), "right" === this.lastSwipe && ($(".panel-right, .panel-middle").remove(), $(".panel-left").addClass("panel-middle").removeClass("panel-left").css("left", "0")), $(".info").prepend(this.clonePanel("left")).append(this.clonePanel("right")), $(".panel-left").attr("data-index", s), $(".panel-right").attr("data-index", t), $(".panel-middle").attr("data-index", this.index), $(".panel-left .sub-menu, .panel-right .sub-menu").html(""), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".panel-middle .sub-menu",
        selection: "menu",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), this.infoUpdate(), this.preselect("play")
};
//# sourceMappingURL=10-kheer.min.js.map