GWareIPTV.UIPrototype.prototype.updateTime = function () {
    $(".header-right .time").html((new Date).niceTime()), $(".header-right .date").html((new Date).longDate())
}, GWareIPTV.UIPrototype.prototype.updateWeather = function (e, t, a) {
    if (lg("weather > data arrived"), App.settings.access.feature.weather) {
        var s = (new Date).getHours(), i = s < 6 || 21 < s ? "night" : "day";
        $(".weather .city").html(t), $(".weather .degree").html(e.temp_C + " &deg;C / " + e.temp_F + " &deg;F"), $(".weather .icon").html('<img src="artwork/weather/' + i + "/" + e.weatherCode + '.png" />')
    }
}, GWareIPTV.UIPrototype.prototype.resetPageLayout = function (e, t) {
    lg("ui controller > resetting page layout [onLoad]"), $(".header, .footer").css("display", t ? "none" : "block"), $(".main").css("height", t || "mobile" === App.user.device.category ? window.innerHeight : window.innerHeight - 130), e && $(".main").html(e), this.isPlayerPage = this.playerPages.hasValue(this.name), this.setupHoverMenu(t)
}, GWareIPTV.UIPrototype.prototype.setupFrame = function () {
    this.setupMenuFrame({
        selection: "bg",
        width: "auto",
        height: "100%",
        vertical: !1,
        type: "text",
        preType: "icon",
        perRow: !1
    })
}, GWareIPTV.UIPrototype.prototype.loadCustomStyles = function () {
    var e = App.hex2rgb(App.settings.style.highlight.primary),
        t = [{selector: "body", style: {"font-size": App.getFontSize()}}, {
            selector: ".item.selected",
            style: {"background-color": App.settings.style.highlight.secondary}
        }, {
            selector: ".selection.selection-bg",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".selection.selection-border",
            style: {"border-color": App.settings.style.highlight.primary}
        }, {
            selector: ".bg-border.hot-zone .scroller .row .item.active",
            style: {
                "background-color": App.settings.style.highlight.primary,
                "border-color": App.settings.style.highlight.primary
            }
        }, {
            selector: ".epg .programmes .timeline",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".metro-news-date",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".hover-menu .btn",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".progress .bar",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".ad-placeholder",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .line",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .cursor",
            style: {"border-bottom": "10px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .tick",
            style: {"border-left": "3px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".progress .handle",
            style: {"background-color": "rgba(" + e.r + ", " + e.g + ", " + e.b + ", 0.5)"}
        }, {selector: ".progress .handle .dot", style: {"background-color": App.settings.style.highlight.primary}}];
    App.injectStyle(t)
}, Date.prototype.longDate = function () {
    var e = "", t = this.getDate(), a = "", s = (this.getMonth() + 1).toString();
    switch (t < 10 && (t = "0" + t), parseInt(s) < 10 && (s = "0" + s), this.getDay()) {
        case 0:
            a = "Sunday";
            break;
        case 1:
            a = "Monday";
            break;
        case 2:
            a = "Tuesday";
            break;
        case 3:
            a = "Wednesday";
            break;
        case 4:
            a = "Thursday";
            break;
        case 5:
            a = "Friday";
            break;
        case 6:
            a = "Saturday"
    }
    switch (s) {
        case"01":
            e = "January";
            break;
        case"02":
            e = "February";
            break;
        case"03":
            e = "March";
            break;
        case"04":
            e = "April";
            break;
        case"05":
            e = "May";
            break;
        case"06":
            e = "June";
            break;
        case"07":
            e = "July";
            break;
        case"08":
            e = "August";
            break;
        case"09":
            e = "September";
            break;
        case"10":
            e = "October";
            break;
        case"11":
            e = "November";
            break;
        case"12":
            e = "December"
    }
    return a + " " + e + " " + t
}, App.Apps = GWareIPTV.UIBase.Apps, App.EPGh = GWareIPTV.UIBase.EPGh, App.EPGh.loaded = function () {
    var e = 0, i = App.epg[App.epg.viewDate], r = null, t = 0, a = new Date(App.epg.viewDate), s = [], n = [], o = 0;
    for (var p in this.resetPageLayout(this.html), $(".header .date").html(App.epg.isToday(App.epg.viewDate)), a.setHours(0), a.setMinutes(0), a = Math.round(a.getTime() / 1e3), i) {
        n = [], (t = (r = i[p]).data.length) && n.push({
            html: '<div class="padding" style="width: ' + (r.data[0].ut_start - a) / 6 + 'px"></div>',
            wrap: !1
        });
        for (var l = 0; l < t; l++) {
            o = (r.data[l].ut_end - r.data[l].ut_start) / 6;
            var d = this.buildEPGData(r, r.data[l]);
            r.data[l].ut_end > e && (e = r.data[l].ut_end), n.push({
                html: 50 < o ? d.icon + '<span class="title">' + r.data[l].progname + "</span>" : "...",
                data: d.data,
                cls: o < 50 ? "prog tiny" : "prog",
                style: {width: o + "px"}
            })
        }
        s.push(n)
    }
    this.makeZone({
        rows: s,
        selector: ".epgh",
        selection: "bg",
        scroller: {width: "auto", height: "auto"},
        pager: {
            type: "rows", count: 10, onReload: function (e) {
                for (var t = "", a = e; a < e + 10; a++) if (App.user.package.tv.list[a]) {
                    var s = App.user.package.tv.list[a];
                    t += '<div class="ch"><img src="' + (r = i[s.number + "-" + s.id]).logo + '" />' + r.number + ". " + r.name + "</div>"
                }
                "" !== t && (document.querySelector(".channel-scroller").innerHTML = t, document.querySelector(".channel-scroller").style.top = "0px", App.epg.viewSelectRunning())
            }
        },
        scrollIntoView: !1,
        nudgeText: !0
    }), document.querySelector(".channels").style.overflowX = App.mobile ? "auto" : "hidden", document.querySelector(".hours").style.overflowX = App.mobile ? "auto" : "hidden", document.querySelector(".epgh .scroller").insertAdjacentHTML("afterbegin", '<div class="timeline"></div>'), this.makeHourScroller(a, e), App.epg.viewSelectRunning(), App.epg.isToday(App.epg.viewDate) && (this.updateTimeline(), window.setInterval(this.updateTimeline.bind(this), 6e4)), this.resetEvents(), this.enableMenu("startEPG"), this.setupDayControls()
}, App.EPGh.setupDayControls = function () {
    this.makeZone({
        items: [{
            html: _("-24 hours"),
            data: {"data-fn": "keyBlue"},
            cls: "epg-control"
        }, {html: _("+24 hours"), data: {"data-fn": "keyGreen"}, cls: "epg-control"}],
        selector: ".day-controls",
        selection: "bg"
    })
}, App.EPGh.keyBackBuffer = App.EPGh.keyBack, App.EPGh.showPreview = function (e) {
    this.object = $(".epgh .row .item.active"), App.LS.scrollIntoView();
    for (var t = this, a = App.epg.getProgrammeByTimestamp(e.id, e.start), s = this.checkProgDate(a), i = $('<div class="preview" />'), r = "", n = 0; n < a.channel.data.length; n++) r = a.ut_start === a.channel.data[n].ut_start && null !== a.channel.data[n].progimg ? '<img src="' + a.channel.data[n].progimg + '" />' : "";
    $(".preview").length && this.closePreview(), setTimeout(function () {
        i.css($(".epgh .selection-bg").offset()).html('<div class="details"><span class="name">' + a.name + '</span><span class="time">' + new Date(1e3 * a.ut_start).niceTime() + '</span><div class="description" style="white-space:normal;">' + r + a.description + '</div></div><div class="buttons nav" />'), $("body").append(i), s.push({
            html: "<button>" + _("Back") + "</button>",
            data: {"data-fn": "closePreview"},
            cls: "btn"
        }), t.makeZone({
            items: s,
            selector: ".preview .buttons",
            selection: "bg"
        }), t.disableZones(".buttons"), t.select($(".buttons .item:first-child"))
    }, 100), App.EPGh.keyBack = App.EPGh.closePreview
}, App.EPGh.checkProgDate = function (e) {
    var t = e.ut_start, a = e.ut_end, s = Math.round((new Date).getTime() / 1e3), i = {
        "data-title": e.name,
        "data-start": e.ut_start,
        "data-end": e.ut_end,
        "data-date": e.ut_start,
        "data-id": e.channel.id,
        "data-epg-id": e.epg_id
    }, r = [];
    if (a < s && (e.channel.archive || e.channel.dveo || e.channel.flussonic) && ($.extend(i, {
        "data-fn": "init",
        "data-page": "CatchUp"
    }), r.push({
        html: "<button>" + _("Play") + "</button>",
        data: i,
        cls: "btn"
    })), App.epg.isNow(t, a, s) && ($.extend(i, {
        "data-fn": "init",
        "data-page": "Channel"
    }), r.push({html: "<button>" + _("Play") + "</button>", data: i, cls: "btn"})), s < t) {
        var n = App.epg.hasReminder(e.channel.id, e.ut_start),
            o = App.epg.hasRecording(e.channel.id, e.ut_start, e.ut_end),
            p = n ? _("Clear reminder") : _("Set reminder"), l = o ? _("Clear recording") : _("Set recording");
        r.push({
            html: "<button>" + p + "</button>",
            data: {
                "data-fn": "handlePreviewBtn",
                "data-fn1": n ? "clearReminder" : "setReminder",
                "data-title": e.name,
                "data-date": e.ut_start,
                "data-repeat": !1,
                "data-channel-id": e.channel.id
            },
            cls: "btn"
        }), r.push({
            html: "<button>" + l + "</button>",
            data: {
                "data-fn": "handlePreviewBtn",
                "data-fn1": o ? "clearRecording" : "setRecording",
                "data-start": e.ut_start,
                "data-end": e.ut_end,
                "data-title": e.name,
                "data-id": e.channel.id
            },
            cls: "btn"
        })
    }
    return r
}, App.EPGh.handlePreviewBtn = function (e) {
    var t = App.EPGh;
    switch (t.objectPrevious = $(".epgh .row .item.was-active"), t[e.fn1](e), e.fn1) {
        case"setReminder":
            $(".epgh .row .item.was-active").prepend('<span class="custom-circle blue"></span>');
            break;
        case"clearReminder":
            $(".epgh .row .item.was-active").find(".custom-circle.blue").remove();
            break;
        case"setRecording":
            $(".epgh .row .item.was-active").prepend('<span class="custom-circle red"></span>');
            break;
        case"clearRecording":
            $(".epgh .row .item.was-active").find(".custom-circle.red").remove()
    }
    t.closePreview()
}, App.EPGh.closePreview = function () {
    $(".preview").length && ($(".preview").remove(), this.object = $(".epgh .item.was-active"), this.select(), this.enableZones(), App.LS.setupZones(), this.keyBack = this.keyBackBuffer)
}, App.EPGh.unload = function () {
    this.closePreview()
}, App.EPGv = GWareIPTV.UIBase.EPGv, App.EPGv.loaded = function () {
    var e = [], t = App.epg[App.epg.viewDate];
    for (var a in this.resetPageLayout(this.html), this.resetEvents(), this.enableMenu("startEPG"), t) e.push({
        html: '<img src="' + t[a].logo + '" />',
        data: {"data-id": a}
    });
    this.makeZone({
        items: e,
        selector: ".channels",
        selection: "border"
    }), this.object = App.epg.viewChannelId ? $('.channels .item[data-id="' + App.epg.viewChannelId + '"]') : $(".channels .item:first-child"), this.select(), $(".gv-left .span6.date").html(App.epg.isToday(App.epg.viewDate)), this.loadProgrammes(this.object.data())
}, App.HomeHOTEL = GWareIPTV.UIBase.HomeHOTEL, App.Home = GWareIPTV.UIBase.Home, App.Home.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home"), App.metro._fetch(this.renderMetro.bind(this)), this.fromPage = null
}, App.Home.renderMetro = function () {
    var s = [], i = [], a = [], e = App.history.getSeriesUnique();
    App.metro.movies.forEach(function (e, t) {
        var a = App.util.createCoverIcons({id: e.id, type: "movie", icons: ["purchase", "watch"]});
        0 === t ? s.push({
            html: '<img class="large" src="' + App.settings.server_location.movie_location + '/images/movies/' + e.backdrop + '" /><div class="title">' + e.name + "</div>" + a,
            data: {"data-id": e.id, "data-fn": "init", "data-page": "VODDetail"},
            style: {height: $(".movies-holder").height() + "px"}
        }) : s.push({
            html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/'+ e.poster + '" />' + a,
            data: {"data-id": e.id, "data-fn": "init", "data-page": "VODDetail"}
        })
    }), 0 < e.length ? e.forEach(function (e) {
        var t = App.util.getSerie(e.seriesId, e.storeId), a = App.Home.getEpisode(t, e.seasonId, e.episodeId);
        i.push({
            html: '<div class="img" style="background: url(' + t.seasons[0].backdrop + ');"></div><div class="details row-fluid"><div class="name span6">' + t.name + '</div><div class="title span6">' + a + '</div><div class="progress"><div class="bar" style="width: 0%"></div></div></div>',
            data: {"data-id": t.id, "data-fn": "init", "data-page": "SeriesDetail", "data-store-id": e.storeId}
        })
    }) : App.metro.series.forEach(function (e) {
        i.push({
            html: '<div class="img" style="background: url(' + App.settings.server_location.serie_location + '/images/series/' + e.backdrop + ');"></div><div class="details row-fluid"><div class="name span12">' + e.name + "</div></div>",
            data: {
                "data-id": e.vod_id,
                "data-fn": "init",
                "data-page": "SeriesDetail",
                "data-store-id": App.util.getStoreIdBySerieId(e.vod_id)
            }
        })
    }), App.metro.tv.forEach(function (e) {
        var t = App.util.createCoverIcons({id: e.channel_id, type: "channel", icons: ["purchase"]});
        a.push({
            html: '<img src="' + App.settings.server_location.channel_location + '/images/channels/' + e.channel_image + '" />' + t,
            data: {"data-id": e.channel_id, "data-fn": "init", "data-page": "Channel"}
        })
    }), this.makeZone({items: s, selector: ".movies", selection: "border"}), this.makeZone({
        items: i,
        selector: ".series",
        selection: "bg"
    }), this.makeZone({
        items: a,
        selector: ".channels",
        selection: "border"
    }), this.index = 0, this.timerNews = null, $(".movies-holder img, .series-holder img, .channels-holder img").waitForImages(function () {
        App.showPage()
    })
}, App.Home.unload = function () {
    window.clearTimeout(this.timerNews)
}, App.Home.getEpisode = function (e, t, a) {
    for (var s = 0; s < e.seasons.length; s++) if (e.seasons[s].id === t) for (var i = 0; i < e.seasons[s].episodes.length; i++) if (e.seasons[s].episodes[i].id === a) return e.seasons[s].episodes[i].name
}, App.HomePLAYER = GWareIPTV.UIBase.HomePLAYER, App.HomeTV = GWareIPTV.UIBase.HomeTV, App.HomeVOD = GWareIPTV.UIBase.HomeVOD, App.Offline = GWareIPTV.UIBase.Offline, App.Search = GWareIPTV.UIBase.Search, App.User = GWareIPTV.UIBase.User, App.Album = GWareIPTV.UIBase.Album, App.Music = GWareIPTV.UIBase.Music, App.Advertisement = GWareIPTV.UIBase.Advertisement, App.SeriesBrowse = GWareIPTV.UIBase.SeriesBrowse, App.SeriesDetail = GWareIPTV.UIBase.SeriesDetail, App.SeriesDetail.loadSeason = function (e) {
    var t = this.getEpisodes(e.index, !0);
    this.makeZone({rows: t, selector: ".playlist", selection: "bg", scroller: {width: "100%", height: "auto"}});
    var a = this.serie.seasons[e.index];
    null !== a.backdrop && $(".cover").html('<img src=" ' + a.backdrop + ' " />')
}, App.SeriesPlayer = GWareIPTV.UIBase.SeriesPlayer, App.SeriesStore = GWareIPTV.UIBase.SeriesStore, App.SettingsAbout = GWareIPTV.UIBase.SettingsAbout, App.SettingsCatchupTV = GWareIPTV.UIBase.SettingsCatchupTV, App.SettingsDisclaimer = GWareIPTV.UIBase.SettingsDisclaimer, App.SettingsGeneral = GWareIPTV.UIBase.SettingsGeneral, App.SettingsLanguages = GWareIPTV.UIBase.SettingsLanguages, App.SettingsScreenSaver = GWareIPTV.UIBase.SettingsScreenSaver, App.SettingsSpeedTest = GWareIPTV.UIBase.SettingsSpeedTest, App.SettingsSupport = GWareIPTV.UIBase.SettingsSupport, App.CatchUpHome = GWareIPTV.UIBase.CatchUpHome, App.CatchUp = GWareIPTV.UIBase.CatchUp, App.FavoriteManager = GWareIPTV.UIBase.FavoriteManager, App.Recording = GWareIPTV.UIBase.Recording, App.RecordingPlayer = GWareIPTV.UIBase.RecordingPlayer, App.Channel = GWareIPTV.UIBase.Channel, App.TV = GWareIPTV.UIBase.TV, App.TV.listChannels = function (e) {
    if (this.groupId === e.id) return lg("tv home > same group selected, skipping channel listing"), !1;
    lg("tv home > listing channels for group [" + e.id + "]"), this.groupId = e.id;
    var t = this.getChannels(e.id, {
        tile: Math.floor($(".channels").width() / 110),
        list: Math.floor($(".channels").width() / 290)
    });
    if (!t.length) return this.destroyZone($(".channels").attr("id")), $(".channels").html('<p class="empty">' + _("There are no channels in this category") + "</p>"), !1;
    this.makeZone({
        rows: t,
        selector: ".channels",
        selection: "tile" === this.settings.display ? "border" : "bg",
        align: "center",
        scroller: {width: "auto", height: "auto"},
        align: "center",
        pager: {type: "rows", count: GWareConfig.zoneItemCount}
    }), store.set("iptv.channel.group", this.groupId)
}, App.VODBrowse = GWareIPTV.UIBase.VODBrowse, App.VODDetail = GWareIPTV.UIBase.VODDetail, App.VODDetail.loadAfter = function () {
    this.makeZone({
        rows: [[{html: _("Previous"), data: {"data-fn": "prev"}}, {
            html: _("Back"),
            data: {"data-fn": "btnBack"}
        }, {
            html: _("Watch Trailer"),
            data: {
                "data-fn": "init",
                "data-page": "VODTrailer",
                "data-name": this.movie.name,
                "data-length": this.movie.length,
                "data-url": this.movie.trailer_url
            }
        }, {
            html: _("Watch Movie"),
            data: {"data-fn": "ppvValidate", "data-ppv": this.ppv, "data-next": this.ppvNext}
        }, {
            html: '<span class="ico ico-share"></span> ' + _("Social Share"),
            data: {"data-fn": "fbShare", "data-title": this.movie.name, "data-type": "movie", "data-id": this.movie.id}
        }, {html: _("Next"), data: {"data-fn": "next"}}]], selector: ".sub-menu", selection: "bg"
    })
}, App.VODDetail.loaded = function (e) {
    this.movie = e, this.ppv = GWareBase64.encode(JSON.stringify({
        enabled: e.is_payperview,
        prices: e.movieprices,
        rule: e.rule_payperview,
        id: e.id,
        name: e.name,
        type: "movie"
    })), this.ppvNext = GWareBase64.encode(JSON.stringify({
        "data-fn": "init",
        "data-page": "VODMovie",
        "data-id": e.id
    })), $(".poster img").attr("src", App.settings.server_location.movie_location + '/images/movies/' + e.poster), $(".title").html(e.name), $(".rating").html(this.rating2stars(e.rating)), $(".description").html(this.getDescription(e.moviedescriptions)), $(".year").html(e.year), $(".language").html(e.language), $(".duration").html(_("{$} minutes", e.length)), $(".actors").html(this.limitActors(e.actors ? e.actors.limit(128) : "No information available")), $(".tags").html(this.getTags(e.tags)), $(".cover").html(e.backdrop ? '<img src=" ' + App.settings.server_location.movie_location + '/images/movies/' + e.backdrop + '" />' : ""), this.loadAfter(), void 0 !== App.VODBrowse && void 0 !== App.VODBrowse.movieIds || ($('.sub-menu .item[data-fn="prev"]').hide(), $('.sub-menu .item[data-fn="next"]').hide(), this.fnBack = "Home"), this.select($('.sub-menu .item[data-fn="ppvValidate"]')), this.enableMenu(), App.reports.set({
        type: 11,
        name: e.name,
        id: e.id
    })
}, App.VOD = GWareIPTV.UIBase.VOD, App.VODMovie = GWareIPTV.UIBase.VODMovie, App.VODSub = GWareIPTV.UIBase.VODSub, App.VODTrailer = GWareIPTV.UIBase.VODTrailer, App.Youtube = GWareIPTV.UIBase.Youtube, App.YoutubePlayer = GWareIPTV.UIBase.YoutubePlayer;
