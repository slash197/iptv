GWareIPTV.UIPrototype.prototype.updateTime = function () {
    $(".header-middle .clock").html((new Date).niceTime()), $(".header-right .calendar").html((new Date).niceDate())
}, GWareIPTV.UIPrototype.prototype.updateWeather = function (e, t) {
    if (lg("weather > data arrived"), App.settings.access.feature.weather) {
        var i = (new Date).getHours(), a = i < 6 || 21 < i ? "night" : "day";
        $(".weather .city").html(t), $(".weather .degree").html(e.temp_C + " &deg;C / " + e.temp_F + " &deg;F"), $(".weather .icon").html('<img src="artwork/weather/' + a + "/" + e.weatherCode + '.png" />')
    }
}, GWareIPTV.UIPrototype.prototype.resetPageLayout = function (e, t) {
    lg("ui controller > resetting page layout [onLoad]"), $(".header, .ui > .nav").css("display", t ? "none" : "block"), $(".main").css("height", t || "mobile" === App.user.device.category ? window.innerHeight : window.innerHeight - 120), $(".main").html(e), this.isPlayerPage = this.playerPages.hasValue(this.name), this.setupHoverMenu(t)
}, GWareIPTV.UIPrototype.prototype.setupFrame = function () {
    this.setupMenuFrame({
        selection: "underline",
        vertical: !1,
        type: "text",
        preType: "icon",
        perRow: !1,
        logout: !1
    }), this.makeZone({
        items: [{
            html: '<span class="ico ico-exit-to-app"></span>',
            data: {"data-fn": "logout"},
            style: {width: "100%", height: "100%"}
        }], selector: ".logout", selection: "bg", scroller: {width: "auto", height: "100%"}
    })
}, GWareIPTV.UIPrototype.prototype.loadCustomStyles = function () {
    App.hex2rgb(App.settings.style.highlight.primary);
    var e = [{selector: "body", style: {"font-size": App.getFontSize()}}, {
        selector: ":root",
        style: {
            "--main-color": App.settings.style.highlight.primary,
            "-webkit-var-main-color": App.settings.style.highlight.primary
        }
    }, {
        selector: ".bg-border.hot-zone .scroller .row .item.active",
        style: {
            "background-color": App.settings.style.highlight.primary,
            "border-color": App.settings.style.highlight.primary
        }
    }, {
        selector: ".header-right .calendar",
        style: {"background-color": App.settings.style.highlight.secondary}
    }, {
        selector: ".notification-zone-buttons .item.active",
        style: {"background-color": App.settings.style.highlight.primary}
    }, {
        selector: ".nav .main-menu .scroller .row .item.active",
        style: {color: App.settings.style.highlight.primary}
    }, {
        selector: ".tv .header.nav .category-menu .scroller .row .item.active",
        style: {color: App.settings.style.highlight.primary}
    }, {
        selector: ".sub-menu-holder .scroller .row .item.active",
        style: {color: App.settings.style.highlight.primary}
    }, {
        selector: ".series-holder-k.nav .series .scroller .row .item.active .movie-h-info .series-watch",
        style: {"background-color": App.settings.style.highlight.primary}
    }, {
        selector: ".movies-holder-k.nav .movies .scroller .row .item.active .movie-h-info .movie-watch",
        style: {"background-color": App.settings.style.highlight.primary}
    }, {
        selector: ".selection.selection-round",
        style: {"background-color": App.settings.style.highlight.primary}
    }, {
        selector: ".selection.selection-underline",
        style: {"border-bottom-color": App.settings.style.highlight.primary}
    }, {
        selector: ".active-info",
        style: {"background-color": App.settings.style.highlight.primary}
    }, {
        selector: ".elapsed-time",
        style: {"background-color": App.settings.style.highlight.secondary}
    }, {
        selector: ".item.selected",
        style: {"border-bottom-color": App.settings.style.highlight.secondary}
    }, {
        selector: ".selection.selection-bg",
        style: {"background-color": App.settings.style.highlight.primary}
    }, {
        selector: ".selection.selection-border",
        style: {"border-color": App.settings.style.highlight.primary}
    }, {
        selector: ".epg .programmes .timeline",
        style: {"background-color": App.settings.style.highlight.primary}
    }, {
        selector: ".metro-news-date",
        style: {"background-color": App.settings.style.highlight.primary}
    }, {
        selector: ".hover-menu .btn",
        style: {"background-color": App.settings.style.highlight.primary}
    }, {
        selector: ".progress .bar",
        style: {"background-color": App.settings.style.highlight.primary}
    }, {
        selector: ".ad-placeholder",
        style: {"background-color": App.settings.style.highlight.primary}
    }, {
        selector: ".timebar .line",
        style: {"background-color": App.settings.style.highlight.primary}
    }, {
        selector: ".timebar .cursor",
        style: {"border-bottom": "10px solid " + App.settings.style.highlight.primary}
    }, {
        selector: ".timebar .tick",
        style: {"border-left": "3px solid " + App.settings.style.highlight.primary}
    }, {selector: ".progress .handle .dot", style: {"border-top-color": App.settings.style.highlight.primary}}];
    App.injectStyle(e)
}, App.Apps = GWareIPTV.UIBase.Apps, App.Apps.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = [{html: _("Installed"), data: {"data-group": "Installed"}}];
    App.user.package.app.group.forEach(function (e) {
        t.push({html: e, data: {"data-group": e}})
    }), 1 < t.length ? (this.makeZone({
        items: t,
        selector: ".category-menu",
        selection: "underline"
    }), this.object = $('.category-menu .item[data-group="Installed"]'), this.select()) : $(".main").html('<p class="empty">' + _("There are no apps") + "</p>"), this.fnBack = App.pageDefault.page, this.enableMenu("Apps")
}, App.EPGh = GWareIPTV.UIBase.EPGh, App.EPGh.loaded = function () {
    var e = 0, s = App.epg[App.epg.viewDate], n = null, t = 0, i = new Date(App.epg.viewDate), a = [], r = [], o = 0;
    for (var l in this.resetPageLayout(this.html), this.setDay(), $(".day .item").removeClass("selected"), $('.day .item[data-date="' + App.epg.viewDate + '"]').addClass("selected"), i.setHours(0), i.setMinutes(0), i = Math.round(i.getTime() / 1e3), s) {
        r = [], (t = (n = s[l]).data.length) && r.push({
            html: '<div class="padding" style="width: ' + (n.data[0].ut_start - i) / 6 + 'px"></div>',
            wrap: !1
        });
        for (var p = 0; p < t; p++) {
            var d = n.data[p].progimg ? n.data[p].progimg : null;
            o = (n.data[p].ut_end - n.data[p].ut_start) / 6;
            n.data[p].ut_end > e && (e = n.data[p].ut_end);
            var h = this.buildEPGData(n, n.data[p]),
                c = "<span>" + new Date(1e3 * n.data[p].ut_start).niceTime() + "</span>", u = "",
                g = (u = "", Date.now() / 1e3), m = "";
            g < n.data[p].ut_end && g > n.data[p].ut_start && (u += '<span class="time-l"><span class="elapsed-time" style="width : ', u += this.updateTimelineIndividual(n.data[p].ut_end, t), u += '%;"></span></span>'), 100 < o && null !== d && (m = '<img class="prog-img" src="' + d + '" />'), r.push({
                html: 50 < o ? m + '<div class="icons">' + h.icon + '</div><div class="prog-info">' + c + '<span class="title">' + n.data[p].progname + "</span>" + u + "</div>" : "...",
                data: h.data,
                cls: o < 50 ? "prog tiny" : "prog",
                style: {width: o + "px"}
            })
        }
        a.push(r)
    }
    this.makeZone({
        rows: a,
        selector: ".epgh",
        selection: "bg",
        scroller: {width: "auto", height: "auto"},
        pager: {
            type: "rows", count: 10, onReload: function (e) {
                for (var t = "", i = e; i < e + 10; i++) if (App.user.package.tv.list[i]) {
                    var a = App.user.package.tv.list[i];
                    t += '<div class="ch"><img src="' + (n = s[a.number + "-" + a.id]).logo + '" /></div>'
                }
                "" !== t && (document.querySelector(".channel-scroller").innerHTML = t, document.querySelector(".channel-scroller").style.top = "0px", App.epg.viewSelectRunning())
            }
        },
        scrollIntoView: !1,
        nudgeText: !0
    }), document.querySelector(".channels").style.overflowX = App.mobile ? "auto" : "hidden", document.querySelector(".hours").style.overflowX = App.mobile ? "auto" : "hidden", this.makeHourScroller(i, e), App.epg.viewSelectRunning(), "Today" === App.epg.isToday(App.epg.viewDate) && (this.clearTimer(), window.setInterval(this.updateTimeline.bind(this), 6e4)), this.resetEvents(), this.enableMenu("startEPG")
}, App.EPGh.updateTimeline = function () {
    var e = new Date, t = 10 * (60 * e.getHours() + e.getMinutes());
    $(".timeline-length").css("width", "calc(" + t + "px )")
}, App.EPGh.updateTimelineIndividual = function (e, t) {
    var i;
    return i = (new Date).getTime(), Math.round((i - e) % 864e5 % 36e5 / 6e4) / t * 100
}, App.EPGh.updateHoursOnTimeline = function () {
    $(".hour-scroller").children().length;
    var e, t = new Date;
    e = 2 * t.getHours() + 1, 30 <= t.getMinutes() && (e += 1), $(".hour-scroller .half:nth-child(-n+" + e + ")").css({color: App.settings.style.highlight.primary})
}, App.EPGh.setDay = function () {
    var e = new Date, t = new Date(e.getTime() - 864e5), i = new Date(e.getTime() - 1728e5),
        a = new Date(e.getTime() + 864e5), s = new Date(e.getTime() + 1728e5),
        n = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], r = [];
    [{label: n[i.getDay()], date: i.toString()}, {label: "Yesterday", date: t.toString()}, {
        label: "Today",
        date: e.toString()
    }, {label: "Tomorrow", date: a.toString()}, {label: n[s.getDay()], date: s.toString()}].forEach(function (e, t) {
        r.push({html: e.label, data: {"data-date": e.date, "data-fn": "selectDate"}})
    }), this.makeZone({
        items: r,
        selector: ".day",
        selection: "underline",
        scroller: {width: "auto", height: "100%"},
        align: "center"
    })
}, App.EPGh.selectDate = function (e) {
    App.epg.viewJumpDay(e.date)
}, App.EPGv = GWareIPTV.UIBase.EPGv, App.EPGv.loaded = function () {
    var e = [], t = App.epg[App.epg.viewDate];
    for (var i in this.resetPageLayout(this.html), this.resetEvents(), this.enableMenu("startEPG"), t) e.push({
        html: '<img src="' + t[i].logo + '" />',
        data: {"data-id": i}
    });
    this.makeZone({
        items: e,
        selector: ".channels",
        selection: "border"
    }), this.object = App.epg.viewChannelId ? $('.channels .item[data-id="' + App.epg.viewChannelId + '"]') : $(".channels .item:first-child"), this.select(), $(".gv-left .span6.date").html(App.epg.isToday(App.epg.viewDate)), this.loadProgrammes(this.object.data())
}, App.EPGv.loadProgramme = function (e) {
    $(".gv-right .prog-img").remove();
    for (var t = App.epg.getProgramme(App.epg.viewDate, e.id, e.epgId), i = new Date(1e3 * t.ut_start), a = new Date(1e3 * t.ut_end), s = this.elapsed(i, a), n = 0; n < t.channel.data.length; n++) t.ut_start === t.channel.data[n].ut_start && null !== t.channel.data[n].progimg && (document.querySelector(".gv-right .description").insertAdjacentHTML("beforebegin", '<div class="prog-img"></div>'), $(".gv-right .prog-img").html('<img src="' + t.channel.data[n].progimg + '" />'));
    $(".gv-right .logo").html('<img src="' + t.channel.logo + '" />'), $(".gv-right .name").html(t.channel.name), $(".gv-right .date").html(i.longDate()), $(".gv-right .time").html(i.niceTime() + " - " + a.niceTime()), $(".gv-right .title").html(t.name), $(".gv-right .description").html(t.description), $(".gv-right .progress").show().removeClass("progress-hidden"), $(".gv-right .progress .bar").css("width", s + "%"), 0 === s && $(".gv-right .progress").addClass("progress-hidden")
}, App.HomeHOTEL = GWareIPTV.UIBase.HomeHOTEL, App.Home = GWareIPTV.UIBase.Home, App.Home.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home"), App.metro._fetch(this.renderMetro.bind(this)), App.ads._load(), this.fromPage = null
}, App.Home.renderMetro = function () {
    var i = [], t = [], a = [[], [], []];
    App.metro.movies.forEach(function (e) {
        var t = App.util.createCoverIcons({id: e.id, type: "movie", icons: ["purchase", "watch"]});
        i.push({
            html: '<div class="movies-img-wrapper"><img src="' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '" />' + t + '</div><div class="movie-h-info"> <span>' + e.name + "</span><span>" + e.year + '</span ><span class="movie-watch">Watch now</span></div>',
            data: {"data-id": e.id, "data-fn": "init", "data-page": "VODDetail"},
            style: {width: $(".home-left").width() / 2 + "px", height: "100%"}
        })
    });
    var s = 0;
    App.metro.series.forEach(function (e) {
        t.push({
            html: '<div class="series-img-wrapper" style="background-image : url(' + App.settings.server_location.serie_location + '/images/series/' + e.backdrop + ');"></div> <div class="movie-h-info"> <span>' + e.name + "</span><span>" + e.year + '</span><span class="series-watch">Watch now</span></div>',
            data: {
                "data-id": e.vod_id,
                "data-fn": "init",
                "data-page": "SeriesDetail",
                "data-store-id": App.util.getStoreIdBySerieId(e.vod_id)
            },
            style: {width: $(".home-left").width() / 2 + "px", height: "100%"}
        })
    });
    var n = 0, r = App.metro.tv.length / 3;
    s = 0;
    App.metro.tv.forEach(function (e) {
        var t = App.util.createCoverIcons({id: e.channel_id, type: "channel", icons: ["purchase"]});
        r < s && (n++, s = 0), a[n].push({
            html: '<img src="' + App.settings.server_location.channel_location + '/images/channels/' + e.channel_image + '" />' + t,
            data: {"data-id": e.channel_id, "data-fn": "init", "data-page": "Channel"}
        }), s++
    }), this.makeZone({
        items: i,
        selector: ".movies",
        selection: "",
        scroller: {width: "auto", height: "100%"}
    }), this.makeZone({
        items: t,
        selector: ".series",
        selection: "",
        scroller: {width: "auto", height: "100%"}
    }), this.makeZone({
        rows: a,
        selector: ".channels",
        selection: "border",
        scroller: {width: "auto", height: "100%"}
    }), $(".movies-holder img, .series-holder img, .channels-holder img").waitForImages(function () {
        App.showPage()
    })
}, App.HomePLAYER = GWareIPTV.UIBase.HomePLAYER, App.HomeTV = GWareIPTV.UIBase.HomeTV, App.HomeVOD = GWareIPTV.UIBase.HomeVOD, App.Offline = GWareIPTV.UIBase.Offline, App.Search = GWareIPTV.UIBase.Search, App.User = GWareIPTV.UIBase.User, App.Album = GWareIPTV.UIBase.Album, App.Album.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "underline",
        scroller: {width: "auto", height: "100%"},
        align: "center"
    })
}, App.Music = GWareIPTV.UIBase.Music, App.Music.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = [{html: _("Search"), data: {"data-fn": "searchPanelShow"}}];
    App.user.package.music.forEach(function (e) {
        t.push({html: e.name, data: {"data-id": e.id, "data-fn": "loadCategory"}})
    }), 1 < t.length ? (this.renderMenu([t]), this.object = $(".sub-menu .item:nth-child(2)"), this.select(), this.loadCategory(this.object.data())) : $(".store").html('<p class="empty">' + _("There are no albums") + "</p>"), this.enableMenu("Music")
}, App.Music.renderMenu = function (e) {
    this.makeZone({rows: e, selector: ".sub-menu", selection: "underline", scroller: {width: "auto", height: "100%"}})
}, App.Music.renderCategory = function (e) {
    this.makeZone({
        rows: e,
        selector: ".music",
        selection: "border",
        stretchImages: !0,
        scroller: {width: "auto", height: "100%"}
    })
}, App.Advertisement = GWareIPTV.UIBase.Advertisement, App.SeriesBrowse = GWareIPTV.UIBase.SeriesBrowse, App.SeriesBrowse.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getSeries(420);
    if (!t.length) return !1;
    this.makeZone({
        rows: t,
        selector: ".stores",
        selection: "border",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        align: "center",
        pager: {type: "rows", count: GWareConfig.zoneItemCount}
    })
}, App.SeriesDetail = GWareIPTV.UIBase.SeriesDetail, App.SeriesDetail.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getSeasonMenu();
    if (!t.length) return $(".vod").html('<p class="empty">' + _("This series is not available at the moment, please contact support.") + "</p>"), !1;
    this.makeZone({
        rows: [t],
        selector: ".sub-menu",
        selection: "round"
    }), this.select($(".sub-menu .item:nth-child(2)")), this.loadSeason(this.object.data())
}, App.SeriesDetail.getEpisodes = function (e, t) {
    var i = this.serie.seasons[e], a = "";
    if (t || ($(".detail").css("background-image"), i.backdrop, $(".detail").css({
        "background-image": 'url("' + i.backdrop + '")',
        "background-repeat": "no-repeat",
        "background-size": "cover"
    })), $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-index="' + e + '"]').addClass("selected"), "undefined" !== App.language.current) for (var s = 0; s < i.descriptions.length; s++) App.language.current == i.descriptions[s].language && (a = i.descriptions[s].description); else a = i.descriptions[0].description;
    $(".s-title").html(_(this.serie.name)), $(".rating").html(this.rating2stars(i.rating)), $(".description").html(a), $(".year").html(i.year), $(".language").html(i.language), $(".duration").html(_("{$} mins", i.length)), $(".staring").html(this.limitActors(i.actors)), $(".tags").html(this.getTags(i.tags));
    var n = [];
    for (s = 0; s < i.episodes.length; s++) {
        var r = i.episodes[s], o = s + 1 < 10 ? "0" + (s + 1) : s + 1,
            l = App.util.createCoverIcons({id: r.id, type: "episode", icons: ["watch"]});
        n[s] || (n[s] = []), n[s].push({
            html: "<span>" + o + ".</span> " + r.name + l,
            data: {
                "data-page": "SeriesPlayer",
                "data-fn": "init",
                "data-store-id": this.item.storeId,
                "data-id": this.serie.id,
                "data-season": e,
                "data-episode": s
            }
        })
    }
    return App.reports.set({type: 15, name: this.serie.name, id: this.serie.id}), n
}, App.SeriesDetail.loadSeason = function (e) {
    var t = this.getEpisodes(e.index);
    this.makeZone({rows: t, selector: ".playlist", selection: "", scroller: {width: "100%", height: "auto"}})
}, App.SeriesPlayer = GWareIPTV.UIBase.SeriesPlayer, App.SeriesPlayer.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "bg",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        align: "center"
    })
}, App.SeriesStore = GWareIPTV.UIBase.SeriesStore, App.SeriesStore.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getStores(420);
    t.length ? this.makeZone({
        rows: t,
        selector: ".stores",
        selection: "border",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        align: "center"
    }) : $(".main").html('<div><p class="empty">' + _("There are no series stores") + "</p></div>"), this.fnBack = App.pageDefault.page, this.enableMenu("Series")
}, App.SettingsAbout = GWareIPTV.UIBase.SettingsAbout, App.SettingsAbout.render = function () {
    App.userSettings.renderMenu({selection: "underline"}), App.userSettings.renderOptions({
        section: "about",
        brand: ".title",
        selection: ""
    })
}, App.SettingsCatchupTV = GWareIPTV.UIBase.SettingsCatchupTV, App.SettingsCatchupTV.onLoad = function (e) {
    this.resetPageLayout(e), this.render(), this.enableMenu("SettingsAbout"), this.fnBack = App.pageDefault.page
}, App.SettingsCatchupTV.render = function () {
    App.userSettings.renderMenu({selection: "underline"}), App.userSettings.renderOptions({
        section: "catchup",
        selection: ""
    })
}, App.SettingsDisclaimer = GWareIPTV.UIBase.SettingsDisclaimer, App.SettingsGeneral = GWareIPTV.UIBase.SettingsGeneral, App.SettingsGeneral.onLoad = function (e) {
    this.resetPageLayout(e), this.render(), this.enableMenu("SettingsAbout"), this.fnBack = App.pageDefault.page
}, App.SettingsGeneral.render = function () {
    App.userSettings.renderMenu({selection: "underline"}), App.userSettings.renderOptions({
        section: "general",
        selection: ""
    })
}, App.SettingsLanguages = GWareIPTV.UIBase.SettingsLanguages, App.SettingsLanguages.render = function () {
    App.userSettings.renderMenu({selection: "underline"}), App.userSettings.renderOptions({
        section: "languages",
        callback: "refresh",
        selection: ""
    })
}, App.SettingsScreenSaver = GWareIPTV.UIBase.SettingsScreenSaver, App.SettingsScreenSaver.render = function () {
    App.userSettings.renderMenu({selection: "underline"}), App.userSettings.renderOptions({
        section: "screensaver",
        callback: "restart",
        selection: ""
    })
}, App.SettingsSpeedTest = GWareIPTV.UIBase.SettingsSpeedTest, App.SettingsSpeedTest.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = $(".gauge").height(), i = t / 250, a = {top: 30 * i, width: 25 * i, height: 105 * i}, s = a.width / 2,
        n = s, r = 90 * i;
    $(".gauge").css("width", t), $(".gauge img").css({
        height: a.height,
        width: a.width,
        top: a.top,
        "margin-left": -1 * s,
        "-webkit-transform-origin": n + "px " + r + "px"
    }), this.render(), this.enableMenu("SettingsAbout"), this.fnBack = App.pageDefault.page
}, App.SettingsSpeedTest.render = function () {
    App.userSettings.renderMenu({selection: "underline"}), this.makeZone({
        rows: [{
            html: _("Start test"),
            data: {"data-fn": "start"},
            style: {width: "100%"}
        }].matrix("horizontal"), selector: ".controls", selection: "bg", scroller: {width: "100%"}
    })
}, App.SettingsSupport = GWareIPTV.UIBase.SettingsSupport, App.SettingsSupport.onLoad = function (e) {
    this.resetPageLayout(e), store.set("iptv.subscription.warning", "off"), $(".warning").hide(), this.qr && this.qr.clear(), this.qr = new QRCode($(".qr")[0], {
        text: App.settings.contact.url,
        width: 128,
        height: 128,
        colorDark: "#000000",
        colorLight: "#ffffff",
        correctLevel: QRCode.CorrectLevel.H
    }), this.render(), this.enableMenu("SettingsAbout"), this.fnBack = App.pageDefault.page
}, App.SettingsSupport.render = function () {
    App.userSettings.renderMenu({selection: "underline"}), App.userSettings.renderOptions({
        section: "support",
        brand: ".title",
        selection: ""
    })
}, App.CatchUpHome = GWareIPTV.UIBase.CatchUpHome, App.CatchUp = GWareIPTV.UIBase.CatchUp, App.CatchUp.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.timerError = null, this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind"),
            keyRight: this.preselect.bind(this, "forward"),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-skip-previous"></span>',
            data: {"data-fn": "skipPrev"}
        }, {
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {
            html: '<span class="ico ico-fast-forward"></span>',
            data: {"data-fn": "forward"}
        }, {html: '<span class="ico ico-skip-next"></span>', data: {"data-fn": "skipNext"}}]],
        selector: ".sub-menu",
        selection: "bg",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        align: "center"
    }), this.item.ts || (this.item.ts = this.item.start), this.channel = App.util.getChannelData(this.item.id), this.skipInterval = 60, this.reload(!0), App.reports.set({
        type: 5,
        name: this.channel.name,
        id: this.channel.id
    }), App.player.setup({
        url: this.url, events: {
            complete: function () {
            }, time: function (e) {
                30 < e.position && !this.reportSent && (this.report($(".panel-middle .title").text()), this.reportSent = !0)
            }.bind(this), play: function () {
                this.timerError && window.clearTimeout(this.timerError)
            }.bind(this), error: function (e) {
                lg("catchup > error event fired, scheduling popup in 3 seconds"), this.timerError && window.clearTimeout(this.timerError), this.timerError = window.setTimeout(function () {
                    pp({
                        message: _("Stream is not available at this moment [2003]"),
                        buttons: [{label: "Switch to live stream", data: {"data-fn": "switch2live"}}]
                    })
                }.bind(this), 3e3)
            }.bind(this), ready: function () {
                App.player.play(), this.preselect("play"), App.timer({key: "catchup-playback"})
            }.bind(this)
        }
    }), this.timeline(), this.timerTimeline = window.setInterval(this.timeline.bind(this), 500), this.fnBack = App.pageDefault.page
}, App.CatchUp.timeline = function () {
    var e = App.timer({key: "catchup-playback", done: !0, decimal: 0, clear: !1, log: !1}), t = Math.round(e / 1e3),
        i = new Date(1e3 * (this.item.ts + t - 1800));
    $(".timebar .tick").each(function () {
        $(this).html(i.niceTime(!1)), i.setMinutes(i.getMinutes() + 10)
    })
}, App.CatchUp.infoUpdate = function () {
    var t = this;
    $(".info .panel").each(function () {
        var e = App.epg.getProgrammeByTimestamp(t.item.id, t.item.ts);
        $(this).find(".logo img").attr("src", t.channel.logo.normal), $(this).find(".title").html(e.name + "<span>(" + (e.ut_end - e.ut_start) / 60 + " mins)</span>"), $(this).find(".description").html(e.description), $(this).find(".playtime").html(new Date(1e3 * e.ut_start).niceTime() + " - " + new Date(1e3 * e.ut_end).niceTime())
    })
}, App.FavoriteManager = GWareIPTV.UIBase.FavoriteManager, App.FavoriteManager.onLoad = function (e) {
    $(".main").css("background-color", "rgba(0,0,0,0.3)"), this.resetPageLayout(e), this.selected = {
        left: [],
        right: []
    };
    for (var t = App.user.package.tv.group.length, i = null, a = [], s = 0; s < t; s++) i = App.user.package.tv.group[s], a.push({
        html: i.name,
        data: {"data-fn-select": "loadChannels", "data-id": i.id}
    });
    this.makeZone({
        rows: [a],
        selector: ".groups",
        selection: "bg",
        scroller: {width: "auto", height: "100%"}
    }), this.object = $(".groups .item:first-child"), this.select(), this.renderFavorites(), this.registerEvents(), this.fnBack = "TV", this.enableMenu("TV"), App.reports.set({type: 3})
}, App.Recording = GWareIPTV.UIBase.Recording, App.Recording.renderMenu = function () {
    this.resetPageLayout(this.html);
    var e = [];
    App.user.device.canRecord && e.push({
        html: _("Local"),
        data: {"data-fn": "changeType", "data-type": "local"}
    }), App.cloudPVR.enabled && e.push({
        html: _("Cloud"),
        data: {"data-fn": "changeType", "data-type": "cloud"}
    }), this.makeZone({
        rows: [e],
        selector: ".sub-menu",
        selection: "underline",
        scroller: {width: "auto", height: "100%"},
        align: "center"
    }), this.type || (this.type = $(".sub-menu .row .item:first-child").attr("data-type")), lg("recordings > rendering type [" + this.type + "]"), $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-type="' + this.type + '"]').addClass("selected")
}, App.RecordingPlayer = GWareIPTV.UIBase.RecordingPlayer, App.RecordingPlayer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {keyLeft: this.preselect.bind(this, "rewind"), keyRight: this.preselect.bind(this, "forward")}
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "bg",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        scroller: {width: "auto", height: "100%"},
        align: "center"
    }), App.reports.set({
        type: 6,
        name: this.item.title,
        id: this.item.url
    }), $(".movie-title").html(this.item.title), $(".duration").html(this.item.length), lg("duration recording -> " + this.item.length), this.start(), this.fnBack = this.item.back ? this.item.back : "Recording", this.enableMenu()
}, App.RecordingPlayer.start = function () {
    App.player.setup({
        url: this.item.url, events: {
            complete: this.btnBack.bind(this), time: function (e) {
                $(".duration").html(e.duration.toCounter()), $(".main .progress .bar").css("width", e.percent + "%"), $(".remaining").html(e.remaining.toCounter())
            }, error: function (e) {
                lg(e), this.notification(_("Stream is not available at this moment"))
            }.bind(this), ready: function () {
                App.player.play()
            }
        }
    }), this.infoShow()
}, App.Channel = GWareIPTV.UIBase.Channel, App.Channel.infoUpdate = function () {
    for (var e = $(".panel"), t = 0; t < e.length; t++) {
        var i = parseInt($(e[t]).attr("data-id"), 10), a = App.epg.getProgrammeByTime(i),
            s = (new Date).getTime() / 1e3, n = a.ut_end - a.ut_start, r = (a.ut_end - a.ut_start) / 60,
            o = s - a.ut_start,
            l = 0 === a.ut_start ? "" : new Date(1e3 * a.ut_start).niceTime() + " - " + new Date(1e3 * a.ut_end).niceTime(),
            p = 0 === a.ut_start ? "" : Math.round((n - o) / 60) + " min remaining",
            d = 0 === a.ut_start ? 0 : Math.round(100 * o / n);
        $(e[t]).find(".favorites .text").html(App.favorites.is(i) ? "Remove from Favorites" : "Add to Favorites"), $(e[t]).find(".number").html(a.channel.number + "."), $(e[t]).find(".logo img").attr("src", a.channel.logo), $(e[t]).find(".title").html(a.name + "<span>(" + r + " mins)</span>"), 0 === r && $(e[t]).find(".title span").hide(), $(e[t]).find(".description").html(a.description), $(e[t]).find(".playtime").html(l), $(e[t]).find(".current-time").html((new Date).niceTime()), $(e[t]).find(".elapsed-playtime").html(p), $(e[t]).find(".progress .bar").css("width", d + "%"), $(e[t]).hasClass("panel-middle") && (this.channel.current = a)
    }
}, App.TV = GWareIPTV.UIBase.TV, App.TV.onLoad = function (e) {
    this.resetPageLayout(e), this.groupId = null, this.makeZone({
        rows: this.loadCategories(),
        selector: ".category-menu",
        selection: "underline"
    }), this.select($('.category-menu .item[data-id="-1"]')), this.enableMenu("TV"), App.reports.set({type: 2})
}, App.VODBrowse = GWareIPTV.UIBase.VODBrowse, App.VODBrowse.onLoad = function (e) {
    this.item ? (this.lastId = this.item.id, this.back = this.item.back, this.storeId = this.item.id) : this.storeId = this.lastId, this.store = App.util.getVODStore(this.storeId), this.resetPageLayout(e);
    var i = [{html: _("Back"), data: {"data-fn": "btnBack"}}, {
        html: _("Search"),
        data: {"data-fn": "searchPanelShow"}
    }];
    this.store.categories.forEach(function (e, t) {
        i.push({html: e.name, data: {"data-index": t, "data-fn": "loadCategory"}})
    }), this.makeZone({
        items: i,
        selector: ".sub-menu",
        selection: "underline"
    }), this.select($('.sub-menu .item[data-index="0"]')), this.enableMenu("VOD"), this.fnBack = this.back, this.loadCategory(this.object.data())
}, App.VODBrowse.loadCategory = function (e) {
    var i = [[]], a = 0;
    $(".sub-menu .item").each(function () {
        $(this).removeClass("selected")
    }), $('.sub-menu .item[data-index="' + e.index + '"]').addClass("selected"), this.movieIds = [], this.store.categories[e.index].movies.forEach(function (e) {
        App.VODBrowse.movieIds.push(e.id);
        var t = App.util.createCoverIcons({id: e.id, type: "movie", icons: ["purchase", "watch"]});
        i[0].push({
            html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '" />' + t + '<div class="active-info" ><div class="time">' + e.year + '</div><div class="play"><span class="ico ico-play-arrow"></span></div></div></div>',
            data: {"data-id": e.id, "data-fn": "init", "data-page": "VODDetail"}
        }), a = 0 === a ? 1 : 0
    }), 0 === this.movieIds.length && $(".movies").html('<p class="empty">' + _("This category is empty") + "</p>"), this.makeZone({
        rows: i,
        selector: ".movies",
        selection: "movie-selection",
        scroller: {width: "auto", height: "100%"},
        pager: {type: "cols", count: GWareConfig.zoneItemCount}
    }), App.reports.set({type: 10, name: this.store.categories[e.index].name, id: this.store.categories[e.index].id})
}, App.VODDetail = GWareIPTV.UIBase.VODDetail, App.VODDetail.loadAfter = function () {
    null !== this.movie.backdrop && $(".detail").css({"background-image": 'url("' + App.settings.server_location.movie_location + '/images/movies/' + this.movie.backdrop + '")'}), this.makeZone({
        rows: [[{
            html: _("Previous"),
            data: {"data-fn": "prev"}
        }, {html: _("Back"), data: {"data-fn": "btnBack"}}, {
            html: _("Watch Trailer"),
            data: {
                "data-fn": "init",
                "data-page": "VODTrailer",
                "data-name": this.movie.name,
                "data-length": this.movie.length,
                "data-url": this.movie.trailer_url
            }
        }, {
            html: _("Watch Movie"),
            data: {"data-fn": "ppvValidate", "data-ppv": this.ppv, "data-next": this.ppvNext}
        }, {
            html: '<span class="ico ico-share"></span> ' + _("Social Share"),
            data: {"data-fn": "fbShare", "data-title": this.movie.name, "data-type": "movie", "data-id": this.movie.id}
        }, {html: _("Next"), data: {"data-fn": "next"}}]], selector: ".sub-menu", selection: "round"
    }), $(".m-title").html(_(this.movie.name))
}, App.VODDetail.getDescription = function (e) {
    for (var t = 0; t < e.length; t++) if (e[t].language === App.language.current) return e[t].description.limit(256);
    return e.length ? e[0].description.limit(256) : ""
}, App.VOD = GWareIPTV.UIBase.VOD, App.VOD.onLoad = function (e) {
    this.resetPageLayout(e);
    var i = 0, a = 0, s = Math.floor($(".vod").width() / 420), n = [];
    App.user.package.movie.forEach(function (e) {
        if (e.isMain) {
            var t = null;
            t = 0 === e.categories.length && 0 === e.subs.length ? {
                "data-fn": "warn",
                "data-image": e.logo
            } : {
                "data-id": e.id,
                "data-fn": "init",
                "data-back": "VOD",
                "data-image": e.logo,
                "data-page": 0 === e.subs.length ? "VODBrowse" : "VODSub",
                style: {width: "420px"}
            }, n[a] || (n[a] = []), n[a].push({
                html: '<img src="' + e.logo + '" />',
                data: t
            }), i++, 0 === Math.fmod(i, s) && a++
        }
    }), n.length ? this.makeZone({
        rows: n,
        selector: ".stores",
        selection: "border",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        align: "center"
    }) : $(".main").html('<div><p class="empty">' + _("There are no movie stores") + "</p></div>"), this.fnBack = App.pageDefault.page, this.enableMenu("VOD"), App.reports.set({type: 9}), $(window).on("load", function () {
        var e = $(".vod.nav .stores .scroller .row").width();
        $(".vod.nav .stores .scroller").css({
            width: "",
            display: "block"
        }), $(".vod.nav .stores .scroller").css({
            width: e + "px",
            position: "relative",
            "margin-left": "auto",
            "margin-right": "auto"
        }), $(".vod.nav .stores .scroller").prepend(e)
    })
}, App.VODMovie = GWareIPTV.UIBase.VODMovie, GWareIPTV.UIBase.VODMovie.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "bg",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        align: "center"
    })
}, App.VODSub = GWareIPTV.UIBase.VODSub, App.VODSub.render = function (e) {
    this.makeZone({
        rows: e,
        selector: ".stores",
        selection: "border",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"}
    }), this.makeZone({
        items: [{html: _("Back"), data: {"data-fn": "btnBack"}}],
        selector: ".sub-menu",
        selection: "underline"
    })
}, App.VODTrailer = GWareIPTV.UIBase.VODTrailer, App.VODTrailer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind"),
            keyRight: this.preselect.bind(this, "forward"),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "bg",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        align: "center"
    }), $(".movie-title").html(this.item.name), $(".progress-holder .playtime").html(_(Math.floor(this.item.length / 60) + " h " + Math.floor(this.item.length % 60) + " mins")), App.player.setup({
        url: this.item.url,
        events: {
            complete: function () {
                this.pageLoader(this.fnBack)
            }.bind(this), time: function (e) {
                $(".main .progress .bar").css("width", e.percent + "%"), $(".remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function () {
                pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), this.fnBack = "VODDetail", App.reports.set({type: 12, name: this.item.name})
}, App.Youtube = GWareIPTV.UIBase.Youtube, App.Youtube.onLoad = function (e) {
    return this.html = e, this.categories = [], this.loadCategories(this.loaded), this.videos = [], !0
}, App.Youtube.loaded = function () {
    var e = App.Youtube, t = [];
    e.resetPageLayout(e.html), t.push({
        html: _("Search"),
        data: {"data-fn": "searchPanelShow"}
    }), e.categories.forEach(function (e) {
        if ("Music" === e.name) return !1;
        t.push({
            html: e.name,
            data: {"data-id": e.id, "data-channel-id": e.channelId, "data-name": e.name, "data-fn": "loadCategory"}
        })
    }), e.makeZone({
        items: t,
        selector: ".sub-menu",
        selection: "underline"
    }), App.reports.set({type: 19}), e.fnBack = App.pageDefault.page, e.enableMenu("Youtube"), e.object = $(".sub-menu .item:nth-child(3)"), e.select(), e.loadCategory(e.object.data())
}, App.Youtube.loadCategory = function (e) {
    var o = this;
    $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-id="' + e.id + '"]').addClass("selected"), this.loading($(".clips")), this.videos = [], xhr({
        url: "https://www.googleapis.com/youtube/v3/videos?part=snippet&maxResults=50&chart=mostPopular&videoCategoryId=" + e.id + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var a = [[], [], [], []], s = $(".clips").width() / 2 - 45, n = ($(".clips").outerHeight() - 4) / 4 - 10,
                r = 0;
            e.items.forEach(function (e, t) {
                var i = "";
                e.snippet.thumbnails && (i = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url), o.videos.push({
                    id: e.id,
                    image: i,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), a[r].push({
                    html: '<div class="image-holder" style="background-image: url(' + i + ')"></div><div class="content"><div class="title">' + e.snippet.title + '</div><div class="description">' + e.snippet.description.limit(256) + "</div></div>",
                    data: {
                        "data-index": t,
                        "data-fn": "init",
                        "data-title": e.snippet.title,
                        "data-desc": e.snippet.description,
                        "data-back": "Youtube",
                        "data-page": "YoutubePlayer"
                    },
                    style: {height: n, width: s}
                }), r = r < 3 ? r + 1 : 0
            }), o.makeZone({
                rows: a,
                selector: ".clips",
                selection: "bg",
                scroller: {width: "auto", height: "auto"},
                type: "horizontal",
                chunkSize: 64
            }), o.object = $(".clips .scroller .row:nth-child(1) .item:nth-child(1)"), o.select()
        },
        error: function () {
            o.notification("An error occured, please try again later")
        }
    })
}, App.Youtube.loadCategories = function (t) {
    var i = this;
    xhr({
        url: "https://www.googleapis.com/youtube/v3/videoCategories?part=snippet&regionCode=US&key=" + App.settings.youtubeKey,
        success: function (e) {
            e.items.forEach(function (e) {
                i.categories.push({id: e.id, channelId: e.snippet.channelId, name: e.snippet.title})
            }), t()
        }
    })
}, App.Youtube.searchPanelGo = function () {
    var n = this, e = $('input[name="term"]').val().toLowerCase();
    "" !== e && ($(".clips").html('<div class="spinner-holder"><span class="text">Loading</span><div class="loader"></div></div>'), this.videos = [], xhr({
        url: "https:///www.googleapis.com/youtube/v3/search?part=snippet&maxResults=50&q=" + e + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var a = [[], [], [], []], s = 0;
            n.searchPanelHide(), e.items.forEach(function (e, t) {
                var i = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url;
                n.videos.push({
                    id: e.id.videoId,
                    image: i,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), a[s].push({
                    html: '<div class="image-holder" style="background-image: url(' + i + ')"></div><div class="content"><div class="title">' + e.snippet.title + '</div><div class="description">' + e.snippet.description.limit(256) + "</div></div>",
                    data: {"data-index": t, "data-fn": "init", "data-page": "YoutubePlayer", "data-back": "Youtube"},
                    style: {
                        height: ($(".clips").outerHeight() - 4) / 4 - 10 + "px",
                        width: $(".clips").width() / 2 - 45 + "px"
                    }
                }), s = s < 3 ? s + 1 : 0
            }), n.makeZone({
                rows: a,
                selector: ".clips",
                selection: "bg",
                scroller: {width: "auto", height: "auto"},
                type: "horizontal",
                chunkSize: 64
            })
        }
    }))
}, App.YoutubePlayer = GWareIPTV.UIBase.YoutubePlayer, App.YoutubePlayer.reload = function () {
    var e = App.baseURL.youtube + "?videoid=" + this.videos[this.index].id,
        t = this.index < this.videos.length - 1 ? this.index + 1 : 0,
        i = 0 < this.index ? this.index - 1 : this.videos.length - 1;
    App.reports.set({
        type: 18,
        name: this.videos[this.index].title,
        id: this.videos[this.index].id
    }), App.player.setup({
        url: e, events: {
            complete: function () {
                this.next()
            }.bind(this), time: function (e) {
                $(".main .progress .bar").css("width", e.percent + "%"), $(".remaining").html(e.remaining.toCounter()), $(".duration").html(e.duration.toCounter()), lg("duration test -> " + e.duration.toCounter())
            }, error: function (e) {
                lg(e), pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), "left" === this.lastSwipe && ($(".panel-left, .panel-middle").remove(), $(".panel-right").addClass("panel-middle").removeClass("panel-right")), "right" === this.lastSwipe && ($(".panel-right, .panel-middle").remove(), $(".panel-left").addClass("panel-middle").removeClass("panel-left")), $(".info").prepend(this.clonePanel("left")).append(this.clonePanel("right")), $(".panel-left").attr("data-index", i), $(".panel-right").attr("data-index", t), $(".panel-middle").attr("data-index", this.index), $(".panel-left .sub-menu, .panel-right .sub-menu").html(""), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".panel-middle .sub-menu",
        selection: "bg",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        align: "center"
    }), this.infoUpdate(), this.preselect("play")
},App.YoutubePlayer.infoUpdate = function () {
    $(".panel").each(function () {
        var e = App.YoutubePlayer.videos[parseInt($(this).attr("data-index"))];
        $(this).find(".logo img").attr("src", e.image), $(this).find(".title").html(e.title), $(this).find(".description").html(e.description)
    })
};
//# sourceMappingURL=13-rasgulla.min.js.map