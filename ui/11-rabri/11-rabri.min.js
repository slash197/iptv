GWareIPTV.UIPrototype.prototype.updateTime = function () {
    $(".header-right .time").html((new Date).niceTime())
}, GWareIPTV.UIPrototype.prototype.updateCalendar = function () {
    $(".header-right .calendar").html((new Date).niceDate())
}, GWareIPTV.UIPrototype.prototype.updateWeather = function (e, t) {
    if (lg("weather > data arrived"), App.settings.access.feature.weather) {
        var a = (new Date).getHours(), s = a < 6 || 21 < a ? "night" : "day";
        $(".weather .city").html(t), $(".weather .degree").html(e.temp_C + " &deg;C / " + e.temp_F + " &deg;F"), $(".weather .icon").html('<img src="artwork/weather/' + s + "/" + e.weatherCode + '.png" />')
    }
}, GWareIPTV.UIPrototype.prototype.resetPageLayout = function (e, t) {
    lg("ui controller > resetting page layout [onLoad] fullscreen [" + t + "]");
    var a = t ? window.innerHeight : "mobile" === App.user.device.category ? window.innerHeight : window.innerHeight - 100;
    $(".header").css("display", t ? "none" : "block"), $(".main-menu-button,.footer,.main-menu").css("display", t ? "none" : "block"), $(".main").css("height", a), $(".main").html(e), this.hideMenu(), this.isPlayerPage = this.playerPages.hasValue(this.name), this.setupHoverMenu(t)
}, GWareIPTV.UIPrototype.prototype.setupFrame = function () {
    this.setupMenuFrame({
        selection: "border-main",
        vertical: !1,
        type: "both",
        preType: "both",
        perRow: !1,
        layer: "main"
    }), this.makeZone({
        items: [{html: ' <span class="ico ico-close"></span>', data: {"data-fn": "hideMenu"}}],
        selection: "none",
        selector: ".button-close",
        layer: "main"
    }), this.makeZone({
        items: [{html: ' <span class="ico ico-menu"></span>', data: {"data-fn": "showMenu"}}],
        selection: "none",
        selector: ".main-button-holder"
    })
}, GWareIPTV.UIPrototype.prototype.showMenu = function () {
    this.disableZones(".main-menu,.button-close"), $(".footer").css({
        display: "block",
        top: "0"
    }), this.select($(".main-menu .item").first()), App.LS.scrollIntoView()
}, GWareIPTV.UIPrototype.prototype.hideMenu = function () {
    $(".footer").css({
        display: "none",
        top: "110%"
    }), this.enableZones(".main-menu,.button-close"), App.LS.zoneActive = null, App.LS.zone = null, App.LS.setupZones()
}, App.Apps = GWareIPTV.UIBase.Apps, App.Apps.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = [{html: _("Installed"), data: {"data-group": "Installed"}}];
    App.user.package.app.group.forEach(function (e) {
        t.push({html: e, data: {"data-group": e}})
    }), 1 < t.length ? (this.makeZone({
        items: t,
        selector: ".category-menu",
        selection: "metro"
    }), this.object = $('.category-menu .item[data-group="Installed"]'), this.select()) : $(".main").html('<p class="empty">' + _("There are no apps") + "</p>"), this.fnBack = App.pageDefault.page, this.enableMenu("Apps")
}, App.Apps.loadCategory = function (e) {
    var a = this, s = [], t = [], i = 0, n = e.group, r = 0;
    if ($(".category-menu .item").removeClass("selected"), $('.category-menu .item[data-group="' + n + '"]').addClass("selected"), lg("apps > loading category [" + n + "]"), "Installed" === n) {
        this.apps = App.player.getApps(), this.apps.forEach(function (e) {
            var t = "true" === e.appIsSystemApp ? "loc:/" + e.appImage : a.getAppFromPackage(e.appName, "icon");
            s.push({
                html: '<img src="' + t + '" />',
                data: {
                    "data-package": e.appPackage,
                    "data-name": e.appName,
                    "data-icon": t,
                    "data-system": e.appIsSystemApp,
                    "data-fn": "askOpen",
                    "data-text": _("Press OK to open this app")
                }
            })
        }), r = Math.ceil(s.length / 3);
        for (var o = 0; o < s.length; o++) t[i] || (t[i] = []), t[i].push(s[o]), 0 === Math.fmod(o + 1, r) && i++;
        return this.apps.length ? a.makeZone({
            rows: t,
            selector: ".channels",
            selection: "border",
            stretchImages: !0,
            scroller: {width: "auto", height: "autos"}
        }) : $(".channels").html('<p class="empty">' + _("There are no installed apps") + "</p>"), !1
    }
    App.user.package.app.list.forEach(function (e) {
        e.group === n && s.push({
            html: '<img src="' + e.icon + '" />',
            data: {
                "data-name": e.name,
                "data-icon": e.icon,
                "data-url": e.url,
                "data-system": !1,
                "data-fn": "askInstall",
                "data-text": _("Press OK to install this app")
            }
        })
    }), r = Math.ceil(s.length / 3);
    for (o = 0; o < s.length; o++) t[i] || (t[i] = []), t[i].push(s[o]), 0 === Math.fmod(o + 1, r) && i++;
    s.length ? this.makeZone({
        rows: t,
        selector: ".channels",
        selection: "border",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"}
    }) : $(".channels").html('<p class="empty">' + _("There are no apps in this category") + "</p>")
}, App.EPGh = GWareIPTV.UIBase.EPGh, App.EPGh.loaded = function () {
    var e = 0, i = App.epg[App.epg.viewDate], n = null, t = 0, a = new Date(App.epg.viewDate), s = [], r = [], o = 0;
    for (var p in this.resetPageLayout(this.html), $(".header .date").html(App.epg.isToday(App.epg.viewDate)), a.setHours(0), a.setMinutes(0), a = Math.round(a.getTime() / 1e3), i) {
        r = [], (t = (n = i[p]).data.length) && r.push({
            html: '<div class="padding" style="width: ' + (n.data[0].ut_start - a) / 6 + 'px"></div>',
            wrap: !1
        });
        for (var l = 0; l < t; l++) {
            o = (n.data[l].ut_end - n.data[l].ut_start) / 6, n.data[l].ut_end > e && (e = n.data[l].ut_end);
            var h = this.buildEPGData(n, n.data[l]);
            r.push({
                html: 50 < o ? '<span class="ico-holder">' + h.icon + '</span><span class="title">' + n.data[l].progname + "</span>" : "...",
                data: h.data,
                cls: o < 50 ? "prog tiny" : "prog",
                style: {width: o + "px"}
            })
        }
        s.push(r)
    }
    this.makeZone({
        rows: s,
        selector: ".epgh",
        selection: "border",
        scroller: {width: "auto", height: "auto"},
        pager: {
            type: "rows", count: 10, onReload: function (e) {
                for (var t = "", a = e; a < e + 10; a++) if (App.user.package.tv.list[a]) {
                    var s = App.user.package.tv.list[a];
                    t += '<div class="ch"><img src="' + (n = i[s.number + "-" + s.id]).logo + '" /></div>'
                }
                "" !== t && (document.querySelector(".channel-scroller").innerHTML = t, document.querySelector(".channel-scroller").style.top = "0px", App.epg.viewSelectRunning())
            }
        },
        scrollIntoView: !1,
        nudgeText: !0,
        centerSelection: !0
    }), document.querySelector(".channels").style.overflowX = App.mobile ? "auto" : "hidden", document.querySelector(".hours").style.overflowX = App.mobile ? "auto" : "hidden", document.querySelector(".epgh .scroller").insertAdjacentHTML("afterbegin", '<div class="timeline"></div>'), this.makeHourScroller(a, e), App.epg.viewSelectRunning(), "Today" === App.epg.isToday(App.epg.viewDate) && (this.updateTimeline(), this.clearTimer(), window.setInterval(this.updateTimeline.bind(this), 6e4)), this.resetEvents(), this.enableMenu("startEPG")
}, App.EPGh.setPreview = function () {
    $(".preview .prog-img").remove();
    var e = this.object.data(), t = App.epg.getProgramme(App.epg.viewDate, e.id, e.epgId),
        a = new Date(1e3 * t.ut_start), s = new Date(1e3 * t.ut_end);
    $(".preview .logo img").attr("src", t.channel.logo), $(".preview .name").html(t.name), $(".preview .date").html(a.longDate()), $(".preview .time").html(a.niceTime() + " - " + s.niceTime()), $(".preview .description").html(t.description.limit(128))
}, App.EPGh.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("epgh")) return this.object = $(".main-button-holder .item"), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.EPGv = GWareIPTV.UIBase.EPGv, App.EPGv.loaded = function () {
    var e = [], t = App.epg[App.epg.viewDate];
    for (var a in this.resetPageLayout(this.html), $(".gv-left .date").html(App.epg.isToday(App.epg.viewDate)), this.resetEvents(), this.enableMenu("startEPG"), t) e.push({
        html: '<img src="' + t[a].logo + '" />',
        data: {"data-id": a}
    });
    this.makeZone({
        items: e,
        selector: ".channels",
        selection: "border-sec"
    }), this.object = App.epg.viewChannelId ? $('.channels .item[data-id="' + App.epg.viewChannelId + '"]') : $(".channels .item:first-child"), this.select(), this.loadProgrammes(this.object.data())
}, App.EPGv.loadProgramme = function (e) {
    $(".gv-right .prog-img").html("");
    for (var t = App.epg.getProgramme(App.epg.viewDate, e.id, e.epgId), a = new Date(1e3 * t.ut_start), s = new Date(1e3 * t.ut_end), i = this.elapsed(t.ut_start, t.ut_end), n = 0; n < t.channel.data.length; n++) t.ut_start === t.channel.data[n].ut_start && null !== t.channel.data[n].progimg && (document.querySelector(".gv-right .description").insertAdjacentHTML("afterbegin", '<div class="prog-img"></div>'), $(".gv-right .prog-img").html('<img src="' + t.channel.data[n].progimg + '" />'));
    $(".gv-right .logo").html('<img src="' + t.channel.logo + '" />'), $(".gv-right .name").html(t.channel.name), $(".gv-right .date").html(a.longDate()), $(".gv-right .time").html(a.niceTime() + " - " + s.niceTime()), $(".gv-right .title").html(t.name), $(".gv-right .description").html(t.description), $(".gv-right .progress").removeClass("progress-hidden"), $(".gv-right .progress .bar").css("width", i + "%"), 0 === i && $(".gv-right .progress").addClass("progress-hidden")
}, App.EPGv.elapsed = function (e, t) {
    if (!App.epg.isNow(e, t, (new Date).getTime() / 1e3)) return 0;
    var a = t - e, s = (new Date).getTime() / 1e3 - e;
    return Math.round(100 * s / a)
}, App.EPGv.keyBack = function (e) {
    e && e.preventDefault();
    var t = this.object.parents(".hot-zone");
    return t.hasClass("programmes") ? (this.object = $(".channels .item").first(), void this.select()) : t.hasClass("main-menu-button") ? void this.pageLoader(App.pageDefault.page) : (this.object = $(".main-menu-button .item").first(), void this.select())
}, App.HomeHOTEL = GWareIPTV.UIBase.HomeHOTEL, App.Home = GWareIPTV.UIBase.Home, App.Home.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home"), App.metro._fetch(this.renderMetro.bind(this)), App.ads._load(), this.fromPage = null
}, App.Home.renderMetro = function () {
    var a = [], s = [], i = 0, n = 0;
    0 === App.metro.news.length ? $(".news-holder").empty() : (this.index = 0, this.timerNews = null, this.newsScroller()), App.metro.movies.forEach(function (e) {
        var t = App.util.createCoverIcons({id: e.id, type: "movie", icons: ["purchase", "watch"]});
        a[i] || (a[i] = []), a[i].push({
            html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '" />' + t,
            data: {"data-id": e.id, "data-fn": "selectItem", "data-itemtype": "movie"}
        }), i++
    }), App.metro.tv.forEach(function (e) {
        var t = App.util.createCoverIcons({id: e.channel_id, type: "channel", icons: ["purchase"]});
        s[n] || (s[n] = []), s[n].push({
            html: '<img src="' + App.settings.server_location.channel_location + '/images/channels/' + e.channel_image + '" />' + t,
            data: {"data-id": e.channel_id, "data-fn": "selectItem", "data-itemtype": "channel"}
        }), n++
    }), this.makeZone({
        rows: a,
        selector: ".movies",
        selection: "metro",
        scroller: {width: "100%", height: "auto"}
    }), this.makeZone({
        rows: s,
        selector: ".channels",
        selection: "metro",
        scroller: {width: "100%", height: "auto"}
    }), a.length || s.length ? $(".movies-holder img, .series-holder img, .channels-holder img").waitForImages(function () {
        App.showPage()
    }) : App.showPage(), this.selectItem($(".movies .row:first-child .item")[0].dataset)
}, App.Home.selectItem = function (e) {
    var t = "movie" === e.itemtype ? "VODDetail" : "Channel", a = {"data-id": e.id, "data-fn": "init", "data-page": t};
    if ("movie" === e.itemtype) this.getDetails(e.id); else {
        var s = s = App.epg.getProgrammeByTime(parseInt(e.id));
        $(".preview .underBg").remove(), $(".data .title").html(s.name), $(".data .prog-progress").html('<div class="progress"><div class="bar" style="width: ' + s.elapsed + '%" /></div>'), $(".data .description").html(s.description.limit(256))
    }
    this.makeZone({
        items: [{
            html: '<div class="button"><span class="btn-text">' + _("WATCH NOW") + '</span><span class="ic"><span class="ico ico-play-arrow"></span></span></div>',
            data: a
        }], selector: ".watch-now", selection: "button"
    }), this.select($(".watch-now .scroller .row .item"))
}, App.Home.getDetails = function (e) {
    App.util.getMovieDetails(e, this.setDetails)
}, App.Home.setDetails = function (e) {
    $(".preview").prepend('<div class="underBg" />'), $(".preview .underBg").css({
        "background-image": 'url("' + App.settings.server_location.movie_location + '/images/movies/' + e.backdrop + '")',
        "background-repeat": "no-repeat",
        "background-size": "cover",
        "background-position": "bottom"
    }), $(".data .title").html(e.name), $(".data .prog-progress").html(""), $(".data .description").html(e.description.limit(256))
}, App.Home.newsScroller = function () {
    var e = App.metro.news[this.index];
    "" === $(".metro-news-date").html() && $(".metro-news-date").html((new Date).niceDate()), $(".metro-news-image > div").css("background-image", "url(" + window.location.protocol + App.settings.url.image + e.image + ")"), $(".metro-news-text > div").html(e.description.limit(256)), this.index = this.index < App.metro.news.length - 1 ? this.index + 1 : 0, this.timerNews = window.setTimeout(this.newsScroller.bind(this), 1e4)
}, App.Home.unload = function () {
    window.clearTimeout(this.timerNews)
}, App.HomePLAYER = GWareIPTV.UIBase.HomePLAYER, App.HomeTV = GWareIPTV.UIBase.HomeTV, App.HomeVOD = GWareIPTV.UIBase.HomeVOD, App.Offline = GWareIPTV.UIBase.Offline, App.Search = GWareIPTV.UIBase.Search, App.Search.onLoad = function (e) {
    this.lastSearch = "", this.resetPageLayout(e);
    var t = parseInt($(".search-results-holder").height(), 10), a = [{
        html: '<input type="text" placeholder="' + _("Search") + '" />',
        data: {"data-fn": "keyboardShow"},
        cls: "item",
        wrap: !1,
        style: {width: "200px", height: "43px"}
    }, {
        html: '<span class="ico ico-check-box"></span>' + _("Movies"),
        data: {"data-fn": "mark", "data-type": "movies"}
    }, {
        html: '<span class="ico ico-check-box"></span>' + _("TV channels"),
        data: {"data-fn": "mark", "data-type": "channels"}
    }, {
        html: '<span class="ico ico-check-box"></span>' + _("Series"),
        data: {"data-fn": "mark", "data-type": "series"}
    }, {
        html: '<span class="ico ico-check-box"></span>' + _("Music albums"),
        data: {"data-fn": "mark", "data-type": "music"}
    }];
    t < 320 && (t = 320), this.makeZone({
        rows: [a],
        selector: ".tools",
        selection: "bg"
    }), this.select($(".tools .row .item:first")), this.enableMenu("Search"), $(".main").css("background-image", "linear-gradient(228deg, rgba(232, 232, 238, 0.45), rgba(232, 232, 238, 0.35))"), $(".tools input").on("keyup input focus", this.reload.bind(this)), $(".sr-row.l").css("height", .5 * t), $(".sr-row.m").css("height", .4 * t), $(".sr-row.s").css("height", .33 * t), $(".sr-row.xs").css("height", .3 * t), App.reports.set({type: 23})
}, App.Search.scrollDown = function () {
    if (App.LS.run("down")) {
        var e = $(".search-results-holder")[0].getBoundingClientRect(),
            t = $(".active").parents(".sr-row")[0].getBoundingClientRect();
        if (t.bottom > e.bottom) {
            var a = $(".search-results-scroller").position().top;
            $(".search-results-scroller").css("top", a + (e.bottom - t.bottom))
        }
    } else {
        var s = $(".main-button-holder .item");
        $(".main-button-holder .was-active").length && (s = $(".main-button-holder .was-active")), $(".main-button-holder .selected").length && (s = $(".main-button-holder .selected")), this.select(s)
    }
}, App.Search.unload = function () {
    $(".main").css("background-image", "none")
}, App.User = GWareIPTV.UIBase.User, App.Album = GWareIPTV.UIBase.Album, App.Album.onLoad = function (e) {
    this.album = App.util.getMusicAlbum(this.item.id), this.index = 0, this.reportSent = !1, this.resetPageLayout(e), this.renderMenu([[{
        html: _("Back"),
        data: {"data-fn": "init", "data-page": "Music"}
    }, {
        html: '<span class="ico ico-skip-previous"></span>',
        data: {"data-fn": "prev"}
    }, {
        html: '<span class="ico ico-fast-rewind"></span>',
        data: {"data-fn": "rewind"}
    }, {
        html: '<span class="ico ico-pause"></span>',
        data: {"data-fn": "play"}
    }, {
        html: '<span class="ico ico-fast-forward"></span>',
        data: {"data-fn": "forward"}
    }, {
        html: '<span class="ico ico-skip-next"></span>',
        data: {"data-fn": "next"}
    }, {
        html: '<span class="ico ico-share"></span> ' + _("Social Share"),
        data: {"data-fn": "fbShare", "data-title": this.album.name, "data-type": "album", "data-id": this.album.id}
    }]]), $(".channel img").attr("src", this.album.poster), $(".channel .artist").html(this.album.artist), $(".channel .name").html(this.album.name), $(".channel .description").html(this.album.description);
    var a = [], s = GWareBase64.encode(JSON.stringify(this.album.ppv));
    this.album.songs.forEach(function (e, t) {
        a[t] || (a[t] = []), a[t].push({
            html: '<div class="span1">' + (t + 1) + '.</div><div class="span8">' + e.name + '</div><div class="span3 time"></div>',
            data: {
                "data-fn": "ppvValidate",
                "data-ppv": s,
                "data-index": t,
                "data-next": GWareBase64.encode(JSON.stringify({"data-index": t, "data-fn": "loadTrack"}))
            },
            cls: "row-fluid"
        })
    }), App.reports.set({
        type: 16,
        name: this.album.name,
        id: this.album.id
    }), this.renderPlaylist(a), this.album.ppv.enabled || this.loadTrack(), this.fnBack = "Music", this.enableMenu("Music")
}, App.Music = GWareIPTV.UIBase.Music, App.Music.renderMenu = function (e) {
    this.makeZone({
        rows: e.matrix("horizontal"),
        selector: ".sub-menu",
        selection: "metro",
        scroller: {width: "auto", height: "100%"}
    })
}, App.Music.renderCategory = function (e) {
    this.makeZone({
        rows: e,
        selector: ".albums",
        selection: "border",
        stretchImages: !0,
        scroller: {width: "auto", height: "100%"}
    })
}, App.Music.loadCategory = function (e) {
    this.albums = App.util.getMusicAlbums(e.id);
    var t = [[], [], []], a = 0, s = this.optimalSize({selector: ".albums", type: "square", rows: 3}),
        i = Math.ceil(this.albums.length / 3);
    if (0 !== this.albums.length) {
        for (var n = 0; n < this.albums.length; n++) {
            var r = this.albums[n], o = App.util.createCoverIcons({id: r.id, type: "album", icons: ["purchase"]});
            t[a].push({
                html: '<img src="' + r.poster + '" />' + o,
                data: {"data-id": r.id, "data-fn": "init", "data-page": "Album"},
                style: {width: s.item.width, height: s.item.height}
            }), (n + 1) % i == 0 && (a += 1)
        }
        this.renderCategory(t), $(".sub-menu .item").each(function () {
            $(this).removeClass("selected")
        }), $('.sub-menu .item[data-id="' + e.id + '"]').addClass("selected"), App.reports.set({
            type: 17,
            name: e.name,
            id: e.id
        })
    } else $(".stores-holder .nav,.stores-holder .albums").html('<p class="empty">' + _("There are no albums in this category") + "</div>")
}, App.Music.optimalSize = function (e) {
    var t = GWareConfig.resourceAspectRatio[e.type], a = $(e.selector), s = Math.floor(a.height() / e.rows),
        i = (s - 10) * t.ratio;
    return App.injectStyle([{
        selector: e.selector + ".hot-zone .scroller .row",
        style: {height: s - 10 + "px"}
    }]), {item: {width: i, height: s - 10}}
}, App.Advertisement = GWareIPTV.UIBase.Advertisement, App.SeriesBrowse = GWareIPTV.UIBase.SeriesBrowse, App.SeriesBrowse.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getSeries();
    if (!t) return !1;
    for (var a = 0; a < t.length; a++) this.makeZone({
        rows: t[a],
        selector: ".movies-" + (a + 1),
        selection: "border",
        scroller: {width: "100%", height: "auto"},
        pager: {type: "rows", count: GWareConfig.zoneItemCount}
    });
    this.fnBack = "SeriesStore", this.populateContainer({
        id: $(".movies-1 .scroller .row:first-child .item:first-child")[0].dataset.id,
        storeId: this.item.id
    })
}, App.SeriesBrowse.getSeries = function () {
    this.movieIds = [];
    var e = 0, t = App.util.getSeriesStore(this.item.id),
        a = (this.getOptimalItemSize({selector: ".stores", type: "store"}), 0), s = [[], [], []], i = t.series.length,
        n = Math.ceil(i / 3);
    if (!i) return $(".left .preview").html('<p class="empty">' + _("This category is empty") + "</p>"), !1;
    for (var r = 0; r < i; r++) {
        var o = t.series[r],
            p = App.history.hasWatchedSeries(o.id) ? '<div class="watched"><span class="ico ico-done"></span></div>' : "";
        s[e][a] || (s[e][a] = []), s[e][a].push({
            html: '<img src="' + o.seasons[0].poster + '" />' + p,
            data: {
                "data-id": o.id,
                "data-store-id": this.item.id,
                "data-fn": 0 < o.seasons.length ? "populateContainer" : "warn",
                "data-page": 0 < o.seasons.length ? "" : "SeriesBrowse"
            }
        }), (r + 1) % n == 0 ? (e += 1, a = 0) : a++
    }
    return this.enableMenu("SeriesBrowse"), App.reports.set({type: 14}), s
}, App.SeriesBrowse.populateContainer = function (e) {
    var t = App.util.getSerie(parseInt(e.id), parseInt(e.storeId)), a = t.seasons[0], s = t.name,
        i = this.getDescription(a.descriptions);
    $(".left").css({"background-image": "url(" + a.backdrop + ")"}), $(".preview .title").html(s), $(".preview .description").html(i), this.makeZone({
        items: [{
            html: '<div class="button"><span class="btn-text">' + _("WATCH NOW") + '</span><span class="ic"><span class="ico ico-play-arrow"></span></span></div>',
            data: {"data-fn": "init", "data-id": e.id, "data-store-id": e.storeId, "data-page": "SeriesDetail"}
        }], selection: "button", selector: ".watch-now"
    }), this.select($(".content.full.vodbrowse .preview .button-holder .item"))
}, App.SeriesBrowse.getDescription = function (e) {
    for (var t = App.language.current, a = 0; a < e.length; a++) if (e[a].language === t) return e[a].description.limit(256);
    return e[0].description.limit(256)
}, App.SeriesDetail = GWareIPTV.UIBase.SeriesDetail, App.SeriesDetail.keyBack = function () {
    this.item.storeId ? this.pageLoader("SeriesBrowse", "init", {id: this.item.storeId}) : this.pageLoader(App.pageDefault.page)
}, App.SeriesPlayer = GWareIPTV.UIBase.SeriesPlayer, App.SeriesPlayer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyUp: this.share.bind(this),
            keyLeft: this.preselect.bind(this, "rewind", !0),
            keyRight: this.preselect.bind(this, "forward", !0),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.createMenu(), this.reportSent = !1, this.storeId = this.item.storeId, this.serieId = this.item.id, this.serie = App.util.getSerie(this.item.id, this.storeId), this.season = this.item.season, this.episode = this.item.episode, this.item.resume && App.history.add("series", {
        id: this.serie.seasons[this.season].episodes[this.episode].id,
        seasonId: this.serie.seasons[this.season].id,
        seriesId: this.serie.id,
        storeId: this.storeId,
        p: this.item.resume
    }), this.hasChildLock(), this.enableMenu("SeriesBrowse"), $(".content").css({"background-color": "transparent"}), $(document).on("click", ".report", GWareIPTV.UIBase.SeriesPlayer.keyBlue)
}, App.SeriesPlayer.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "bg",
        align: "center",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    })
}, App.SeriesStore = GWareIPTV.UIBase.SeriesStore, App.SeriesStore.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getStores(420);
    t.length ? this.makeZone({
        rows: t,
        selector: ".stores",
        selection: "border",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"}
    }) : $(".main").html('<div><p class="empty">' + _("There are no series stores") + "</p></div>"), this.fnBack = App.pageDefault.page, this.enableMenu("Series")
}, App.SeriesStore.getStores = function (e) {
    var t = 0, a = (this.optimalSize({selector: ".stores-holder", type: "store", rows: 5}), []), s = [];
    App.user.package.serie.forEach(function (e) {
        a.push({
            html: '<img src="' + e.logo + '" />',
            data: {"data-id": e.id, "data-fn": "init", "data-page": "SeriesBrowse"}
        }), 0
    });
    for (var i = Math.ceil(a.length / 5), n = 0; n < a.length; n++) s[t] || (s[t] = []), s[t].push(a[n]), (n + 1) % i == 0 && t++;
    return s
}, App.SeriesStore.optimalSize = function (e) {
    var t = GWareConfig.resourceAspectRatio[e.type], a = $(e.selector), s = Math.floor(a.height() / e.rows),
        i = (s - 10) * t.ratio;
    return App.injectStyle([{
        selector: e.selector + " .hot-zone .scroller .row",
        style: {height: s - 10 + "px"}
    }]), {item: {width: i, height: s - 10}}
}, App.SettingsAbout = GWareIPTV.UIBase.SettingsAbout, App.SettingsAbout.render = function () {
    $(".settings-zone").css({overflow: "visible"}), App.userSettings.renderMenu({
        type: "vertical",
        events: {keyBack: this.keyBack.bind(this)}
    }), App.userSettings.renderOptions({section: "about", brand: ".title", selection: "bg"})
}, App.SettingsAbout.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".main-button-holder .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.SettingsCatchupTV = GWareIPTV.UIBase.SettingsCatchupTV, App.SettingsCatchupTV.render = function () {
    App.userSettings.renderMenu({
        type: "vertical",
        events: {keyBack: this.keyBack.bind(this)}
    }), App.userSettings.renderOptions({section: "catchup"})
}, App.SettingsCatchupTV.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".main-button-holder .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.SettingsDisclaimer = GWareIPTV.UIBase.SettingsDisclaimer, App.SettingsGeneral = GWareIPTV.UIBase.SettingsGeneral, App.SettingsGeneral.render = function () {
    App.userSettings.renderMenu({
        type: "vertical",
        events: {keyBack: this.keyBack.bind(this)}
    }), App.userSettings.renderOptions({section: "general", callback: "refresh"})
}, App.SettingsGeneral.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".main-button-holder .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.SettingsLanguages = GWareIPTV.UIBase.SettingsLanguages, App.SettingsLanguages.render = function () {
    App.userSettings.renderMenu({
        type: "vertical",
        events: {keyBack: this.keyBack.bind(this)}
    }), App.userSettings.renderOptions({section: "languages", callback: "refresh"})
}, App.SettingsLanguages.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".main-button-holder .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.SettingsScreenSaver = GWareIPTV.UIBase.SettingsScreenSaver, App.SettingsScreenSaver.render = function () {
    App.userSettings.renderMenu({
        type: "vertical",
        events: {keyBack: this.keyBack.bind(this)}
    }), App.userSettings.renderOptions({section: "screensaver", callback: "restart"})
}, App.SettingsScreenSaver.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".main-button-holder .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.SettingsSpeedTest = GWareIPTV.UIBase.SettingsSpeedTest, App.SettingsSpeedTest.render = function () {
    App.userSettings.renderMenu({
        type: "vertical",
        events: {keyBack: this.keyBack.bind(this)}
    }), this.makeZone({
        rows: [{
            html: _("Start test"),
            data: {"data-fn": "start"},
            style: {width: $(".controls").width() + "px"}
        }].matrix("horizontal"), selector: ".controls", selection: "bg"
    }), this.select($(".controls .row:first .item:first"))
}, App.SettingsSpeedTest.keyBack = function (e) {
    e && e.preventDefault();
    var t = this.object.parents(".hot-zone");
    return t.hasClass("controls") ? (this.object = $(".settings-menu .item").first(), void this.select()) : t.hasClass("settings-menu") ? (this.object = $(".main-button-holder .item").first(), void this.select()) : void this.pageLoader(App.pageDefault.page)
}, App.SettingsSupport = GWareIPTV.UIBase.SettingsSupport, App.SettingsSupport.render = function () {
    App.userSettings.renderMenu({
        type: "vertical",
        events: {keyBack: this.keyBack.bind(this)}
    }), App.userSettings.renderOptions({section: "support", brand: ".title"})
}, App.SettingsSupport.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".main-button-holder .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.CatchUpHome = GWareIPTV.UIBase.CatchUpHome, App.CatchUp = GWareIPTV.UIBase.CatchUp, App.CatchUp.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.timerError = null, this.pausedTS = null, this.programme = {
        start_p: 0,
        end_p: 0
    }, this.makeZone({
        rows: [[{html: "&nbsp;", style: {width: window.innerWidth, height: window.innerHeight}}]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind", !0),
            keyRight: this.preselect.bind(this, "forward", !0),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-skip-previous"></span>',
            data: {"data-fn": "skipPrev"}
        }, {
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {
            html: '<span class="ico ico-fast-forward"></span>',
            data: {"data-fn": "forward"}
        }, {html: '<span class="ico ico-skip-next"></span>', data: {"data-fn": "skipNext"}}]],
        selector: ".sub-menu",
        selection: "bg",
        align: "center",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), this.item.ts || (this.item.ts = this.item.start), this.channel = App.util.getChannelData(this.item.id), this.skipInterval = 60, this.reload(!0);
    var t = App.epg.getProgrammeByTime(this.channel.id);
    this.programme.start_p = t.ut_start, this.programme.end_p = t.ut_end, this.item.report || (lg("catchup > start report action as catchup"), App.reports.set({
        type: this.item.report_action ? this.item.report_action : 5,
        name: this.channel.name,
        id: this.channel.id,
        epg: t.name
    })), App.player.setup({
        url: this.url, secure: this.channel.secure, events: {
            complete: function () {
            }, time: function (e) {
                30 < e.position && !this.reportSent && (this.report($(".panel-middle .title").text()), this.reportSent = !0)
            }.bind(this), play: function () {
                this.timerError && window.clearTimeout(this.timerError)
            }.bind(this), error: function (e) {
                lg("catchup > error event fired", "error"), lg(e)
            }.bind(this), ready: function () {
                App.player.play(), this.isPaused = !1, this.preselect("play"), App.timer({key: "catchup-playback"})
            }.bind(this)
        }
    }), this.timeline(), this.timerTimeline = window.setInterval(this.timeline.bind(this), 500), this.fnBack = "TV"
}, App.FavoriteManager = GWareIPTV.UIBase.FavoriteManager, App.FavoriteManager.onLoad = function (e) {
    this.resetPageLayout(e), this.selected = {left: [], right: []};
    for (var t = App.user.package.tv.group.length, a = null, s = [], i = 0; i < t; i++) a = App.user.package.tv.group[i], s.push({
        html: a.name,
        data: {"data-fn-select": "loadChannels", "data-id": a.id}
    });
    this.makeZone({
        rows: [s],
        selector: ".groups",
        selection: "bg",
        scroller: {width: "auto", height: "100%"}
    }), this.select($(".groups .item:first-child")), this.renderFavorites(), this.registerEvents(), this.fnBack = "TV", this.enableMenu("TV"), App.reports.set({type: 3})
}, App.FavoriteManager.keyBack = function (e) {
    e && e.preventDefault();
    var t = this.object.parents(".hot-zone");
    if (t.hasClass("channels") || t.hasClass("favorites") || t.hasClass("groups")) return this.object = $(".button-holder .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.Recording = GWareIPTV.UIBase.Recording, App.Recording.renderMenu = function () {
    this.resetPageLayout(this.html);
    var e = [];
    App.user.device.canRecord && e.push({
        html: _("Local"),
        data: {"data-fn": "changeType", "data-type": "local"}
    }), App.cloudPVR.enabled && e.push({
        html: _("Cloud"),
        data: {"data-fn": "changeType", "data-type": "cloud"}
    }), this.makeZone({
        rows: [e],
        selector: ".sub-menu",
        selection: "metro",
        scroller: {width: "auto", height: "100%"}
    }), this.type || (this.type = $(".sub-menu .row .item:first-child").attr("data-type")), lg("recordings > rendering type [" + this.type + "]"), $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-type="' + this.type + '"]').addClass("selected")
}, App.Recording.renderZone = function (e) {
    for (var t = 0; t < e.length; t++) this.makeZone({
        rows: e[t],
        selector: ".clips-" + (t + 1),
        selection: "border",
        scroller: {width: "100%", height: "auto"}
    });
    this.selectItem()
}, App.Recording.build = function (e) {
    for (var t = !1, a = $(".clips").width() - 49, s = .6666 * a, i = [[], []], n = (new Date).getTime() / 1e3, r = 0, o = Math.ceil(e.length / 2), p = 0, l = 0; l < e.length; l++) if (!e[l].deleted && (e[l].ut_end && parseInt(e[l].ut_end) < n || !e[l].ut_end)) {
        var h = this.getData(e[l]);
        i[r][p] || (i[r][p] = []), i[r][p].push({
            html: '<img src="' + h.image + '" />',
            data: {
                "data-dir": h.dir,
                "data-name": h.name,
                "data-title": h.channel + " - " + decodeURI(h.prog),
                "data-url": h.url,
                "data-pvr-id": h.pvr_id,
                "data-back": "Recording"
            },
            style: {width: a, height: s}
        }), l + 1 === o ? (r = 1, p = 0) : p += 1, t = !0
    }
    if (t) return this.renderZone(i), !1;
    lg("recordings > no recordings found"), $(".recordings").html('<p class="empty">' + _("There are no recordings") + "</p>"), App.LS.setupZones()
}, App.Recording.selectItem = function (e) {
    e || (e = $(".clips-1 .scroller .row:nth-child(1) .item:nth-child(1)")[0].dataset), $(".preview .title").html(e.name), $(".preview .description").html(e.title), this.makeZone({
        items: [{
            html: '<div class="button"><span class="btn-text">' + _("WATCH NOW") + '</span><span class="ic"><span class="ico ico-play-arrow"></span></span></div>',
            data: {
                "data-dir": e.dir,
                "data-name": e.name,
                "data-title": e.title,
                "data-url": e.url,
                "data-pvr-id": e.pvr_id,
                "data-back": "Recording"
            }
        }], selection: "button", selector: ".watch-now"
    }), this.select($(".watch-now .item"))
}, App.RecordingPlayer = GWareIPTV.UIBase.RecordingPlayer, App.RecordingPlayer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {keyLeft: this.preselect.bind(this, "rewind"), keyRight: this.preselect.bind(this, "forward")}
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "bg",
        layer: "info",
        align: "center",
        events: {keyBack: this.infoHide.bind(this)}
    }), App.reports.set({
        type: 6,
        name: this.item.title
    }), $(".movie-header .title").html(this.item.title), $(".content").css({"background-color": "transparent"}), this.start(), this.fnBack = this.item.back ? this.item.back : "Recording", this.enableMenu()
}, App.Channel = GWareIPTV.UIBase.Channel, App.TV = GWareIPTV.UIBase.TV, App.TV.onLoad = function (e) {
    this.resetPageLayout(e), this.groupId = null, $(".middle div").css({
        width: $(".middle").height(),
        "margin-left": "40%",
        "line-height": $(".middle").width() / 2 + "px"
    }), $(".middle").css({transform: "skew(15deg)"}), this.makeZone({
        rows: this.loadCategories(),
        selector: ".category-menu",
        selection: "metro"
    }), this.select($('.category-menu .item[data-id="-1"]')), this.enableMenu("TV"), App.reports.set({type: 2})
}, App.TV.listChannels = function (e) {
    if (this.groupId === e.id) return lg("tv home > same group selected, skipping channel listing"), !1;
    lg("tv home > listing channels for group [" + e.id + "]"), this.groupId = e.id;
    var t = this.getChannels(e.id, {
        tile: Math.floor($(".channels").width() / 110),
        list: Math.floor($(".channels").width() / 290)
    });
    if (!t.length) return this.destroyZone($(".channels").attr("id")), $(".channels").html('<p class="empty">' + _("There are no channels in this category") + "</p>"), !1;
    this.makeZone({
        rows: t,
        selector: ".channels",
        selection: "border-sec",
        scroller: {width: "auto", height: "auto"},
        pager: {type: "rows", count: GWareConfig.zoneItemCount}
    }), this.setChannelInfo($(".right-side .channels .row:first-child .item:first-child")[0].dataset), store.set("iptv.channel.group", this.groupId)
}, App.TV.getChannels = function (e, t) {
    var a, s = 0, i = [], n = "", r = null, o = [];
    $(".channels-list-holder").height();
    this.settings = store.get("iptv.channel.list") || {display: "tile", sort: "number"};
    for (var p = 0; p < App.user.package.tv.list.length; p++) r = App.user.package.tv.list[p], n = App.util.createCoverIcons({
        id: r.channel_id,
        type: "channel",
        icons: ["purchas"]
    }), (App.util.channelIsInGroup(r.id, e) || -1 === e) && o.push({
        html: "tile" === this.settings.display ? '<img src="' + r.logo.normal + '" />' + n : "<span>" + r.number + '</span><span><img src="' + r.logo.small + '" /></span><span>' + r.name + "</span>" + n,
        data: {"data-number": r.number, "data-name": r.name, "data-id": r.id}
    });
    "name" === this.settings.sort && o.sort(function (e, t) {
        return e.data["data-name"] < t.data["data-name"] ? -1 : 1
    }), $(".category-menu .item").removeClass("selected"), $('.category-menu .item[data-id="' + e + '"]').addClass("selected"), $(".channels").addClass(this.settings.display), a = o.length;
    for (p = 0; p < a; p++) i[s] || (i[s] = []), i[s].push(o[p]), 0 === Math.fmod(p, Math.ceil(a / 3)) && s++;
    return i
}, App.TV.selectWatch = function () {
    this.select($(".left-side .watch-now .item"))
}, App.TV.setChannelInfo = function (e) {
    var t = App.util.getChannelData(parseInt(e.id)), a = App.epg.getProgrammeByTime(parseInt(e.id));
    $(".channel .logo img").attr("src", t.logo.normal), $(".date").html((new Date).niceDate()), $(".channel .time").html(new Date(1e3 * a.ut_start).niceTime() + " - " + new Date(1e3 * a.ut_end).niceTime()), $(".channel .name").html(a.name), $(".channel .prog-progress").html('<div class="progress"><div class="bar" style="width: ' + a.elapsed + '%" /></div>'), $(".channel .description").html(a.description.limit(128)), this.makeZone({
        items: [{
            html: '<div class="button"><span class="btn-text">' + _("WATCH NOW") + '</span><span class="ic"><span class="ico ico-play-arrow"></span></span></div>',
            data: {"data-fn": "init", "data-page": "Channel", "data-id": e.id}
        }], selector: ".watch-now", selection: "button"
    }), this.checkImages($(".channel"))
},App.TV.keyBack = function (e) {
    e && e.preventDefault();
    var t = this.object.parents(".hot-zone");
    return t.hasClass("channels") ? (this.object = $(".category-menu .item").first(), void this.select()) : t.hasClass("main-menu-button") ? void this.pageLoader(App.pageDefault.page) : (this.object = $(".main-menu-button .item").first(), void this.select())
},App.VODBrowse = GWareIPTV.UIBase.VODBrowse,App.VODBrowse.onLoad = function (e) {
    this.item ? (this.lastId = this.item.id, this.back = this.item.back, this.storeId = this.item.id) : this.storeId = this.lastId, this.store = App.util.getVODStore(this.storeId), this.resetPageLayout(e);
    var a = [{html: _("Back"), data: {"data-fn": "btnBack"}}, {
        html: _("Search"),
        data: {"data-fn": "searchPanelShow"}
    }];
    this.store.categories.forEach(function (e, t) {
        a.push({html: e.name, data: {"data-index": t, "data-fn": "loadCategory"}})
    }), this.makeZone({
        items: a,
        selector: ".sub-menu",
        selection: "metro"
    }), this.select($('.sub-menu .item[data-index="0"]')), this.enableMenu("VOD"), this.fnBack = this.back, this.loadCategory(this.object.data())
},App.VODBrowse.loadCategory = function (e) {
    var t = [[], [], []], a = 0, s = !!this.store.categories[e.index] && this.store.categories[e.index].movies.length,
        i = Math.ceil(s / 3), n = 0;
    if ($(".sub-menu .item").each(function () {
        $(this).removeClass("selected")
    }), $('.sub-menu .item[data-index="' + e.index + '"]').addClass("selected"), this.movieIds = [], !s) return $(".left .preview").html('<p class="empty">' + _("This category is empty") + "</p>"), !1;
    for (var r = 0; r < s; r++) {
        var o = this.store.categories[e.index].movies[r],
            p = App.util.createCoverIcons({id: o.id, type: "movie", icons: ["purchase", "watch"]});
        App.VODBrowse.movieIds.push(o.id), t[a][n] || (t[a][n] = []), t[a][n].push({
            html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + o.poster + '" />' + p,
            data: {"data-id": o.id, "data-fn": "selectItem"}
        }), (r + 1) % i == 0 ? (a += 1, n = 0) : n++
    }
    for (r = 0; r < t.length; r++) this.makeZone({
        rows: t[r],
        selector: ".movies-" + (r + 1),
        selection: "border",
        scroller: {width: "100%", height: "auto"},
        pager: {type: "cols", count: GWareConfig.zoneItemCount}
    });
    App.reports.set({
        type: 10,
        name: this.store.categories[e.index].name,
        id: this.store.categories[e.index].id
    }), this.selectItem({id: $(".movies-1 .scroller .row .item:first-child")[0].dataset.id})
},App.VODBrowse.selectItem = function (e) {
    App.util.getMovieDetails(e.id, this.populateContainer.bind(this))
},App.VODBrowse.populateContainer = function (e) {
    var t = e.name ? e.name : "No Information Available",
        a = e.description ? e.description : "No Information Available";
    $(".left").css({"background-image": "url(" + App.settings.server_location.movie_location + '/images/movies/' + e.backdrop + ")"}), $(".preview .title").html(t), $(".preview .description").html(a.limit(256)), this.makeZone({
        items: [{
            html: '<div class="button"><span class="btn-text">' + _("WATCH NOW") + '</span><span class="ic"><span class="ico ico-play-arrow"></span></span></div>',
            data: {"data-fn": "init", "data-id": e.id, "data-page": "VODDetail"}
        }], selection: "button", selector: ".watch-now"
    }), this.select($(".content.full.vodbrowse .preview .button-holder .item"))
},App.VODDetail = GWareIPTV.UIBase.VODDetail,App.VODDetail.getDescription = function (e) {
    for (var t = 0; t < e.length; t++) if (e[t].language === App.language.current) return e[t].description.limit(256);
    return e.length ? e[0].description.limit(256) : ""
},App.VODDetail.loaded = function (e) {
    this.movie = e, this.ppv = GWareBase64.encode(JSON.stringify({
        enabled: e.is_payperview,
        prices: e.movieprices,
        rule: e.rule_payperview,
        id: e.id,
        name: e.name,
        type: "movie"
    })), this.ppvNext = GWareBase64.encode(JSON.stringify({
        "data-fn": "init",
        "data-page": "VODMovie",
        "data-id": e.id
    })), $(".poster img").attr("src", App.settings.server_location.movie_location + '/images/movies/' + e.poster), $(".title").html(e.name), $(".rating").html(this.rating2stars(e.rating)), $(".description").html(this.getDescription(e.moviedescriptions)), $(".year").html(e.year), $(".language").html(e.language), $(".duration").html(_("{$} minutes", e.length)), $(".actors").html(this.limitActors(e.actors ? e.actors.limit(128) : _("No information available"))), $(".tags").html(this.getTags(e.tags)), this.loadAfter(), this.select($('.sub-menu .item[data-fn="ppvValidate"]')), this.enableMenu(), App.reports.set({
        type: 11,
        name: e.name,
        id: e.id
    })
},App.VODDetail.loadAfter = function () {
    null !== this.movie.backdrop && $("body").css({
        "background-image": 'url("' + App.settings.server_location.movie_location + '/images/movies/' + this.movie.backdrop + '")',
        "background-repeat": "no-repeat",
        "background-size": "cover"
    });
    var e = [{html: _("Previous"), data: {"data-fn": "prev"}}, {
        html: _("Back"),
        data: {"data-fn": "btnBack"}
    }, {
        html: '<div class="button"><span class="btn-text">' + _("Watch Trailer") + '</span><span class="ic"><span class="ico ico-play-arrow"></span></span></div>',
        data: {
            "data-fn": "init",
            "data-page": "VODTrailer",
            "data-name": this.movie.name,
            "data-length": this.movie.length,
            "data-url": this.movie.trailer_url
        }
    }, {
        html: '<div class="button"><span class="btn-text">' + _("Watch Now") + '</span><span class="ic"><span class="ico ico-play-arrow"></span></span></div>',
        data: {"data-fn": "ppvValidate", "data-ppv": this.ppv, "data-next": this.ppvNext}
    }, {
        html: '<span class="ico ico-share"></span> ' + _("Social Share"),
        data: {"data-fn": "fbShare", "data-title": this.movie.name, "data-type": "movie", "data-id": this.movie.id}
    }, {html: _("Next"), data: {"data-fn": "next"}}];
    void 0 !== App.VODBrowse && void 0 !== App.VODBrowse.movieIds || (e.pop(), e.shift(), this.fnBack = "Home"), this.makeZone({
        rows: [e],
        selector: ".sub-menu",
        selection: "button"
    })
},App.VOD = GWareIPTV.UIBase.VOD,App.VOD.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = 0, a = this.optimalSize({selector: ".stores-holder", type: "store", rows: 5}), s = [], i = [];
    if (App.user.package.movie.forEach(function (e) {
        if (e.isMain) {
            var t = null;
            t = 0 === e.categories.length && 0 === e.subs.length ? {
                "data-fn": "warn",
                "data-image": e.logo
            } : {
                "data-id": e.id,
                "data-fn": "init",
                "data-back": "VOD",
                "data-image": e.logo,
                "data-page": 0 === e.subs.length ? "VODBrowse" : "VODSub"
            }, s.push({
                html: '<img src="' + e.logo + '" />',
                data: t,
                style: {width: a.item.width, height: a.item.height}
            }), 0
        }
    }), s.length) {
        for (var n = Math.ceil(s.length / 5), r = 0; r < s.length; r++) i[t] || (i[t] = []), i[t].push(s[r]), (r + 1) % n == 0 && t++;
        this.makeZone({
            rows: i,
            selector: ".stores",
            selection: "border",
            stretchImages: !0,
            scroller: {width: "auto", height: "100%"}
        }), this.select($(".stores .scroller .row:nth-child(1) .item:nth-child(1)"))
    } else $(".main").html('<div><p class="empty">' + _("There are no movie stores") + "</p></div>");
    this.fnBack = App.pageDefault.page, this.enableMenu("VOD"), App.reports.set({type: 9})
},App.VOD.optimalSize = function (e) {
    var t = GWareConfig.resourceAspectRatio[e.type], a = $(e.selector), s = Math.floor(a.height() / e.rows),
        i = (s - 10) * t.ratio;
    return App.injectStyle([{
        selector: e.selector + " .hot-zone .scroller .row",
        style: {height: s - 10 + "px"}
    }]), {item: {width: i, height: s - 10}}
},App.VODMovie = GWareIPTV.UIBase.VODMovie,App.VODMovie.loaded = function (e) {
    this.makeZone({
        rows: [[{html: "&nbsp;", style: {width: window.innerWidth, height: window.innerHeight}}]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind", !0),
            keyRight: this.preselect.bind(this, "forward", !0),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.createMenu(), this.movie = e, $(".movie-header .title").html(this.movie.name), $(".progress-holder .duration").html(Math.floor(this.movie.length / 60) + " h " + Math.floor(this.movie.length % 60) + " mins"), $(".content").css({"background-color": "transparent"}), this.fnBack = this.item.back ? this.item.back : "VODDetail", this.reportSent = !1, this.hasChildLock(), this.enableMenu(), $(document).on("click", ".report", GWareIPTV.UIBase.VODMovie.keyBlue)
},App.VODMovie.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "bg",
        align: "center",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    })
},App.VODSub = GWareIPTV.UIBase.VODSub,App.VODSub.onLoad = function (e) {
    this.item ? (this.lastId = this.item.id, this.storeId = this.item.id) : this.storeId = this.lastId, this.resetPageLayout(e);
    var t = 0, a = this.optimalSize({selector: ".stores-holder", type: "store", rows: 5}), s = [], i = [], n = [],
        r = App.util.getVODStore(this.storeId);
    this.updateToken(r.name);
    for (var o = 0; o < r.subs.length; o++) n.push(App.util.getVODStore(r.subs[o]));
    for (o = 0; o < r.subs.length; o++) {
        var p = null;
        p = 0 === r.subs.length ? {"data-fn": "warn", "data-image": r.logo} : {
            "data-id": n[o].id,
            "data-fn": "init",
            "data-back": "VOD",
            "data-image": n[o].logo,
            "data-page": 0 === n[o].subs.length ? "VODBrowse" : "VODSub"
        }, s.push({
            html: '<img src="' + n[o].logo + '" />',
            data: p,
            style: {width: a.item.width, height: a.item.height}
        }), 0
    }
    if (s.length) {
        var l = Math.ceil(s.length / 5);
        for (o = 0; o < s.length; o++) i[t] || (i[t] = []), i[t].push(s[o]), (o + 1) % l == 0 && t++;
        this.makeZone({
            rows: i,
            selector: ".stores",
            selection: "border",
            stretchImages: !0,
            scroller: {width: "auto", height: "100%"}
        }), this.select($(".stores .scroller .row:nth-child(1) .item:nth-child(1)"))
    } else $(".main").html('<div><p class="empty">' + _("There are no movie stores") + "</p></div>");
    this.enableMenu("VOD"), this.fnBack = "VOD", this.render(), App.reports.set({
        type: 9,
        name: r.name,
        id: r.id
    }), App.reports.set({type: 9})
},App.VODSub.optimalSize = function (e) {
    var t = GWareConfig.resourceAspectRatio[e.type], a = $(e.selector), s = Math.floor(a.height() / e.rows),
        i = (s - 10) * t.ratio;
    return App.injectStyle([{
        selector: e.selector + " .hot-zone .scroller .row",
        style: {height: s - 10 + "px"}
    }]), {item: {width: i, height: s - 10}}
},App.VODSub.render = function () {
    this.makeZone({items: [{html: _("Back"), data: {"data-fn": "btnBack"}}], selector: ".sub-menu", selection: "metro"})
},App.VODSub.updateToken = function (e) {
    $(".pageName span").attr("data-token", e)
},App.VODTrailer = GWareIPTV.UIBase.VODTrailer,App.VODTrailer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind"),
            keyRight: this.preselect.bind(this, "forward"),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "bg",
        align: "center",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), $(".movie-header .title").html(this.item.name), App.player.setup({
        url: this.item.url,
        events: {
            complete: function () {
                this.pageLoader(this.fnBack)
            }.bind(this), time: function (e) {
                $(".progress-holder .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function () {
                pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), this.fnBack = "VODDetail", App.reports.set({
        type: 12,
        name: this.item.name
    }), $(".content").css({"background-color": "transparent"})
},App.Youtube = GWareIPTV.UIBase.Youtube,App.Youtube.loaded = function () {
    var e = null, t = [];
    this.resetPageLayout(this.html), t.push({html: _("Search"), data: {"data-fn": "searchPanelShow"}});
    for (var a = 0; a < this.categories.length; a++) "Music" !== (e = this.categories[a]).name && t.push({
        html: e.name,
        data: {"data-id": e.id, "data-channel-id": e.channelId, "data-name": e.name, "data-fn": "loadCategory"}
    });
    this.makeZone({
        items: t,
        selector: ".sub-menu",
        selection: "metro"
    }), App.reports.set({type: 19}), this.fnBack = App.pageDefault.page, this.enableMenu("Youtube"), this.select($(".sub-menu .item:nth-child(2)")), this.loadCategory(this.object.data())
},App.Youtube.loadCategory = function (e) {
    var l = this;
    $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-id="' + e.id + '"]').addClass("selected"), this.loading($(".clips")), this.videos = [], xhr({
        url: "https://www.googleapis.com/youtube/v3/videos?part=snippet&maxResults=50&chart=mostPopular&videoCategoryId=" + e.id + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var s = [[], []], i = $(".clips").width() - 49, n = .6666 * i, r = 0, t = e.items.length,
                o = Math.ceil(t / 2), p = 0;
            e.items.forEach(function (e, t) {
                var a = "";
                e.snippet.thumbnails && (a = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url), l.videos.push({
                    id: e.id,
                    image: a,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), s[r][p] || (s[r][p] = []), s[r][p].push({
                    html: '<img src="' + a + '" />',
                    data: {
                        "data-index": t,
                        "data-fn": "selectItem",
                        "data-title": e.snippet.title,
                        "data-desc": e.snippet.description,
                        "data-back": "Youtube"
                    },
                    style: {height: n, width: i, margin: "0px auto", display: "block"}
                }), t + 1 === o ? (r = 1, p = 0) : p += 1
            });
            for (var a = 0; a < s.length; a++) l.makeZone({
                rows: s[a],
                selector: ".clips-" + (a + 1),
                selection: "border",
                scroller: {width: "100%", height: "auto"},
                chunkSize: 64
            });
            l.object = $(".clips-1 .scroller .row:nth-child(1) .item:nth-child(1)"), l.select(), l.selectItem()
        },
        error: function () {
            l.notification("An error occured, please try again later")
        }
    })
},App.Youtube.selectItem = function (e) {
    e || (e = $(".clips-1 .scroller .row:nth-child(1) .item:nth-child(1)")[0].dataset), $(".preview .title").html(e.title), $(".preview .description").html(e.desc.limit(128)), this.makeZone({
        items: [{
            html: '<div class="button"><span class="btn-text">' + _("WATCH NOW") + '</span><span class="ic"><span class="ico ico-play-arrow"></span></span></div>',
            data: {
                "data-index": e.index,
                "data-fn": "init",
                "data-page": "YoutubePlayer",
                "data-title": e.title,
                "data-desc": e.desc,
                "data-back": "Youtube"
            }
        }], selection: "button", selector: ".watch-now"
    }), this.select($(".watch-now .scroller .item"))
},App.Youtube.searchPanelGo = function () {
    var l = this, e = $('input[name="term"]').val().toLowerCase();
    "" !== e && ($(".clips").html('<div class="spinner-holder"><span class="text">Loading</span><div class="loader"></div></div>'), this.videos = [], xhr({
        url: "https:///www.googleapis.com/youtube/v3/search?part=snippet&maxResults=50&q=" + e + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var s = [[], []], i = $(".clips").width() - 49, n = .6666 * i, r = 0, t = e.items.length,
                o = Math.ceil(t / 2), p = 0;
            l.searchPanelHide(), e.items.forEach(function (e, t) {
                var a = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url;
                l.videos.push({
                    id: e.id.videoId,
                    image: a,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), s[r][p] || (s[r][p] = []), s[r][p].push({
                    html: '<img src="' + a + '" />',
                    data: {
                        "data-index": t,
                        "data-fn": "selectItem",
                        "data-title": e.snippet.title,
                        "data-desc": e.snippet.description,
                        "data-back": "Youtube"
                    },
                    style: {height: n, width: i, margin: "0px auto", display: "block"}
                }), t + 1 === o ? (r = 1, p = 0) : p += 1
            });
            for (var a = 0; a < s.length; a++) l.makeZone({
                rows: s[a],
                selector: ".clips-" + (a + 1),
                selection: "border",
                scroller: {width: "100%", height: "auto"},
                chunkSize: 64
            });
            l.object = $(".clips-1 .scroller .row:nth-child(1) .item:nth-child(1)"), l.select(), l.selectItem()
        }
    }))
},App.YoutubePlayer = GWareIPTV.UIBase.YoutubePlayer,App.YoutubePlayer.reload = function () {
    var e = this.index < this.videos.length - 1 ? this.index + 1 : 0,
        t = 0 < this.index ? this.index - 1 : this.videos.length - 1;
    lg("youtube > calling api [" + App.baseURL.nodeBQ + "youtube/get?id=" + this.videos[this.index].id + "]"), xhr({
        url: App.baseURL.nodeBQ + "youtube/get", data: {id: this.videos[this.index].id}, error: function () {
            lg("youtube > failed to call node api"), pp({
                message: _("Stream is not available at this moment"),
                buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
            })
        }.bind(this), success: function (e) {
            if (e.error) return lg("youtube > api response [" + e.error + "]"), pp({
                message: _("Stream is not available at this moment"),
                buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
            }), !1;
            App.reports.set({
                type: 18,
                name: this.videos[this.index].title
            }), App.player.setup({
                url: this.selectStreamQuality(e.sources), events: {
                    complete: function () {
                        this.next()
                    }.bind(this), time: function (e) {
                        $(".info .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
                    }, error: function (e) {
                        lg(e), pp({
                            message: _("Stream is not available at this moment"),
                            buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                        })
                    }, ready: function () {
                        App.player.play()
                    }
                }
            })
        }.bind(this)
    }), "left" === this.lastSwipe && ($(".panel-left, .panel-middle").remove(), $(".panel-right").addClass("panel-middle").removeClass("panel-right").css("left", "0")), "right" === this.lastSwipe && ($(".panel-right, .panel-middle").remove(), $(".panel-left").addClass("panel-middle").removeClass("panel-left").css("left", "0")), $(".info").prepend(this.clonePanel("left")).append(this.clonePanel("right")), $(".panel-left").attr("data-index", t), $(".panel-right").attr("data-index", e), $(".panel-middle").attr("data-index", this.index), $(".panel-left .sub-menu, .panel-right .sub-menu").html(""), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".panel-middle .sub-menu",
        selection: "bg",
        align: "center",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), this.infoUpdate(), this.preselect("play")
};
