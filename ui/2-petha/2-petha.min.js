GWareIPTV.UIPrototype.prototype.updateTime = function () {
    $(".header .right .time").html('<span class="ico ico-access-time" />' + (new Date).niceTime())
}, GWareIPTV.UIPrototype.prototype.updateWeather = function () {
}, GWareIPTV.UIPrototype.prototype.resetPageLayout = function (e, t) {
    $(".header").css("display", t ? "none" : "flex"), $(".main").css({
        width: t ? window.innerWidth : window.innerWidth - 310,
        height: t || "mobile" === App.user.device.category ? window.innerHeight : window.innerHeight - 100
    }), $(".footer").css({
        display: t ? "none" : "inline-block",
        height: "mobile" === App.user.device.category ? window.innerHeight : window.innerHeight - 100
    }), $(".ui").css("background-color", t ? "transparent" : "rgba(21, 26, 33, 0)"), e && $(".main").html(e), this.isPlayerPage = this.playerPages.hasValue(this.name), this.setupHoverMenu(t)
}, GWareIPTV.UIPrototype.prototype.setupFrame = function () {
    this.setupMenuFrame({selection: "bg", vertical: !0, type: "text", preType: "text", perRow: !1})
}, GWareIPTV.UIPrototype.prototype.loadCustomStyles = function () {
    var e = App.hex2rgb(App.settings.style.highlight.primary),
        t = [{selector: "body", style: {"font-size": App.getFontSize()}}, {
            selector: ".item.selected",
            style: {"background-color": App.settings.style.highlight.secondary}
        }, {
            selector: ".selection.selection-bg",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".selection.selection-border",
            style: {"border-color": App.settings.style.highlight.primary}
        }, {
            selector: ".bg-border.hot-zone .scroller .row .item.active",
            style: {
                "background-color": App.settings.style.highlight.primary,
                "border-color": App.settings.style.highlight.primary
            }
        }, {
            selector: ".epg .programmes .timeline",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".epg .programmes .timeline:before",
            style: {"border-top-color": App.settings.style.highlight.primary}
        }, {
            selector: ".epg .programmes .timeline:after",
            style: {"border-bottom-color": App.settings.style.highlight.primary}
        }, {
            selector: ".metro-news-date",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".hover-menu .btn",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".progress .bar",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".progress",
            style: {"background-color": App.settings.style.highlight.secondary}
        }, {
            selector: ".timebar .line",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .cursor",
            style: {"border-bottom": "10px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .tick",
            style: {"border-left": "3px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".ad-placeholder",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".progress .handle",
            style: {"background-color": "rgba(" + e.r + ", " + e.g + ", " + e.b + ", 0.5)"}
        }, {selector: ".progress .handle .dot", style: {"background-color": App.settings.style.highlight.primary}}];
    App.injectStyle(t)
}, GWareIPTV.UIPrototype.prototype.getZone = function () {
    return this.object.parents(".hot-zone").attr("class")
}, App.Apps = GWareIPTV.UIBase.Apps, App.EPGh = GWareIPTV.UIBase.EPGh, App.EPGh.renderExtra = function () {
    $(".main").css("width", "100%"), $(".footer").css("display", "none")
}, App.EPGh.buildChannelItemHTML = function (e) {
    return '<div class="ch"><img src="' + e.logo + '" /><span class="number">' + e.number + '</span><span class="name">' + e.name + "</span></div>"
}, App.EPGh.unload = function () {
    this.clearTimer(), $(".footer").css("display", "inline-block"), $(".main").css("width", "calc(100% - 310px)")
}, App.EPGv = GWareIPTV.UIBase.EPGv, App.EPGv.loaded = function () {
    var e = 0, t = [], s = App.epg[App.epg.viewDate];
    for (var i in this.resetPageLayout(this.html), this.resetEvents(), this.enableMenu("startEPG"), s) t[e] || (t[e] = []), t[e].push({
        html: '<img src="' + s[i].logo + '" /><div class="number">' + s[i].number + '</div><div class="name">' + s[i].name + "</div>",
        data: {"data-id": i}
    }), e++;
    this.makeZone({
        rows: t,
        selector: ".channels",
        selection: "bg",
        scroller: {width: "100%", height: "auto"}
    }), this.object = App.epg.viewChannelId ? $('.channels .item[data-id="' + App.epg.viewChannelId + '"]') : $(".channels .item:first-child"), this.select(), $(".control.date").html(App.epg.isToday(App.epg.viewDate)), this.loadProgrammes(this.object.data())
}, App.EPGv.buildProgrammes = function (n) {
    var p = [];
    return n.data.forEach(function (e, t) {
        var s, i = new Date(1e3 * e.ut_start), r = new Date(1e3 * e.ut_end), o = this.buildEPGData(n, e),
            a = this.elapsed(i, r);
        s = null !== e.progimg ? '<div class="description progimg"><img src="' + e.progimg + '"></div>' : "", p[t] || (p[t] = []), p[t].push({
            html: '<div class="row-fluid"><div class="span3">' + i.niceTime() + '</div><div class="span9">' + o.icon + '<span class="title">' + e.progname + "</span></div></div>" + s + '<div class="description">' + e.progdesc + '</div><div class="progress"><div class="bar" style="width:' + a + '%"></div></div>',
            data: o.data
        }), null === e.progimg && $(".description.progimg").css({visibility: "hidden !important"})
    }.bind(this)), p
}, App.HomeHOTEL = GWareIPTV.UIBase.HomeHOTEL, App.Home = GWareIPTV.UIBase.Home, App.Home.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home"), App.metro._fetch(this.renderMetro.bind(this)), this.fromPage = null
}, App.Home.renderMetro = function () {
    var r = [], t = [], s = [];
    App.metro.movies.forEach(function (e, t) {
        var s = App.util.createCoverIcons({id: e.id, type: "movie", icons: ["purchase", "watch"]}), i = {};
        i = 0 === Math.fmod(t, 5) ? {
            html: '<div class="overlay"></div><div class="title">' + e.name + '</div><div class="description">' + e.description + "</div>" + s,
            data: {"data-id": e.id, "data-fn": "init", "data-page": "VODDetail"},
            style: {"background-image": "url(" + App.settings.server_location.movie_location + '/images/movies/' + e.backdrop + ")", width: "500px"}
        } : {
            html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/'+ e.poster + '" />' + s,
            data: {"data-id": e.id, "data-fn": "init", "data-page": "VODDetail"}
        }, r.push(i)
    }), App.metro.series.forEach(function (e) {
        t.push({
            html: '<img src="' + App.settings.server_location.serie_location + '/images/series/'+ e.poster + '" />',
            data: {
                "data-id": e.vod_id,
                "data-page": "SeriesDetail",
                "data-store-id": App.util.getStoreIdBySerieId(e.vod_id),
                "data-fn": "init"
            }
        })
    }), App.metro.tv.forEach(function (e) {
        var t = App.util.createCoverIcons({id: e.channel_id, type: "channel", icons: ["purchase"]});
        s.push({
            html: '<img src="' + App.settings.server_location.channel_location + '/images/channels/' + e.channel_image + '" />' + t,
            data: {"data-fn": "init", "data-page": "Channel", "data-id": e.channel_id}
        })
    }), this.makeZone({items: r, selector: ".movies", selection: "border"}), this.makeZone({
        items: t,
        selector: ".series",
        selection: "border",
        stretchImages: !0
    }), this.makeZone({
        items: s,
        selector: ".channels",
        selection: "border"
    }), $(".movies-holder img, .series-holder img, .channels-holder img").waitForImages(function () {
        App.showPage()
    })
}, App.HomePLAYER = GWareIPTV.UIBase.HomePLAYER, App.HomeTV = GWareIPTV.UIBase.HomeTV, App.HomeVOD = GWareIPTV.UIBase.HomeVOD, App.Offline = GWareIPTV.UIBase.Offline, App.Search = GWareIPTV.UIBase.Search, App.User = GWareIPTV.UIBase.User, App.Album = GWareIPTV.UIBase.Album, App.Music = GWareIPTV.UIBase.Music, App.Music.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = [{html: _("Search"), data: {"data-fn": "searchPanelShow"}}], s = [];
    this.makeZone({items: t, selector: ".sub-menu", selection: "bg"});
    for (var i = 0, r = 0; r < App.user.package.music.length; r++) {
        var o = App.user.package.music[r], a = (e = "", []);
        e = '<div class="movies-holder row-block" data-index="' + r + '"><div class="row-label">' + o.name + '</div><div class="row-content"><div class="movies m-' + r + '"></div></div></div>', $(".store").append(e), $('.store .row-block[data-index="' + r + '"]').css("top", i), i += $(".row-block").outerHeight() + 10, s = $.merge(s, App.util.getMusicAlbums(o.id)), o.albums.forEach(function (e) {
            a.push({
                html: '<img src="' + e.poster + '" />',
                data: {
                    "data-id": e.id,
                    "data-fn": "init",
                    "data-name": e.name,
                    "data-artist": e.artist,
                    "data-description": e.description,
                    "data-page": "Album"
                },
                style: {width: $(".row-content").height()}
            })
        }), this.makeZone({
            items: a,
            selector: '.store .row-block[data-index="' + r + '"] .movies',
            selection: "border",
            events: {
                keyUp: function () {
                    this.shouldRotate(0) && this.moveRowDown(), App.LS.run("up"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
                }, keyDown: function () {
                    this.shouldRotate(1) && this.moveRowUp(), App.LS.run("down"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
                }, keyBack: function () {
                    this.object = $(".sub-menu .item:first-child"), this.select()
                }
            }
        })
    }
    this.albums = s, this.object = $(".store .row-block:first-child .movies .item:first-child"), this.select(), this.enableMenu("Music")
}, App.Music.shouldRotate = function (e) {
    if (-1 === this.getZone().indexOf("movies")) return !1;
    var t = this.object.parents(".row-block"), s = parseInt(t.position().top, 10);
    return e * ($(".store .row-block").height() + 10) === s
}, App.Music.moveRowUp = function () {
    $(".store .row-block").each(function () {
        var e = $(this).position().top, t = $(this).height() + 10;
        e = t <= e ? e - t : t * ($(".store .row-block").length - 1), $(this).css("top", e)
    }), App.LS.setupZones()
}, App.Music.moveRowDown = function () {
    $(".store .row-block").each(function () {
        var e = $(this).position().top, t = $(this).height() + 10;
        e = e < t * ($(".store .row-block").length - 1) ? e + t : 0, $(this).css("top", e)
    }), App.LS.setupZones()
}, App.Advertisement = GWareIPTV.UIBase.Advertisement, App.SeriesBrowse = GWareIPTV.UIBase.SeriesBrowse, App.SeriesBrowse.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getSeries(310);
    if (!t.length) return !1;
    this.makeZone({
        rows: t,
        selector: ".stores",
        selection: "border",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        pager: {type: "rows", count: MWareConfig.zoneItemCount},
        align: "center"
    })
}, App.SeriesDetail = GWareIPTV.UIBase.SeriesDetail, App.SeriesPlayer = GWareIPTV.UIBase.SeriesPlayer, App.SeriesStore = GWareIPTV.UIBase.SeriesStore, App.SettingsAbout = GWareIPTV.UIBase.SettingsAbout, App.SettingsAbout.render = function () {
    App.userSettings.renderMenu({type: "vertical"}), App.userSettings.renderOptions({section: "about", brand: ".title"})
}, App.SettingsCatchupTV = GWareIPTV.UIBase.SettingsCatchupTV, App.SettingsCatchupTV.render = function () {
    App.userSettings.renderMenu({type: "vertical"}), App.userSettings.renderOptions({
        section: "catchup",
        brand: ".title"
    })
}, App.SettingsDisclaimer = GWareIPTV.UIBase.SettingsDisclaimer, App.SettingsDisclaimer.render = function () {
    App.userSettings.renderMenu({type: "vertical"})
}, App.SettingsGeneral = GWareIPTV.UIBase.SettingsGeneral, App.SettingsGeneral.render = function () {
    App.userSettings.renderMenu({type: "vertical"}), App.userSettings.renderOptions({
        section: "general",
        brand: ".title"
    })
}, App.SettingsLanguages = GWareIPTV.UIBase.SettingsLanguages, App.SettingsLanguages.render = function () {
    App.userSettings.renderMenu({type: "vertical"}), App.userSettings.renderOptions({
        section: "languages",
        brand: ".title"
    })
}, App.SettingsScreenSaver = GWareIPTV.UIBase.SettingsScreenSaver, App.SettingsScreenSaver.render = function () {
    App.userSettings.renderMenu({type: "vertical"}), App.userSettings.renderOptions({
        section: "screensaver",
        brand: ".title"
    })
}, App.SettingsSpeedTest = GWareIPTV.UIBase.SettingsSpeedTest, App.SettingsSpeedTest.render = function () {
    App.userSettings.renderMenu({type: "vertical"}), this.makeZone({
        rows: [{
            html: _("Start test"),
            data: {"data-fn": "start"},
            style: {width: $(".controls").width() + "px"}
        }].matrix("horizontal"), selector: ".controls", selection: "bg"
    }), this.select($(".controls .row:first .item:first"))
}, App.SettingsSupport = GWareIPTV.UIBase.SettingsSupport, App.SettingsSupport.render = function () {
    App.userSettings.renderMenu({type: "vertical"}), App.userSettings.renderOptions({
        section: "support",
        brand: ".title"
    })
}, App.CatchUpHome = GWareIPTV.UIBase.CatchUpHome, App.CatchUp = GWareIPTV.UIBase.CatchUp, App.FavoriteManager = GWareIPTV.UIBase.FavoriteManager, App.Recording = GWareIPTV.UIBase.Recording, App.RecordingPlayer = GWareIPTV.UIBase.RecordingPlayer, App.Channel = GWareIPTV.UIBase.Channel, App.TV = GWareIPTV.UIBase.TV, App.VODBrowse = GWareIPTV.UIBase.VODBrowse, App.VODBrowse.onLoad = function (e) {
    this.item ? (this.lastId = this.item.id, this.back = this.item.back, this.storeId = this.item.id) : this.storeId = this.lastId, this.store = App.util.getVODStore(this.storeId), this.resetPageLayout(e);
    var t = [{html: _("Back"), data: {"data-fn": "btnBack"}}, {
        html: _("Search"),
        data: {"data-fn": "searchPanelShow"}
    }];
    this.makeZone({items: t, selector: ".sub-menu", selection: "bg"});
    var s = 0, i = store.get("iptv.watchlist.movie") || [], r = [];
    if (App.VODBrowse.movieIds = [], i.length) {
        for (var o = 0; o < i.length; o++) r.push(App.util.getMovieProp(i[o]));
        this.store.categories.unshift({name: _("Watchlist"), movies: r})
    }
    for (o = 0; o < this.store.categories.length; o++) {
        var a = this.store.categories[o], n = (e = "", []);
        e = '<div class="movies-holder row-block" data-index="' + o + '"><div class="row-label">' + a.name + '</div><div class="row-content"><div class="movies m-' + o + '" /></div></div>', $(".store").append(e), $('.store .row-block[data-index="' + o + '"]').css("top", s), s += $(".row-block").outerHeight() + 10, a.movies.forEach(function (e) {
            coverIcons = App.util.createCoverIcons({
                id: e.id,
                type: "movie",
                icons: ["purchase", "watch"]
            }), n.push({
                html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '" />' + coverIcons,
                data: {
                    "data-id": e.id,
                    "data-fn": "init",
                    "data-image": App.settings.server_location.movie_location + '/images/movies/' + e.backdrop,
                    "data-page": "VODDetail"
                }
            }), App.VODBrowse.movieIds.push(e.id)
        }), this.makeZone({
            items: n,
            selector: '.store .row-block[data-index="' + o + '"] .movies',
            selection: "border",
            pager: {type: "cols", count: GWareConfig.zoneItemCount},
            events: {
                keyUp: function () {
                    this.shouldRotate(0) && this.moveRowDown(), App.LS.run("up"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
                }, keyDown: function () {
                    this.shouldRotate(1) && this.moveRowUp(), App.LS.run("down"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
                }, keyBack: function () {
                    this.object = $(".sub-menu .item:first-child"), this.select()
                }
            }
        })
    }
    0 < $(".movies-holder:first-child .movies .item").length && (this.object = $(".movies-holder:first-child .movies .item:first-child"), this.select()), this.enableMenu("VOD"), this.fnBack = this.back
}, App.VODBrowse.shouldRotate = function (e) {
    if (-1 === this.getZone().indexOf("movies")) return !1;
    var t = this.object.parents(".row-block"), s = parseInt(t.position().top, 10);
    return e * ($(".store .row-block").height() + 10) === s
}, App.VODBrowse.moveRowUp = function () {
    $(".store .row-block").each(function () {
        var e = $(this).position().top, t = $(this).height() + 10;
        e = t <= e ? e - t : t * ($(".store .row-block").length - 1), $(this).css("top", e)
    }), App.LS.setupZones()
}, App.VODBrowse.moveRowDown = function () {
    $(".store .row-block").each(function () {
        var e = $(this).position().top, t = $(this).height() + 10;
        e = e < t * ($(".store .row-block").length - 1) ? e + t : 0, $(this).css("top", e)
    }), App.LS.setupZones()
}, App.VODDetail = GWareIPTV.UIBase.VODDetail, App.VOD = GWareIPTV.UIBase.VOD, App.VODMovie = GWareIPTV.UIBase.VODMovie, App.VODSub = GWareIPTV.UIBase.VODSub, App.VODTrailer = GWareIPTV.UIBase.VODTrailer, App.Youtube = GWareIPTV.UIBase.Youtube, App.YoutubePlayer = GWareIPTV.UIBase.YoutubePlayer;
//# sourceMappingURL=2-petha.min.js.map