GWareIPTV.UIPrototype.prototype.updateTime = function () {
    $(".header-right .time").html((new Date).niceTime())
}, GWareIPTV.UIPrototype.prototype.updateCalendar = function () {
    $(".header-right .calendar").html((new Date).niceDate())
}, GWareIPTV.UIPrototype.prototype.updateWeather = function (e, t) {
    if (lg("weather > data arrived"), App.settings.access.feature.weather) {
        var i = (new Date).getHours(), s = i < 6 || 21 < i ? "night" : "day";
        $(".weather .city").html(t), $(".weather .degree").html(e.temp_C + " &deg;C / " + e.temp_F + " &deg;F"), $(".weather .icon").html('<img src="artwork/weather/' + s + "/" + e.weatherCode + '.png" />')
    }
}, GWareIPTV.UIPrototype.prototype.resetPageLayout = function (e, t) {
    lg("ui controller > resetting page layout [onLoad] fullscreen [" + t + "]");
    var i = t ? window.innerHeight : "mobile" === App.user.device.category ? window.innerHeight - 130 : window.innerHeight - 230;
    $(".header, .footer").css("display", t ? "none" : "block"), $(".main").css("height", i), $(".main").html(e), this.resetSubMenu(), this.resetArrows(), this.showArrows(), this.isPlayerPage = this.playerPages.hasValue(this.name), this.setupHoverMenu(t)
}, GWareIPTV.UIPrototype.prototype.setupFrame = function () {
    this.setupMenuFrame({
        selection: "main-menu",
        vertical: !1,
        type: "both",
        preType: "both",
        perRow: !1,
        logout: !1
    }), $(".main-menu .scroller .row .item").contents().filter(function () {
        return 3 === this.nodeType
    }).wrap("<p></p>"), this.makeZone({
        items: [{
            html: '<span class="ico ico-chevron-right"></span> Log Out',
            data: {"data-fn": "logout"}
        }], selection: "none", selector: ".logout"
    })
}, GWareIPTV.UIPrototype.prototype.infoShow = function (e, t) {
    var i = null, s = 0 < $(".button-bar").length ? $(".button-bar") : null;
    if (t || (t = 5e3), 0 < $(".info").length && (i = $(".info")), 0 < $(".player-control").length && (i = $(".player-control")), i) {
        var n = i.height();
        null === s && "Channel" === App.page.name && (n -= 80), i.css("top", window.innerHeight - n), this.isInfoBarOpen = !0, $(".row-fluid.controls").css({
            top: -$(".ui").height() / 2,
            display: "block"
        }), lg("ui controller > info show"), $(".ads-ticker").is(":visible") && $(".ads-ticker").css({bottom: i.height()}), this.timerInfo && window.clearTimeout(this.timerInfo), !0 !== e && (this.timerInfo = setTimeout(this.infoHide.bind(this), t))
    }
}, GWareIPTV.UIPrototype.prototype.infoHide = function () {
    this.timerInfo && window.clearTimeout(this.timerInfo);
    var e = null;
    0 < $(".info").length && (e = $(".info")), 0 < $(".player-control").length && (e = $(".player-control")), e && (e.css("top", window.innerHeight), lg("ui controller > info hide"), "Channel" === this.name && $(".button-bar").remove(), this.isInfoBarOpen = !1, $(".row-fluid.controls").css({display: "none"}), lg("test info hide"), this.prompt.active || (lg("ui controller > popup is not active, focusing on player"), this.select($(".player-holder .row .item"))), $(".ads-ticker").is(":visible") && $(".ads-ticker").css({bottom: 0}))
}, GWareIPTV.UIPrototype.prototype.arrows = function () {
    var i = this, s = "Home" === App.page.name ? "metro-data" : "zHolder",
        n = "Home" === App.page.name ? "" : "Youtube" === App.page.name ? ":nth-child(2)" : ":first-child";
    $(document).on("click", ".move-left, .move-right", function (e) {
        var t = $(e.target).attr("class").split("-")[1].toString();
        null === App.LS.zoneActive.id.match(new RegExp(s, "i")) && i.select($("." + s + n + " .row:first-child .item:first-child")), "left" !== t ? "right" !== t || i.right() : i.left()
    })
}, GWareIPTV.UIPrototype.prototype.showArrows = function () {
    $(document).on("mousemove", "body", function (e) {
        var t = e.clientX;
        e.clientY;
        t <= 30 ? $(".move-left").show() : $(".move-left").hide(), t >= $(".ui").width() - 30 ? $(".move-right").show() : $(".move-right").hide()
    })
}, GWareIPTV.UIPrototype.prototype.resetSubMenu = function () {
    $(".sub-menu-holder").empty().removeClass("nav").html('<div class="sub-menu" />')
}, GWareIPTV.UIPrototype.prototype.resetArrows = function () {
    $(document).off("click", ".move-left, .move-right")
}, App.Apps = GWareIPTV.UIBase.Apps, App.Apps.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = [{html: _("Installed"), data: {"data-group": "Installed", "data-fn-select": "loadCategory"}}];
    App.user.package.app.group.forEach(function (e) {
        t.push({html: e, data: {"data-group": e, "data-fn-select": "loadCategory"}})
    }), 1 < t.length ? (this.makeZone({
        items: t,
        selector: ".sub-menu",
        selection: "sub-menu"
    }), this.object = $('.sub-menu .item[data-group="Installed"]'), this.select(), this.select($(".channels .scroller .row .item:first-child"))) : $(".main").html('<p class="empty">' + _("There are no apps") + "</p>"), this.fnBack = App.pageDefault.page, this.enableMenu("Apps")
}, App.Apps.loadCategory = function (e) {
    $(".channels").empty();
    var i = this, s = 1, n = [], a = 0, o = 0, r = 1, l = e.group;
    if ($(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-group="' + l + '"]').addClass("selected"), lg("apps > loading category [" + l + "]"), "Installed" === l) {
        if (this.apps = App.player.getApps(), this.apps.forEach(function (e) {
            var t = "true" === e.appIsSystemApp ? "loc:/" + e.appImage : i.getAppFromPackage(e.appName, "icon");
            n[a] || (n[a] = [[], []]), o = a % 2 != 0 ? r <= 3 ? 0 : 1 : r <= 2 ? 0 : 1, n[a][o].push({
                html: '<img src="' + t + '" />',
                data: {
                    "data-package": e.appPackage,
                    "data-name": e.appName,
                    "data-icon": t,
                    "data-system": e.appIsSystemApp,
                    "data-fn": "goDetails",
                    "data-itemf": "askOpen",
                    "data-text": _("Press OK to open this app"),
                    "data-group": l
                }
            }), r % 5 == 0 && (a++, r = 0), r++, s++
        }), this.apps.length) {
            lg(n.length);
            for (var t = 0; t < n.length; t++) $(".channels").append('<div class="zHolder zone-' + t + '" data-nav="false" data-fn-select="info" />'), i.makeZone({
                rows: n[t],
                selector: ".zone-" + t,
                selection: "border",
                scroller: {width: "auto", height: "auto"},
                events: {keyRight: i.right, keyLeft: i.left}
            })
        } else $(".channels").html('<p class="empty">' + _("There are no installed apps") + "</p>");
        return i.setMargin(), i.setWidth(s), i.arrows(), !1
    }
    if (App.user.package.app.list.forEach(function (e) {
        e.group === l && (n[a] || (n[a] = [[], []]), o = a % 2 != 0 ? r <= 3 ? 0 : 1 : r <= 2 ? 0 : 1, n[a][o].push({
            html: '<img src="' + e.icon + '" />',
            data: {
                "data-name": e.name,
                "data-icon": e.icon,
                "data-url": e.url,
                "data-system": !1,
                "data-fn": "goDetails",
                "data-itemf": "askInstall",
                "data-text": _("Press OK to install this app"),
                "data-group": l
            }
        }), r % 5 == 0 && (a++, r = 0), r++, s++)
    }), n.length) for (t = 0; t < n.length; t++) $(".channels").append('<div class="zHolder zone-' + t + '" data-nav="false" data-fn-select="info" />'), i.makeZone({
        rows: n[t],
        selector: ".zone-" + t,
        selection: "border",
        scroller: {width: "auto", height: "auto"},
        events: {keyRight: i.right, keyLeft: i.left}
    }); else $(".channels").html('<p class="empty">' + _("There are no apps in this category") + "</p>");
    i.setMargin(), i.arrows(), i.setWidth(s)
}, App.Apps.info = function (e) {
    var t = "", i = {"data-fn": (e = e).itemf, "data-system": e.system, "data-name": e.name};
    t = "Installed" === e.group ? (i["data-package"] = e.package, "Open") : (i["data-url"] = e.url, "Install"), $(".channel .logo").html('<img src="' + e.icon + '" />'), $(".channel .name").html(e.name), $(".channel .category").html(e.description), $(".channel .info-text").text(e.text), this.makeZone({
        items: [{
            html: _(t),
            data: i
        }], selection: "button", selector: ".watch-button"
    }), this.checkImages($(".channel .logo"))
}, App.Apps.goDetails = function () {
    this.slideToBegining(), this.select($(".content.apps.tv .channel .watch-button .scroller .row .item"))
}, App.Apps.slideToBegining = function () {
    $(".content.apps.tv").css({left: "60px"})
}, App.Apps.left = function () {
    App.LS.run("left");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = App.LS.getZoneIndex(App.LS.zoneActive.id),
        i = $(".main").outerWidth();
    i - 300 > this.zonesWidth || (parseInt(t) - 1 != 1 ? 10 < $(".content.apps").position().left + e ? $(".content.apps").css({left: 10}) : e < 200 ? $(".content.apps").css({left: $(".content.apps").position().left + 133}) : i / 2.5 < e || $(".content.apps").css({left: $(".content.apps").position().left + e}) : $(".content.apps").css({left: 10}))
}, App.Apps.right = function () {
    App.LS.run("right");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = $(".main").outerWidth(),
        i = App.LS.getZoneIndex(App.LS.zoneActive.id), s = $(".zHolder").length, n = this.zonesWidth;
    t - 300 > this.zonesWidth || (parseInt(i) - 1 !== s ? $(".content.apps").position().left < t - n - 620 || ($(".content.apps").position().left - e < t - n - 600 ? $(".content.apps").css({left: t - n - 600}) : e < t / 2 || (t / 2 < e ? $(".content.apps").css({left: $(".content.apps").position().left - e / 2}) : $(".content.apps").css({left: $(".content.apps").position().left - e + 10}))) : $(".content.apps").css({left: t - n - 630}))
}, App.Apps.setMargin = function () {
    $(".channels").css({"margin-top": ($(".content.apps.tv").height() - $(".channels").height()) / 2})
}, App.Apps.calculateWidth = function (e) {
    if (e <= 3) return 165;
    if (e <= 5) return 278;
    var t = e % 5, i = Math.floor(e / 5);
    return 5 < e ? 0 === t ? 278 * i : 278 * i + (t < 2 ? 165 : 278) : void 0
}, App.Apps.setWidth = function (e) {
    var t = this.calculateWidth(e);
    (this.zonesWidth = t) < $(".content.apps.tv").width() - 350 ? $(".content.apps.tv").css({width: "calc(100% - 70px)"}) : $(".content.apps.tv").css({width: t + 350})
}, App.EPGh = GWareIPTV.UIBase.EPGh, App.EPGh.loaded = function () {
    var e = 0, n = App.epg[App.epg.viewDate], a = null, t = 0, i = new Date(App.epg.viewDate), s = [], o = [], r = 0;
    for (var l in this.resetPageLayout(this.html), $(".header .date").html(App.epg.isToday(App.epg.viewDate)), i.setHours(0), i.setMinutes(0), i = Math.round(i.getTime() / 1e3), n) {
        o = [], (t = (a = n[l]).data.length) && o.push({
            html: '<div class="padding" style="width: ' + (a.data[0].ut_start - i) / 6 + 'px"></div>',
            wrap: !1
        });
        for (var p = 0; p < t; p++) {
            r = (a.data[p].ut_end - a.data[p].ut_start) / 6, a.data[p].ut_end > e && (e = a.data[p].ut_end);
            var h = this.buildEPGData(a, a.data[p]);
            h.data["data-fn"] = "previewShow", o.push({
                html: 50 < r ? h.icon + '<span class="title">' + a.data[p].progname + '</span><div class="epgHInfo"><span class="ico ico-info"></span></div>' : "...",
                data: h.data,
                cls: r < 50 ? "prog tiny" : "prog",
                style: {width: r + "px"}
            })
        }
        s.push(o)
    }
    this.makeZone({
        rows: s,
        selector: ".epgh",
        selection: "bg",
        scroller: {width: "auto", height: "auto"},
        layer: "epg",
        pager: {
            type: "rows", count: 10, onReload: function (e) {
                for (var t = "", i = e; i < e + 10; i++) if (App.user.package.tv.list[i]) {
                    var s = App.user.package.tv.list[i];
                    t += '<div class="ch" id="' + (a = n[s.number + "-" + s.id]).id + '"><img src="' + a.logo + '" /></div>'
                }
                "" !== t && (document.querySelector(".channel-scroller").innerHTML = t, document.querySelector(".channel-scroller").style.top = "0px", App.epg.viewSelectRunning())
            }
        },
        scrollIntoView: !1,
        nudgeText: !0,
        centerSelection: !0
    }), document.querySelector(".channels").style.overflowX = App.mobile ? "auto" : "hidden", document.querySelector(".hours").style.overflowX = App.mobile ? "auto" : "hidden", document.querySelector(".epgh .scroller").insertAdjacentHTML("afterbegin", '<div class="circle-timeline"></div><div class="timeline"></div><div class="circle-timeline"></div>'), this.makeHourScroller(i, e), App.epg.viewSelectRunning(), "Today" === App.epg.isToday(App.epg.viewDate) && (this.updateTimeline(), this.clearTimer(), window.setInterval(this.updateTimeline.bind(this), 6e4)), this.resetEvents(), this.enableMenu("startEPG")
}, App.EPGh.previewShow = function (e) {
    if (!0 !== this.isOpen) {
        var t = $('.item[data-id="' + e.id + '"][data-start="' + e.start + '"]'), i = t.parent(),
            s = (i.index(), $(".channel-scroller > #" + e.id)), n = t.html(),
            a = App.epg.getProgramme(App.epg.viewDate, e.id, e.epgId), o = new Date(1e3 * a.ut_start),
            r = new Date(1e3 * a.ut_end), l = Date.now() / 1e3, p = "",
            h = this.buildEPGData(App.util.getChannelData(e.id), {
                ut_start: a.ut_start,
                "ut-end": a.ut_end,
                progname: GWareBase64.decode(e.title)
            }), d = $(".epg .scroller").position().top;
        if (this.isOpen = !0, p += '<div class="previewCh">', p += '<div class="previewContent">', p += '<div class="img">', p += "</div>", p += '<div class="info">', p += '<div class="title">' + a.name + "</div>", p += '<div class="playtime"><span class="ico ico-clock"></span>' + o.niceTime() + " - " + r.niceTime() + ' &nbsp; <span class="ico ico-calendar"></span>' + (new Date).niceDate() + "</div>", l > a.ut_start && l < a.ut_end) p += '<div class="progress">', p += '<div class="bar" style="width: ' + Math.round(100 * (l - a.ut_start) / (a.ut_end - a.ut_start)) + '%"/>', p += "</div>";
        p += '<div class="description">' + a.description.limit(128) + "</div>", p += '<div class="watch-button" />', p += "</div>", p += "</div>", p += '<div class="closeContent" />', p += "</div>", $(".programmes").prepend(p), $(".previewCh").css({top: s.offset().top - 170}), s.offset().top > $(".ui").height() / 2 && ($(".channel-scroller").css({top: d - 200 + "px"}), $(".epg .scroller").css({top: d - 200 + "px"}), $(".previewCh").css({top: $(".previewCh").position().top - 200 + "px"})), null !== a.progimg && "Object" != typeof a.progimg && ($(".previewContent .img").addClass("progimg"), $(".previewContent .img").append('<img src="' + a.progimg + '" />'), $(".previewCh").width($(".previewCh").width() + 110), $(".previewCh .info").addClass("large")), i.css({margin: "84px 0px"}), s.css({margin: "84px 0px"}), this.makeZone({
            items: [{
                html: "x",
                data: {
                    "data-fn": "closePreview",
                    "data-info": GWareBase64.encode(n),
                    "data-id": e.id,
                    "data-start": e.start
                }
            }], selection: "close", selector: ".closeContent", layer: "preview"
        }), this.makeZone({
            items: [{html: _("&nbsp;Watch Now") + h.icon, data: h.data}],
            selection: "button",
            selector: ".watch-button",
            layer: "preview"
        }), this.select($(".previewCh .watch-button .item"))
    }
}, App.EPGh.closePreview = function (e) {
    var t = $('.prog.item[data-id="' + e.id + '"][data-start="' + e.start + '"]'), i = t.parent(),
        s = (i.prevAll().length, $(".channel-scroller > #" + e.id));
    this.isOpen = !1, $(".programmes .previewCh").remove(), i.css({margin: "0px 0px 6px 0px"}), s.css({margin: "0px 0px 6px 0px"}), this.select(t)
}, App.EPGv = GWareIPTV.UIBase.EPGv, App.EPGv.loaded = function () {
    var e = [], t = App.epg[App.epg.viewDate];
    for (var i in this.resetPageLayout(this.html), this.resetEvents(), this.enableMenu("startEPG"), t) e.push({
        html: '<img src="' + t[i].logo + '" />',
        data: {"data-id": i}
    });
    this.makeZone({
        items: e,
        selector: ".channels-epg",
        selection: "border"
    }), this.object = App.epg.viewChannelId ? $('.channels-epg .item[data-id="' + App.epg.viewChannelId + '"]') : $(".channels-epg .item:first-child"), this.select(), $(".span6.date").html(App.epg.isToday(App.epg.viewDate)), this.loadProgrammes(this.object.data())
}, App.EPGv.keyBack = function (e) {
    e && e.preventDefault();
    var t = this.object.parents(".hot-zone");
    return t.hasClass("programmes") ? (this.object = $(".channels-epg .item").first(), void this.select()) : !t.hasClass("main-menu") && $(".main-menu").is(":visible") ? (this.object = $(".main-menu .item").first(), void this.select()) : void this.pageLoader(App.pageDefault.page)
}, App.HomeHOTEL = GWareIPTV.UIBase.HomeHOTEL, App.Home = GWareIPTV.UIBase.Home, App.Home.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home"), App.metro._fetch(this.renderMetro.bind(this)), this.arrows(), this.fromPage = null
}, App.Home.renderMetro = function () {
    var e, t = [[], []], i = App.metro.movies, s = App.metro.tv, n = this.buildMetro(i, "movies"),
        a = this.buildMetro(s, "tv");
    0 === App.metro.news.length ? ($(".news-holder").remove(), $(".content.home .metro").addClass("larger")) : (this.index = 0, this.timerNews = null, this.newsScroller()), t[0] = a.data, t[1] = n.data, e = n.index > a.index ? this.getWidth(n.index) : this.getWidth(a.index), $(".metro-data").css({width: e}), $(".content.home").css({width: e + 1050}), this.makeZone({
        rows: t,
        selector: ".metro-data",
        selection: "border",
        events: {keyRight: this.right.bind(this), keyLeft: this.left.bind(this)},
        scroller: {width: "100%", height: "100%"}
    }), $(".metro-data .item img").waitForImages(function () {
        App.showPage()
    }), $(".metro-data").css({"margin-top": ($(".metro").height() - 433) / 2}), this.selectItem($.extend({}, $(".metro.nav .metro-data .scroller .row:nth-child(1) .item:first-child")[0].dataset)), this.select($('.main-menu .item[data-page="Home"]'))
}, App.Home.buildMetro = function (e, t) {
    for (var i = [], s = 0, n = 0; n < e.length; n++) i.push({
        html: '<img src="' + ("movies" === t ? App.settings.server_location.movie_location + '/images/movies/'+ e[n].poster
            : App.settings.server_location.channel_location + '/images/channels/' + e[n].channel_image) + '" />',
        data: {"data-id": "movies" === t ? e[n].id : e[n].channel_id, "data-fn": "selectItem", "data-type": t}
    }), s++;
    return {data: i, index: s}
}, App.Home.selectItem = function (e) {
    var t = "", i = e ? e.id : $(".metro.nav .metro-data .scroller .row:nth-child(2) .item:first-child").id;
    t = "movies" !== e.type && e ? (this.setChannelDetails(i), "Channel") : (App.util.getMovieDetails(i, this.setMovieDetails), "VODDetail"), this.makeZone({
        items: [{
            html: 'Watch Now<span class="ico ico-chevron-right"></span>',
            data: {"data-fn": "init", "data-page": t, "data-id": e.id}
        }], selector: ".watch-button", selection: "button", events: {keyRight: this.buttonRight.bind(this)}
    }), e && ($(".content.home").css({left: "60px"}), $(".metro.nav .metro-data .scroller").css({left: "0"})), this.select($(".watch-button .scroller .item"))
}, App.Home.buttonRight = function () {
    App.LS.run("right");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = $(".main").outerWidth();
    t / 2.2 < e && $(".content.home").css({left: -(e - t / 2)})
}, App.Home.newsScroller = function () {
    var e = App.metro.news[this.index];
    "" === $(".metro-news-date").html() && $(".metro-news-date").html('<span class="ico ico-calendar"></span> ' + (new Date).niceDate()), $(".metro-news-image").html('<img src="' + window.location.protocol + App.settings.url.image + e.image + '" />'), $(".metro-news-text > div").html(e.description.limit(256)), $(".news-holder").css({"margin-top": ($(".metro").height() - $(".news-holder").height()) / 3}), this.index = this.index < App.metro.news.length - 1 ? this.index + 1 : 0, this.timerNews = window.setTimeout(this.newsScroller.bind(this), 1e4)
}, App.Home.left = function () {
    App.LS.run("left");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left,
        t = (App.LS.getZoneIndex(App.LS.zoneActive.id), $(".main").outerWidth()),
        i = ($(".metro-data").width(), $(".content").position().left);
    0 < App.LS.zoneActive.id.indexOf("watch") ? $(".content.home").css({left: 60}) : t / 2 < e || (60 < i + e + 200 ? this.moveContent(60) : e < 133 ? this.moveContent($(".content.home").position().left - e + 300) : e < t / 3 && this.moveContent($(".content.home").position().left + e))
}, App.Home.right = function () {
    var e = $(".content"), t = e.position().left, i = $("#" + App.LS.zoneActive.id + " .selection").offset().left,
        s = $(".main").outerWidth(), n = -(e.width() - s + 50);
    return t < n + s / 1.5 ? (this.moveContent(n), void App.LS.run("right")) : t === n || t < n - 250 ? (this.moveContent(n), void App.LS.run("right")) : (this.moveContent($(".content.home").position().left - i + 200), App.LS.run("right"), void lg("no if -> " + i + "200 -> " + t + " -> " + n))
}, App.Home.moveContent = function (e) {
    $(".content.home").css({left: e})
}, App.Home.getWidth = function (e) {
    return e % 2 == 0 ? e / 2 * 177 + e / 2 * 133 : e / 2 * 177 + e / 2 * 133 + 177
}, App.Home.setMovieDetails = function (e) {
    $(".preview .info .logo").empty(), $(".preview .info .logo").addClass("hide"), $(".preview .info .prog-progress").empty(), $(".preview .img-holder").html('<img src="' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '" />'), $(".preview .info .title").html(e.name), $(".preview .info .description").html(e.description), $(".preview .info .date").html('<span class="ico ico-calendar"></span> ' + (new Date).niceDate())
}, App.Home.setChannelDetails = function (e) {
    var t = App.epg.getProgrammeByTime(parseInt(e)), i = t.img ? t.img : t.channel.logo;
    $(".preview .info .logo").removeClass("hide"), $(".preview .info .logo").html('<img src="' + t.channel.logo + '" />'), $(".preview .info .title").html(t.name), $(".preview .img-holder").html('<img src="' + i + '" />'), $(".preview .info .prog-progress").html('<div class="progress"><div class="bar"    style="width: ' + t.elapsed + '%" /></div>'), $(".preview .info .date").html('<span class="ico ico-clock"></span> ' + new Date(1e3 * t.ut_start).niceTime() + " - " + new Date(1e3 * t.ut_end).niceTime() + ' &nbsp; <span class="ico ico-calendar"></span> ' + (new Date).niceDate()), $(".preview .info .description").html(t.description)
}, App.Home.unload = function () {
    window.clearTimeout(this.timerNews)
}, App.HomePLAYER = GWareIPTV.UIBase.HomePLAYER, App.HomeTV = GWareIPTV.UIBase.HomeTV, App.HomeVOD = GWareIPTV.UIBase.HomeVOD, App.Offline = GWareIPTV.UIBase.Offline, App.Search = GWareIPTV.UIBase.Search, App.Search.onLoad = function (e) {
    this.lastSearch = "", this.resetPageLayout(e);
    var t = parseInt($(".search-results-holder").height(), 10), i = [{
        html: '<input type="text" placeholder="' + _("Search") + '" />',
        data: {"data-fn": "keyboardShow"},
        cls: "item",
        wrap: !1,
        style: {width: "200px", height: "43px"}
    }, {
        html: '<span class="ico ico-check-box"></span>' + _("Movies"),
        data: {"data-fn": "mark", "data-type": "movies"}
    }, {
        html: '<span class="ico ico-check-box"></span>' + _("TV channels"),
        data: {"data-fn": "mark", "data-type": "channels"}
    }, {
        html: '<span class="ico ico-check-box"></span>' + _("Series"),
        data: {"data-fn": "mark", "data-type": "series"}
    }, {
        html: '<span class="ico ico-check-box"></span>' + _("Music albums"),
        data: {"data-fn": "mark", "data-type": "music"}
    }];
    t < 320 && (t = 320), this.makeZone({
        rows: [i],
        selector: ".tools",
        selection: "bg"
    }), this.select($(".tools .row .item:first")), this.enableMenu("Search"), $(".tools input").on("keyup input focus", this.reload.bind(this)), $(".sr-row.l").css("height", .5 * t), $(".sr-row.m").css("height", .4 * t), $(".sr-row.s").css("height", .33 * t), $(".sr-row.xs").css("height", .3 * t), App.reports.set({type: 23})
}, App.User = GWareIPTV.UIBase.User, App.Album = GWareIPTV.UIBase.Album, App.Album.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu-player",
        selection: "player-btn",
        scroller: {width: "auto", height: "100%"},
        align: "center"
    })
}, App.Album.loadTrack = function (e) {
    e && (this.index = e.index);
    var t = this, i = this.album.songs[this.index].url;
    $(".playlist .item").each(function () {
        $(this).find(".ico").remove(), $(this).find(".progress").remove(), $(this).find(".time").html("")
    }), $('.playlist .item[data-index="' + this.index + '"]').append('<div class="progress"><div class="bar"></div></div>'), $('.playlist .item[data-index="' + this.index + '"]').find(".span9").prepend('<span class="ico ico-play-arrow"></span>'), App.player.setup({
        url: i,
        secure: this.album.songs[this.index].secure,
        events: {
            time: function (e) {
                $('.playlist .item[data-index="' + t.index + '"] .progress .bar').css("width", e.percent + "%"), $('.playlist .item[data-index="' + t.index + '"] .time').html(e.remaining.toCounter()), 30 < e.position && !this.reportSent && (this.report(this.album.name), this.reportSent = !0)
            }.bind(this), error: function (e) {
                lg(e), pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "init", "data-page": "Music"}}]
                })
            }, complete: function () {
                this.index < this.album.songs.length - 1 && (this.index++, this.loadTrack())
            }.bind(this), ready: function () {
                App.player.play()
            }
        }
    })
}, App.Music = GWareIPTV.UIBase.Music, App.Music.renderMenu = function (e) {
    this.makeZone({
        rows: e.matrix("horizontal"),
        selector: ".sub-menu",
        selection: "sub-menu",
        scroller: {width: "auto", height: "100%"}
    })
}, App.Music.renderCategory = function (e) {
    this.makeZone({
        items: e,
        selector: ".stores",
        selection: "border",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        events: {keyLeft: this.left, keyRight: this.right}
    })
}, App.Music.loadCategory = function (e) {
    this.albums = App.util.getMusicAlbums(e.id);
    var t = [], i = 0, s = 0, n = 1;
    if (0 !== this.albums.length) {
        $(".vod .stores").empty();
        for (var a = 0; a < this.albums.length; a++) {
            var o = this.albums[a], r = App.util.createCoverIcons({id: o.id, type: "album", icons: ["purchase"]});
            t[i] || (t[i] = [[], []]), s = i % 2 != 0 ? n <= 3 ? 0 : 1 : n <= 2 ? 0 : 1, t[i][s].push({
                html: '<img src="' + o.poster + '" />' + r,
                data: {"data-id": o.id, "data-fn": "init", "data-page": "Album"}
            }), n % 5 == 0 && (i++, n = 0), n++, 0
        }
        for (a = 0; a < t.length; a++) $(".vod .stores").append('<div class="zHolder zone-' + a + '" data-nav="false" data-extend-rows="false" />'), this.makeZone({
            rows: t[a],
            selector: ".zone-" + a,
            selection: "border",
            scroller: {width: "auto", height: "auto"},
            events: {keyRight: this.right, keyLeft: this.left},
            pager: {type: "rows", count: GWareConfig.zoneItemCount}
        });
        $(".sub-menu .item").each(function () {
            $(this).removeClass("selected")
        }), $('.sub-menu .item[data-id="' + e.id + '"]').addClass("selected"), App.reports.set({
            type: 17,
            name: e.name,
            id: e.id
        }), this.arrows(), this.setWidth(), this.setMargin()
    } else $(".stores").html('<p class="empty">' + _("There are no albums in this category") + "</div>")
}, App.Music.setWidth = function () {
    var e = $(".stores .scroller .row .item").length;
    $(".vod").css({width: this.calculateWidth(e)}), this.zonesWidth = this.calculateWidth(e)
}, App.Music.setMargin = function () {
    var e = ($(".content.full").height() - $(".vod").height()) / 2;
    $(".vod").css({"margin-top": e})
}, App.Music.calculateWidth = function (e) {
    if (e <= 3) return 165;
    if (e <= 5) return 278;
    var t = e % 5, i = Math.floor(e / 5);
    return 5 < e ? 0 === t ? 278 * i : 278 * i + (t < 2 ? 165 : 278) : void 0
}, App.Music.right = function () {
    App.LS.run("right");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = $(".main").outerWidth(),
        i = App.LS.getZoneIndex(App.LS.zoneActive.id), s = $(".zHolder").length, n = this.zonesWidth,
        a = $(".content.music").position().left;
    t - 600 > this.zonesWidth || (parseInt(i) - 1 !== s ? a < t - n - 620 || (a - e < t - n - 600 ? this.moveContent(t - n - 660) : e < t / 2 || (t / 2 < e ? this.moveContent(a - e / 2) : this.moveContent(a - e + 10))) : this.moveContent(t - n - 660))
}, App.Music.left = function () {
    App.LS.run("left");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = App.LS.getZoneIndex(App.LS.zoneActive.id),
        i = $(".main").outerWidth(), s = $(".content.music").position().left;
    i - 600 > this.zonesWidth || (parseInt(t) - 2 != 1 ? 200 < e && parseInt(t) - 2 == 2 || (e < 200 ? this.moveContent(s + 133) : i / 2.5 < e || this.moveContent(s + e)) : this.moveContent(60))
}, App.Music.moveContent = function (e) {
    $(".content.music").css({left: e})
}, App.Advertisement = GWareIPTV.UIBase.Advertisement, App.SeriesBrowse = GWareIPTV.UIBase.SeriesBrowse, GWareIPTV.UIBase.SeriesBrowse.onLoad = function (e) {
    this.resetPageLayout(e), this.getSeries(), this.select($(".zHolder:first-child .row:first-child .item:first-child"))
}, App.SeriesBrowse.getSeries = function () {
    this.movieIds = [];
    var e = App.util.getSeriesStore(this.item.id), s = [], n = 0, a = 0, o = 1;
    e.series.forEach(function (e) {
        var t = App.history.hasWatchedSeries(e.id) ? '<div class="watched"><span class="ico ico-done"></span></div>' : "",
            i = '<div class="movieOverlay">' + e.name + "</div>";
        s[n] || (s[n] = [[], []]), a = o <= 3 ? 0 : 1, s[n][a].push({
            html: '<img src="' + e.seasons[0].poster + '" />' + t + i,
            data: {
                "data-id": e.id,
                "data-storeid": this.item.id,
                "data-seassonid": e.seasons[0].id,
                "data-fn": 0 < e.seasons.length ? "selectSerie" : "warn",
                "data-page": 0 < e.seasons.length ? "" : "SeriesBrowse"
            }
        }), o % 5 == 0 && (n++, o = 0), o++, 0
    }.bind(this)), [[], []].length || $(".main").html('<p class="empty">' + _("There are no series") + "</p>");
    for (var t = 0; t < s.length; t++) $(".container .movies").append('<div class="zHolder zone-' + t + '" data-nav="false" />'), this.makeZone({
        rows: s[t],
        selector: ".zone-" + t,
        selection: "border",
        scroller: {width: "auto", height: "auto"},
        events: {keyRight: this.right, keyLeft: this.left}
    });
    this.enableMenu("SeriesBrowse"), this.setMargin(), this.arrows(), App.reports.set({type: 14})
}, App.SeriesBrowse.selectSerie = function (e) {
    var t = App.util.getSerie(e.id, e.seassonid),
        i = '<div class="activeOverlay"><div class="activeHolder"><div class="img-holder"><img src="' + t.seasons[0].poster + '" /><div class="itemOverlay"></div></div><div class="info"><div class="title">' + t.name + '</div><div class="description">' + t.seasons[0].descriptions[0].description.limit() + '</div><div class="watch-button" /></div><div class="closeHolder"><div class="close" /></div>';
    $(".ui").append(i), this.makeZone({
        items: [{html: "x", data: {"data-fn": "closeOverlay", "data-id": e.id}}],
        selection: "close",
        selector: ".close",
        scroller: {width: "100%", height: "auto"},
        layer: "active-overlay"
    }), this.makeZone({
        items: [{
            html: _("Watch Now") + '<span class="ico ico-chevron-right"></span>',
            data: {"data-fn": "init", "data-page": "SeriesDetail", "data-id": e.id, "data-store-id": e.storeid}
        }], selection: "button", selector: ".watch-button", layer: "active-overlay"
    }), this.select($(".activeHolder .info .watch-button .scroller .row .item"))
}, App.SeriesBrowse.calculateWidth = function (e) {
    return 1 === e ? 133.3333 : 2 === e ? 233.3333 : 3 <= e && e <= 5 ? 433.3333 : 5 < e ? e % 5 == 0 ? e / 5 * 433.3333 : e / 5 * 433.3333 + (3 <= e % 5 ? 433.333 : e % 5 == 2 ? 233.3333 : 133.3333) : void 0
}, App.SeriesBrowse.setMargin = function () {
    var e = $(".content.vodbrowse .store"), t = $(".content.vodbrowse").height();
    e.css({"margin-top": (t - 400) / 2})
}, App.SeriesBrowse.right = function () {
    App.LS.run("right");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = $(".main").outerWidth(),
        i = App.LS.getZoneIndex(App.LS.zoneActive.id), s = $(".zHolder").length, n = this.zonesWidth,
        a = $(".content.vodbrowse").position().left;
    t - 600 > this.zonesWidth || (parseInt(i) - 1 !== s ? a < t - n - 620 || (a - e < t - $(".store .movies").width() - 600 ? this.moveContent(t - $(".store .movies").width() - 660) : e < t / 2 || (t / 2 < e ? this.moveContent(a - e / 2) : this.moveContent(a - e + 10))) : this.moveContent(t - n - 660))
}, App.SeriesBrowse.left = function () {
    App.LS.run("left");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = App.LS.getZoneIndex(App.LS.zoneActive.id),
        i = $(".main").outerWidth(), s = $(".content.vodbrowse").position().left;
    i - 600 > this.zonesWidth || (parseInt(t) - 1 != 1 ? 10 < s + e ? this.moveContent(60) : e < 200 ? this.moveContent(s + 133) : i / 2.5 < e || this.moveContent(s + e) : this.moveContent(60))
}, App.SeriesBrowse.closeOverlay = function (e) {
    if (void 0 !== e) return $(".activeOverlay").remove(), void this.select($('.zHolder .scroller .item[data-id="' + e.id + '"]'));
    this.select($('.zHolder .item[data-id="' + $(".watch-button .item").data("id") + '"]')), $(".activeOverlay").remove()
}, App.SeriesBrowse.moveContent = function (e) {
    $(".content.vodbrowse").css({left: e})
}, App.SeriesBrowse.keyBack = function () {
    0 < $(".ui").find(".activeOverlay").length ? this.closeOverlay() : this.pageLoader("SeriesBrowse")
}, App.SeriesBrowse.unload = function () {
    this.closeOverlay()
}, App.SeriesDetail = GWareIPTV.UIBase.SeriesDetail, App.SeriesDetail.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getSeasonMenu();
    if (!t || !t.length) return $(".vod").html('<p class="empty">' + _("This series is not available at the moment, please contact support.") + "</p>"), !1;
    this.makeZone({
        rows: [t],
        selector: ".sub-menu",
        selection: "button",
        align: "center"
    }), this.select($(".sub-menu .item:nth-child(2)")), this.loadSeason(this.object.data()), this.arrows()
}, App.SeriesDetail.loadSeason = function (e) {
    var t = this.getEpisodes(e.index);
    this.makeZone({
        rows: t,
        selector: ".playlist",
        selection: "bg",
        scroller: {width: "100%", height: "auto"},
        events: {keyLeft: this.left}
    })
}, App.SeriesDetail.getEpisodes = function (e, t) {
    var i = this.serie.seasons[e], s = GWareBase64.encode(JSON.stringify(i.ppv));
    $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-index="' + e + '"]').addClass("selected"), $(".poster-duration").html(_('<span class="ico ico-clock"></span> {$} min', i.length)), $(".poster img").attr("src", i.poster), $(".title").html(i.name), $(".rating").html(this.rating2stars(i.rating)), $(".description").html(this.getDescription(i.descriptions)), $(".year").html(i.year), $(".language").html(i.language), $(".duration").html(_("{$} minutes", i.length)), $(".actors").html(this.limitActors(i.actors)), $(".tags").html(this.getTags(i.tags));
    for (var n = [], a = 0; a < i.episodes.length; a++) {
        var o = i.episodes[a], r = a + 1 < 10 ? "0" + (a + 1) : a + 1,
            l = App.util.createCoverIcons({id: o.id, type: "episode", icons: ["watch"]});
        n[a] || (n[a] = []), n[a].push({
            html: "<span>" + r + ".</span> " + o.name + l,
            data: {
                "data-fn": "ppvValidate",
                "data-ppv": s,
                "data-next": GWareBase64.encode(JSON.stringify({
                    "data-page": "SeriesPlayer",
                    "data-fn": "init",
                    "data-store-id": this.item.storeId,
                    "data-id": this.serie.id,
                    "data-season": e,
                    "data-episode": a,
                    "data-img": i.poster,
                    "data-length": i.length
                })),
                "data-fn-select": "moveContent"
            }
        })
    }
    return $(".back-img").css({"background-image": 'url("' + i.backdrop + '")'}), App.reports.set({
        type: 15,
        name: this.serie.name,
        id: this.serie.id
    }), n
}, App.SeriesDetail.left = function () {
    this.moveContent(!1)
}, App.SeriesDetail.right = function () {
    this.moveContent()
}, App.SeriesDetail.moveContent = function (e) {
    var t = $(".content.full.vod");
    return !1 === e ? (App.LS.run("left"), void t.css({left: "60px"})) : 0 === t.position().left || 60 === t.position().left ? (App.LS.run("right"), void t.css({left: "-70.6%"})) : void 0
}, App.SeriesPlayer = GWareIPTV.UIBase.SeriesPlayer, App.SeriesPlayer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyUp: this.share.bind(this),
            keyLeft: this.preselect.bind(this, "rewind", !0),
            keyRight: this.preselect.bind(this, "forward", !0),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.createMenu(), this.reportSent = !1, this.storeId = this.item.storeId, this.serieId = this.item.id, this.serie = App.util.getSerie(this.item.id, this.storeId), this.season = this.item.season, this.episode = this.item.episode, this.poster = this.item.img, this.length = this.item.length, this.item.resume && App.history.add("series", {
        id: this.serie.seasons[this.season].episodes[this.episode].id,
        seasonId: this.serie.seasons[this.season].id,
        seriesId: this.serie.id,
        storeId: this.storeId,
        p: this.item.resume
    }), this.hasChildLock(), this.enableMenu("SeriesBrowse"), $(document).on("click", ".report", GWareIPTV.UIBase.SeriesPlayer.keyBlue)
}, App.SeriesPlayer.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu-player",
        selection: "button",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    })
}, App.SeriesPlayer.selectStream = function (e) {
    var t = this.serie.seasons[this.season].episodes[this.episode], i = App.history.getProgress("series", t.id);
    $(".movie-header .img img").attr("src", this.poster), App.player.setup({
        url: t.streams[e.index].url, ads: !0, secure: t.streams[e.index].secure, events: {
            complete: function () {
                App.history.add("series", {
                    id: this.serie.seasons[this.season].episodes[this.episode].id,
                    seasonId: this.serie.seasons[this.season].id,
                    seriesId: this.serie.id,
                    storeId: this.storeId
                }), this.next()
            }.bind(this), error: function () {
                pp({message: _("Stream is not available at this moment [2003]")})
            }.bind(this), time: function (e) {
                $(".movie-header .length").html('<span class="ico ico-clock"></span> ' + Math.floor(e.duration / 60) + " min"), $(".progress-holder .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter()), 30 < e.position && !this.reportSent && (this.report(this.serie.name, t.name), this.reportSent = !0)
            }.bind(this), ready: function () {
                App.reports.set({
                    type: 13,
                    name: this.serie.name,
                    id: this.serie.id,
                    tags: this.serie.seasons[this.season].tags.join(",")
                }), 0 < i.position ? pp({
                    message: _("Would you like to resume where you left off?"),
                    buttons: [{label: _("Yes"), data: {"data-fn": "resume", "data-time": i.position}}, {
                        label: _("No"),
                        data: {"data-fn": "play"}
                    }]
                }) : App.player.play()
            }.bind(this)
        }
    })
}, App.SeriesStore = GWareIPTV.UIBase.SeriesStore, App.SeriesStore.onLoad = function (e) {
    this.resetPageLayout(e);
    var i = 0, s = 1, n = 0, a = [], o = 0;
    if (App.user.package.serie.forEach(function (e) {
        a[n] || (a[n] = [[], [], []]);
        var t = o <= 1 ? 0 : o <= 3 ? 1 : 2;
        a[n][t].push({
            html: '<img src="' + e.logo + '" />',
            data: {"data-id": e.id, "data-fn": "init", "data-page": "SeriesBrowse"}
        }), s % 7 == 0 ? (n++, o = 0) : o++, s++, i++
    }), a.length) for (var t = 0; t < a.length; t++) $(".vod .stores").append('<div class="zHolder zone-' + t + '" data-nav="false" />'), this.makeZone({
        rows: a[t],
        selector: ".zone-" + t,
        selection: "border",
        scroller: {width: "auto", height: "auto"},
        events: {keyLeft: this.left, keyRight: this.right}
    }); else $(".main").html('<div><p class="empty">' + _("There are no series stores") + "</p></div>"), $(".content").css({width: "100%"});
    this.contentWidth(i), this.setMargin(), this.arrows(), this.fnBack = App.pageDefault.page, this.enableMenu("Series"), this.select($(".zHolder:first-child .row:first-child .item:first-child"))
}, App.SeriesStore.calculateWidth = function (e) {
    return 1 === e ? 200 : e <= 3 ? 400 : 4 <= e && e <= 7 ? 700 : 7 < e ? e % 7 == 0 ? 700 * e : 700 * Math.floor(e / 7) + (e % 7 <= 3 ? 400 : 700) : void 0
}, App.SeriesStore.contentWidth = function (e) {
    $(window).width();
    var t = this.calculateWidth(e);
    $(".content.seriesStore .vod").css({width: t}), $(".content.seriesStore .vod .stores").css({width: t})
}, App.SeriesStore.setMargin = function () {
    var e = $(".vod"), t = $(".stiker"), i = ($(".content.vodhome").height() - e.height()) / 2;
    e.css({"margin-top": i}), t.css({"margin-top": i / 2})
}, App.SeriesStore.left = function () {
    App.LS.run("left");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = App.LS.getZoneIndex(App.LS.zoneActive.id),
        i = $(".content.vodhome").position().left;
    screenWidth > $("#" + App.LS.zoneActive.id).parent().width() || (t - 1 != 1 ? e < 200 ? this.moveContent(i + 200) : this.moveContent(i + offsetpos) : this.moveContent(60))
}, App.SeriesStore.right = function () {
    App.LS.run("right");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = $(".main").outerWidth(),
        i = App.LS.getZoneIndex(App.LS.zoneActive.id), s = $(".zHolder").length, n = 700 * s,
        a = $(".content.vodhome").position().left;
    t > $("#" + App.LS.zoneActive.id).parent().width() || (i - 1 !== s ? e < t / 2 ? this.moveContent(a - offsetpos + 200) : this.moveContent(a - offsetpos) : this.moveContent(t - n - 625))
}, App.SeriesStore.moveContent = function (e) {
    $(".content.vodhome").css({left: e})
}, App.SettingsAbout = GWareIPTV.UIBase.SettingsAbout, App.SettingsAbout.onLoad = function (e) {
    this.resetPageLayout(e), this.render(), this.enableMenu("SettingsAbout"), this.fnBack = App.pageDefault.page, $(".sub-menu").addClass("settings-menu")
}, App.SettingsAbout.render = function () {
    App.userSettings.renderMenu({
        selection: "sub-menu",
        selector: ".sub-menu"
    }), App.userSettings.renderOptions({section: "about", brand: ".title", selection: "bg"})
}, App.SettingsCatchupTV = GWareIPTV.UIBase.SettingsCatchupTV, App.SettingsCatchupTV.onLoad = function (e) {
    this.resetPageLayout(e), this.render(), this.enableMenu("SettingsAbout"), this.fnBack = App.pageDefault.page, $(".sub-menu").addClass("settings-menu")
},App.SettingsCatchupTV.render = function () {
    App.userSettings.renderMenu({
        selection: "sub-menu",
        selector: ".sub-menu"
    }), App.userSettings.renderOptions({section: "catchup"})
},App.SettingsDisclaimer = GWareIPTV.UIBase.SettingsDisclaimer,App.SettingsGeneral = GWareIPTV.UIBase.SettingsGeneral,App.SettingsGeneral.onLoad = function (e) {
    this.resetPageLayout(e), this.render(), this.enableMenu("SettingsAbout"), this.fnBack = App.pageDefault.page, $(".sub-menu").addClass("settings-menu")
},App.SettingsGeneral.render = function () {
    App.userSettings.renderMenu({
        selection: "sub-menu",
        selector: ".sub-menu"
    }), App.userSettings.renderOptions({section: "general", callback: "refresh"})
},App.SettingsLanguages = GWareIPTV.UIBase.SettingsLanguages,App.SettingsLanguages.onLoad = function (e) {
    this.resetPageLayout(e), this.render(), this.enableMenu("SettingsAbout"), this.fnBack = App.pageDefault.page, $(".sub-menu").addClass("settings-menu")
},App.SettingsLanguages.render = function () {
    App.userSettings.renderMenu({
        selection: "sub-menu",
        selector: ".sub-menu"
    }), App.userSettings.renderOptions({section: "languages", callback: "refresh"})
},App.SettingsScreenSaver = GWareIPTV.UIBase.SettingsScreenSaver,App.SettingsScreenSaver.onLoad = function (e) {
    this.resetPageLayout(e), this.render(), this.enableMenu("SettingsAbout"), this.fnBack = App.pageDefault.page, $(".sub-menu").addClass("settings-menu")
},App.SettingsScreenSaver.render = function () {
    App.userSettings.renderMenu({
        selection: "sub-menu",
        selector: ".sub-menu"
    }), App.userSettings.renderOptions({section: "screensaver", callback: "restart"})
},App.SettingsSpeedTest = GWareIPTV.UIBase.SettingsSpeedTest,App.SettingsSpeedTest.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getSize(), i = t / 250, s = {top: 30 * i, width: 25 * i, height: 105 * i}, n = s.width / 2, a = n,
        o = 90 * i;
    $(".gauge").css({width: t, height: t}), $(".gauge img").css({
        height: s.height,
        width: s.width,
        top: s.top,
        "margin-left": -1 * n,
        "-webkit-transform-origin": a + "px " + o + "px"
    }), this.render(), this.enableMenu("SettingsAbout"), this.fnBack = App.pageDefault.page, $(".sub-menu").addClass("settings-menu")
},App.SettingsSpeedTest.render = function () {
    App.userSettings.renderMenu({
        selection: "sub-menu",
        selector: ".sub-menu"
    }), this.makeZone({
        rows: [{
            html: _("Start test"),
            data: {"data-fn": "start"},
            style: {width: $(".controls").width() + "px"}
        }].matrix("horizontal"), selector: ".controls", selection: "bg"
    }), this.select($(".controls .row:first .item:first"))
},App.SettingsSupport = GWareIPTV.UIBase.SettingsSupport,App.SettingsSupport.onLoad = function (e) {
    this.resetPageLayout(e), store.set("iptv.subscription.warning", "off"), $(".warning").hide(), $(".settings-content .left").html(App.settings.contact.text.decodeHTML()), this.qr && this.qr.clear(), App.settings.contact.url && (this.qr = new QRCode($(".qr")[0], {
        text: App.settings.contact.url,
        width: 128,
        height: 128,
        colorDark: "#000000",
        colorLight: "#ffffff",
        correctLevel: QRCode.CorrectLevel.H
    })), this.render(), this.enableMenu("SettingsAbout"), this.fnBack = App.pageDefault.page, $(".sub-menu").addClass("settings-menu")
},App.SettingsSupport.render = function () {
    App.userSettings.renderMenu({
        selection: "sub-menu",
        selector: ".sub-menu"
    }), App.userSettings.renderOptions({section: "support", brand: ".title"})
},App.CatchUpHome = GWareIPTV.UIBase.CatchUpHome,App.CatchUp = GWareIPTV.UIBase.CatchUp,App.CatchUp.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.timerError = null, this.pausedTS = null, this.programme = {
        start_p: 0,
        end_p: 0
    }, this.makeZone({
        rows: [[{html: "&nbsp;", style: {width: window.innerWidth, height: window.innerHeight}}]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind", !0),
            keyRight: this.preselect.bind(this, "forward", !0),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-skip-previous"></span>',
            data: {"data-fn": "skipPrev"}
        }, {
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {
            html: '<span class="ico ico-fast-forward"></span>',
            data: {"data-fn": "forward"}
        }, {html: '<span class="ico ico-skip-next"></span>', data: {"data-fn": "skipNext"}}]],
        selector: ".sub-menu-player",
        selection: "button",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), this.item.ts || (this.item.ts = this.item.start), this.channel = App.util.getChannelData(this.item.id), this.skipInterval = 60, this.reload(!0);
    var t = App.epg.getProgrammeByTime(this.channel.id);
    this.programme.start_p = t.ut_start, this.programme.end_p = t.ut_end, this.item.report || (lg("catchup > start report action as catchup"), App.reports.set({
        type: this.item.report_action ? this.item.report_action : 5,
        name: this.channel.name,
        id: this.channel.id,
        epg: t.name
    })), App.player.setup({
        url: this.url,
        secure: this.channel.secure,
        selector: {controls: ".sub-menu-player"},
        events: {
            complete: function () {
            }, time: function (e) {
                30 < e.position && !this.reportSent && (this.report($(".panel-middle .title").text()), this.reportSent = !0)
            }.bind(this), play: function () {
                this.timerError && window.clearTimeout(this.timerError)
            }.bind(this), error: function (e) {
                lg("catchup > error event fired", "error"), lg(e)
            }.bind(this), ready: function () {
                App.player.play(), this.isPaused = !1, this.preselect("play"), App.timer({key: "catchup-playback"})
            }.bind(this)
        }
    }), this.timeline(), this.timerTimeline = window.setInterval(this.timeline.bind(this), 500), this.fnBack = "TV"
},App.CatchUp.infoUpdate = function () {
    var t = this;
    $(".info .sub-info-channel").each(function () {
        var e = App.epg.getProgrammeByTimestamp(t.item.id, t.item.ts);
        $(this).find(".logo img").attr("src", t.channel.logo.normal), $(this).find(".title").html(e.name), $(this).find(".time").html(new Date(1e3 * e.ut_start).niceTime() + " - " + new Date(1e3 * e.ut_end).niceTime()), $(this).find(".length").html(Math.floor((e.ut_end - e.ut_start) / 60) + " mins")
    })
},App.CatchUp.stop = function () {
    this.play(), pp({
        message: $(".sub-info-channel .title").text(),
        buttons: [{label: _("Resume Paused TV"), data: {"data-fn": "play"}}, {
            label: _("Continue Live TV"),
            data: {"data-fn": "switch2live"}
        }, {label: _("Quit TV"), data: {"data-fn": "btnBack"}}],
        isVertical: !1
    })
},App.FavoriteManager = GWareIPTV.UIBase.FavoriteManager,App.FavoriteManager.onLoad = function (e) {
    $(".main").css("background-color", "transparents"), this.resetPageLayout(e), this.selected = {left: [], right: []};
    for (var t = App.user.package.tv.group.length, i = null, s = [], n = 0; n < t; n++) i = App.user.package.tv.group[n], s.push({
        html: i.name,
        data: {"data-fn-select": "loadChannels", "data-id": i.id}
    });
    this.makeZone({
        rows: [s],
        selector: ".groups",
        selection: "bg",
        scroller: {width: "auto", height: "100%"}
    }), this.select($(".groups .item:first-child")), this.renderFavorites(), this.registerEvents(), this.fnBack = "TV", this.enableMenu("TV"), App.reports.set({type: 3})
},App.Recording = GWareIPTV.UIBase.Recording,App.Recording.onLoad = function (e) {
    this.html = e, this.renderMenu(), this.render(), this.select($(".clips .zHolder:nth-child(1) .row:nth-child(1) .item:nth-child(1)")), this.arrows()
},App.Recording.renderMenu = function () {
    this.resetPageLayout(this.html);
    var e = [];
    App.user.device.canRecord && e.push({
        html: _("Local"),
        data: {"data-fn": "changeType", "data-type": "local"}
    }), App.cloudPVR.enabled && e.push({
        html: _("Cloud"),
        data: {"data-fn": "changeType", "data-type": "cloud"}
    }), this.makeZone({
        rows: [e],
        selector: ".sub-menu",
        selection: "sub-menu",
        scroller: {width: "auto", height: "100%"}
    }), this.type || (this.type = $(".sub-menu .row .item:first-child").attr("data-type")), lg("recordings > rendering type [" + this.type + "]"), $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-type="' + this.type + '"]').addClass("selected")
},App.Recording.build = function (e) {
    $(".clips").empty();
    for (var t = $(".recordings-holder").width() / 2, i = $(".recordings-holder").height() / 4, s = (new Date).getTime() / 1e3, n = 0, a = [], o = 0, r = 0, l = 1, p = 0; p < e.length; p++) if (e[p].ut_end && parseInt(e[p].ut_end) < s || !e[p].ut_end) {
        var h = this.getData(e[p]);
        a[o] || (a[o] = [[], []]), r = o % 2 != 0 ? l <= 3 ? 0 : 1 : l <= 2 ? 0 : 1, a[o][r].push({
            html: '<div class="image-holder" style="background-image: url(' + h.image + ')"></div><div class="itemOverlay">' + h.channel + " - " + decodeURI(h.prog) + "</div>",
            data: {
                "data-dir": h.dir,
                "data-name": h.name,
                "data-title": h.channel + " - " + decodeURI(h.prog),
                "data-url": h.url,
                "data-pvr-id": h.pvr_id,
                "data-back": "Recording",
                "data-fn": "ask",
                "data-img": h.image
            },
            style: {width: t, height: i}
        }), l % 5 == 0 && (o++, l = 0), l++, n++
    }
    if (this.setWidthMargin(n), e.length) {
        for (p = 0; p < a.length; p++) $(".clips").append('<div class="zHolder zone-' + p + '" data-nav="false" />'), this.makeZone({
            rows: a[p],
            selector: ".zone-" + p,
            selection: "border",
            scroller: {width: "auto", height: "auto"},
            events: {keyRight: this.right, keyLeft: this.left}
        });
        return !1
    }
    lg("recordings > no recordings found or removable device missing"), $(".recordings").html('<p class="empty">' + _("There are no recordings") + "</p>"), App.LS.setupZones()
},App.Recording.setWidthMargin = function (e) {
    $(".yt").css({
        width: this.getWidth(e),
        "margin-top": ($(".content.full.recordings").height() - $(".yt").height()) / 2
    })
},App.Recording.getWidth = function (e) {
    return 1 === e ? 300 : 2 === e ? 500 : 3 <= e && e <= 5 ? 500 : 5 < e ? e % 5 == 0 ? e / 5 * 500 : e % 2 == 0 ? 500 * Math.floor(e / 5) + (e % 5 == 1 ? 150 : e % 5 == 2 ? 300 : 500) : 500 * Math.floor(e / 5) + (3 <= e % 5 ? 500 : e % 5 == 2 ? 500 : 300) : void 0
},App.Recording.right = function () {
    App.LS.run("right");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = $(".main").outerWidth(),
        i = App.LS.getZoneIndex(App.LS.zoneActive.id), s = $(".zHolder").length, n = $(".clips").width();
    n < t - 600 || (parseInt(i) - 1 !== s ? $(".content.recordings").position().left < t - n - 660 || ($(".content.recordings").position().left - e < t - n - 600 ? $(".content.recordings").css({left: t - n - 600}) : e < t / 2 || $(".content.recordings").css({left: $(".content.recordings").position().left - e + 10})) : $(".content.recordings").css({left: t - n - 610}))
},App.Recording.left = function () {
    App.LS.run("left");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = App.LS.getZoneIndex(App.LS.zoneActive.id),
        i = $(".main").outerWidth();
    i - 600 > $(".clips").width() || (parseInt(t) - 2 != 1 ? e < 200 ? $(".content.recordings").css({left: $(".content.recordings").position().left + 300}) : i / 2 < e || $(".content.recordings").css({left: $(".content.recordings").position().left + e}) : $(".content.recordings").css({left: 10}))
},App.Recording.ask = function (e) {
    if (["thd709qc", "did7005"].hasValue(App.user.device.stb) || "cloud" === this.type) return pp({
        message: _("What would you like to do?"),
        buttons: [{
            label: _("Play"),
            data: {"data-fn": "play", "data-title": e.title, "data-url": e.url, "data-img": e.img}
        }, {
            label: _("Delete"),
            data: {"data-fn": "delete", "data-dir": e.dir, "data-url": e.url, "data-pvr-id": e.pvrId}
        }]
    }), !1;
    this.play(e)
},App.RecordingPlayer = GWareIPTV.UIBase.RecordingPlayer,App.RecordingPlayer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {keyLeft: this.preselect.bind(this, "rewind"), keyRight: this.preselect.bind(this, "forward")}
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu-player",
        selection: "button",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), App.reports.set({
        type: 6,
        name: this.item.title
    }), $(".movie-header .title").html(this.item.title), $(".movie-header .img img").attr("src", this.item.img), this.start(), this.fnBack = this.item.back ? this.item.back : "Recording", this.enableMenu()
},App.RecordingPlayer.start = function () {
    App.player.setup({
        url: this.item.url, events: {
            complete: this.btnBack.bind(this), time: function (e) {
                $(".rec .length").html('<span class="ico ico-clock"> ' + Math.floor(e.duration / 60) + " min"), $(".progress-holder .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function (e) {
                lg(e), this.notification(_("Stream is not available at this moment"))
            }.bind(this), ready: function () {
                App.player.play()
            }
        }
    }), this.infoShow()
},App.Channel = GWareIPTV.UIBase.Channel,App.Channel.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]], selector: ".player-holder", selection: "none", events: {
            keyDown: function () {
                this.addInfoControls(), this.infoShow(!0)
            }.bind(this),
            keyLeft: this.keyChannelDown.bind(this),
            keyRight: this.keyChannelUp.bind(this),
            keyUp: this.share.bind(this)
        }
    }), this.quality = store.get("iptv.stream.quality"), this.lastSwipe = "", this.isSwiping = !1, this.infoControls = !1, this.isChannelListOpen = !1, this.showHint = !0, this.groupId = store.get("iptv.channel.group") || -1, this.groupId = parseInt(this.groupId), this.prevId = null, this.item || (this.item = App.user.package.tv.list[0]), this.listHide(), this.reload(this.item.id, !0), this.fnBack = this.item.back || "TV"
},App.Channel.addMiluControls = function () {
    this.makeZone({
        rows: [[{
            html: '<div class="test"><span class="ico ico-chevron-left"></span>',
            data: {"data-fn": "keyChannelDown"}
        }, {
            html: '<div class="test"><span class="ico ico-chevron-right"></span>',
            data: {"data-fn": "keyChannelUp"}
        }, {html: '<div class="test"><span class="ico ico-list"></span>', data: {"data-fn": "listShow"}}]],
        selector: ".panel-middle .miluControls",
        selection: "button",
        layer: "info"
    })
},App.Channel.reload = function (e, t) {
    if (lg("channel > reload starting"), this.hint = t ? "" : "Channel", this.channel && (this.prevId = this.channel.id), this.channel = App.util.getChannelData(e), !this.channel) return pp({
        message: _("Channel not available [2001]"),
        buttons: [{label: _("OK"), data: {"data-fn": "init", "data-page": App.pageDefault}}]
    }), lg("channel > unable to load channel data, unknown ID [" + e + "]"), !1;
    this.isPlaying = !1, this.isRecording = !1, this.isAnimated = !1, this.backup = void 0 === this.backup ? 0 : this.backup, this.input = "", this.pauseTime = null, this.delay = null, this.inputTimer = null, this.timerZap = null, this.nextChannel = this.next(1, !0), this.prevChannel = this.next(-1, !0), this.isBackupStream = !1, "left" === this.lastSwipe && ($(".panel-left, .panel-middle").remove(), $(".panel-right").css("left", 0).addClass("panel-middle").removeClass("panel-right")), "right" === this.lastSwipe && ($(".panel-right, .panel-middle").remove(), $(".panel-left").css("left", 0).addClass("panel-middle").removeClass("panel-left")), this.panelLeft = this.clonePanel("left"), this.panelRight = this.clonePanel("right"), $(".info").prepend(this.panelLeft).append(this.panelRight), $(".panel-left").attr("data-id", this.prevChannel), $(".panel-right").attr("data-id", this.nextChannel), $(".panel-middle").attr("data-id", this.channel.id), this.infoUpdate(), this.i18n(), App.user.device.canRecord || ($(".controls .span3").addClass("span4").removeClass("span3"), $(".record").remove()), this.timerZap = window.setTimeout(function () {
        lg("channel > long key press is false, continue channel setup"), this.hasPPV()
    }.bind(this), 500)
},App.Channel.infoUpdate = function () {
    var l = this;
    $(".panel").each(function () {
        var e = parseInt($(this).attr("data-id"), 10), t = App.epg.getProgrammeByTime(e),
            i = (new Date).getTime() / 1e3, s = t.ut_end - t.ut_start, n = (t.ut_end - t.ut_start) / 60,
            a = i - t.ut_start,
            o = 0 === t.ut_start ? "" : new Date(1e3 * t.ut_start).niceTime() + " - " + new Date(1e3 * t.ut_end).niceTime(),
            r = (0 === t.ut_start || Math.round((s - a) / 60), 0 === t.ut_start ? 0 : Math.round(100 * a / s));
        $(this).find(".favorites .text").html(App.favorites.is(e) ? "Remove from Favorites" : "Add to Favorites"), $(this).find(".logo img").attr("src", t.channel.logo), $(this).find(".title").html(t.name), 0 === n && $(this).find(".length").hide(), $(this).find(".length").html('<span class="ico ico-alarm"></span> ' + n + " min"), $(this).find(".time").html('<span class="ico ico-clock"></span> ' + o), $(this).find(".progress .bar").css("width", r + "%"), $(this).hasClass("panel-middle") && (l.channel.current = t), l.addMiluControls()
    })
},App.Channel.loadChannels = function (e) {
    var t = this.buildChannelsForCategory(e.id);
    if (!t.length) return $(".chl").html('<div class="chlEmpty"><p class="empty">' + _("There are no channels in this category") + "</p></div>"), !1;
    this.makeZone({
        rows: t.matrix("horizontal"),
        selector: ".chl",
        selection: "border",
        layer: "channel-list",
        events: {keyBack: this.listHide.bind(this)},
        chunkSize: 1024
    }), this.preselectRunningChannel && $('.chl .item[data-id="' + this.channel.id + '"]').length && this.select($('.chl .item[data-id="' + this.channel.id + '"]')), this.preselectRunningChannel = !1
},App.Channel.leftList = function () {
    App.LS.run("left")
},App.Channel.rightList = function () {
    App.LS.run("right");
    var e = $(".chl .selection").offset().left, t = $(".chl .selection").width();
    e === $(".tv").width() - (t - 10) && $(".chl").css({left: -(t - 50)})
},App.TV = GWareIPTV.UIBase.TV,App.TV.onLoad = function (e) {
    this.resetPageLayout(e), this.groupId = null, this.makeZone({
        rows: this.loadCategories(),
        selector: ".sub-menu",
        selection: "sub-menu"
    }), this.lastDirection = "", this.select($('.sub-menu .item[data-id="-1"]')), this.enableMenu("TV"), this.arrows(), App.reports.set({type: 2})
},App.TV.getChannels = function (e, t) {
    $(".channels-list").empty();
    var i, s = "", n = null, a = [], o = 0, r = [], l = 0, p = 0, h = 1;
    this.settings = store.get("iptv.channel.list") || {display: "tile", sort: "number"};
    for (var d = 0; d < App.user.package.tv.list.length; d++) n = App.user.package.tv.list[d], s = App.util.createCoverIcons({
        id: n.channel_id,
        type: "channel",
        icons: ["purchas"]
    }), (App.util.channelIsInGroup(n.id, e) || -1 === e) && a.push({
        html: "tile" === this.settings.display ? '<img src="' + n.logo.normal + '" />' + s : "<span>" + n.number + '</span><span><img src="' + n.logo.small + '" /></span><span>' + n.name + "</span>" + s,
        data: {"data-number": n.number, "data-name": n.name, "data-id": n.id, "data-fn": "loadInfo"}
    });
    "name" === this.settings.sort && a.sort(function (e, t) {
        return e.data["data-name"] < t.data["data-name"] ? -1 : 1
    }), $(".sub-menu-holder .sub-menu .item").removeClass("selected"), $('.sub-menu-holder .sub-menu .item[data-id="' + e + '"]').addClass("selected"), $(".channels-list").addClass(this.settings.display), i = a.length;
    for (d = 0; d < i; d++) r[l] || (r[l] = [[], []]), p = l % 2 != 0 ? h <= 3 ? 0 : 1 : h <= 2 ? 0 : 1, r[l][p].push(a[d]), h % 5 == 0 && (l++, h = 0), h++, o++;
    return {zones: r, items: o}
},App.TV.listChannels = function (e) {
    if (this.moveContent(60), this.groupId === e.id) return lg("tv home > same group selected, skipping channel listing"), !1;
    lg("tv home > listing channels for group [" + e.id + "]"), this.groupId = e.id;
    var t = this.getChannels(e.id, {
        tile: Math.floor($(".channels").width() / 110),
        list: Math.floor($(".channels").width() / 290)
    });
    if (0 === t.items) return this.destroyZone($(".channels").attr("id")), $(".channels-list").html('<p class="empty">' + _("There are no channels in this category") + "</p>"), $(".content.tv").css({width: "calc(100% - 120px)"}), !1;
    for (var i = t.zones, s = 0; s < i.length; s++) $(".channels-list").append('<div class="zHolder zone-' + s + '" data-nav="false" />'), this.makeZone({
        rows: i[s],
        selector: ".zone-" + s,
        selection: "border",
        scroller: {width: "auto", height: "auto"},
        events: {keyRight: this.right.bind(this), keyLeft: this.left.bind(this)}
    });
    this.object = $(".channels-list .zHolder:first-child .row:first-child .item:first-child"), this.loadInfo(), store.set("iptv.channel.group", this.groupId), this.setMargin(), this.setWidth(t)
},App.TV.setWidth = function (e) {
    var t = this.getWidth(e.items);
    t + 780 < $(".main").width() ? $(".content.tv").css({width: "calc(100% - 120px)"}) : $(".content.tv").css({width: t + 780})
},App.TV.getWidth = function (e) {
    if (e <= 3) return 165;
    if (e <= 5) return 278;
    var t = e % 5, i = Math.floor(e / 5);
    return 5 < e ? 0 === t ? 278 * i : 278 * i + (t <= 3 ? 165 : 278) : void 0
},App.TV.loadInfo = function (e) {
    var t = e ? e.id : parseInt(this.object[0].dataset.id), i = App.epg.getProgrammeByTime(t),
        s = null !== i.img ? i.img : "artwork/na.png";
    $(".channel .img-holder").html('<img src="' + s + '" />'), $(".channel-info .logo").html("<img src=" + i.channel.logo + " />"), $(".channel-info .title").html(i.name), $(".channel-info .prog-progress").html('<div class="progress"><div class="bar" style="width: ' + i.elapsed + '%" /></div>'), $(".channel-info .date").html('<span class="ico ico-clock"></span> ' + new Date(1e3 * i.ut_start).niceTime() + "-" + new Date(1e3 * i.ut_end).niceTime() + ' &nbsp; <span class="ico ico-calendar"></span> ' + (new Date).niceDate()), $(".channel-info .description").html(i.description), this.makeZone({
        items: [{
            html: 'Watch Now<span class="ico ico-chevron-right"></span>',
            data: {"data-fn": "init", "data-page": "Channel", "data-id": t}
        }], selector: ".watch-button", selection: "button", events: {keyRight: this.buttonRight.bind(this)}
    }), e && this.selectWatchNow()
},App.TV.buttonRight = function () {
    this.select($('.channels-list .item[data-id="' + $("#" + App.LS.zoneActive.id).find(".item")[0].dataset.id + '"]'));
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left;
    this.moveContent(-e + $(".main").outerWidth() / 2)
},App.TV.left = function () {
    App.LS.run("left");
    var e = $(".content.tv").position().left, t = $("#" + App.LS.zoneActive.id + " .selection").offset().left,
        i = (App.LS.getZoneIndex(App.LS.zoneActive.id), $(".main").outerWidth());
    0 < App.LS.zoneActive.id.indexOf("zone-1") || 0 <= App.LS.zoneActive.id.indexOf("watch") ? this.moveContent(60) : i / 2 < t || (t < 133 ? this.moveContent(e - t + 400) : 60 < e + t ? this.moveContent(60) : this.moveContent(e + t))
},App.TV.right = function () {
    App.LS.run("right");
    var e = $(".content.tv").position().left, t = $("#" + App.LS.zoneActive.id + " .selection").offset().left,
        i = $(".main").outerWidth(), s = App.LS.getZoneIndex(App.LS.zoneActive.id), n = $(".zHolder").length,
        a = $(".channels").width(), o = i - a - 720;
    a < i - 700 || (parseInt(s) - 1 !== n ? e < i - a - 700 || (e - t < i - a - 900 ? this.moveContent(o) : t < i / 2 || (i / 2 < t ? this.moveContent(e - t / 2) : this.moveContent(e - t))) : this.moveContent(o))
},App.TV.setMargin = function () {
    $(".channels-list").css({"margin-top": ($(".channels").height() - 340) / 2 + "px"})
},App.TV.moveContent = function (e) {
    $(".content.tv").css({left: e})
},App.TV.selectWatchNow = function () {
    this.moveContent(60), this.select($(".watch-button .scroller .row .item"))
},App.VODBrowse = GWareIPTV.UIBase.VODBrowse,App.VODBrowse.onLoad = function (e) {
    this.item ? (this.lastId = this.item.id, this.back = this.item.back, this.storeId = this.item.id) : this.storeId = this.lastId, this.store = App.util.getVODStore(this.storeId), this.resetPageLayout(e), this.updateStiker(this.store.name);
    var i = [{html: _("Back"), data: {"data-fn": "btnBack"}}, {
        html: _("Search"),
        data: {"data-fn": "searchPanelShow"}
    }];
    this.store.categories.forEach(function (e, t) {
        i.push({html: e.name, data: {"data-index": t, "data-fn": "loadCategory"}})
    }), this.makeZone({
        items: i,
        selector: ".sub-menu",
        selection: "sub-menu"
    }), this.select($('.sub-menu .item[data-index="0"]')), this.enableMenu("VOD"), this.fnBack = this.back, this.loadCategory(this.object.data()), this.arrows(), this.select($(".zHolder:first-child .row:first-child .item:first-child"))
},App.VODBrowse.loadCategory = function (e) {
    $(".vodbrowse .store").html("");
    var t = 1, i = [], s = 0, n = 0, a = 1;
    $(".sub-menu .item").each(function () {
        $(this).removeClass("selected")
    }), $('.sub-menu .item[data-index="' + e.index + '"]').addClass("selected"), this.movieIds = [];
    for (var o = 0; o < this.store.categories[e.index].movies.length; o++) {
        var r = this.store.categories[e.index].movies[o],
            l = App.util.createCoverIcons({id: r.id, type: "movie", icons: ["purchase", "watch"]});
        App.VODBrowse.movieIds.push(r.id), i[s] || (i[s] = [[], []]), n = a <= 3 ? 0 : 1, i[s][n].push({
            html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + r.poster + '" /><div class="movieOverlay">' + r.name + "</div>" + l,
            data: {"data-id": r.id, "data-fn": "selectMovie"}
        }), a % 5 == 0 && (s++, a = 0), a++, t++
    }
    if (!this.movieIds.length) return $(".main .store").html('<p class="empty">' + _("This category is empty") + "</p>").css({width: "calc(100% - 600px)"}), $(".content").css({width: "100%"}), !1;
    for (o = 0; o < i.length; o++) $(".container .store").append('<div class="zHolder zone-' + o + '" data-nav="false" />'), this.makeZone({
        rows: i[o],
        selector: ".zone-" + o,
        selection: "border",
        scroller: {width: "auto", height: "auto"},
        events: {keyRight: this.right, keyLeft: this.left}
    });
    this.setContentWidth(t), this.setMargin(), App.reports.set({
        type: 10,
        name: this.store.categories[e.index].name,
        id: this.store.categories[e.index].id
    })
},App.VODBrowse.setContentWidth = function (e) {
    this.zonesWidth = this.calculateWidth(e - 1), $(".content.vodbrowse .store").css({width: this.calculateWidth(e - 1) + "px"}), this.zonesWidth + 600 > $(".main").width() ? $(".content.vodbrowse").css({width: this.calculateWidth(e - 1) + 600 + "px"}) : $(".content.vodbrowse").css({width: "100%"})
},App.VODBrowse.setMargin = function () {
    $(".content.vodbrowse .store").css({"margin-top": ($(".content.vodbrowse").height() - 400) / 2})
},App.VODBrowse.selectMovie = function (e) {
    App.util.getMovieDetails(e.id, this.populateActive.bind(this))
},App.VODBrowse.populateActive = function (e) {
    var t = '<div class="activeOverlay"><div class="activeHolder"><div class="img-holder"><img src="' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '" /><div class="itemOverlay"><span class="ico ico-clock"></span>  ' + e.length + ' mins</div></div><div class="info"><div class="title">' + e.name + '</div><div class="description">' + e.moviedescriptions[0].description.limit() + '</div><div class="watch-button" /></div><div class="closeHolder"><div class="close" /></div>';
    $(".ui").append(t), this.makeZone({
        items: [{html: "x", data: {"data-fn": "closeOverlay", "data-id": e.id}}],
        selection: "close",
        selector: ".close",
        scroller: {width: "100%", height: "auto"},
        layer: "active-overlay"
    }), this.makeZone({
        items: [{
            html: _("Watch Now") + '<span class="ico ico-chevron-right"></span>',
            data: {"data-fn": "init", "data-page": "VODDetail", "data-id": e.id}
        }], selection: "button", selector: ".watch-button", layer: "active-overlay"
    }), this.select($(".activeHolder .info .watch-button .scroller .row .item"))
},App.VODBrowse.calculateWidth = function (e) {
    return 1 === e ? 133.3333 : 2 === e ? 233.3333 : 3 <= e && e <= 5 ? 433.3333 : 5 < e ? e % 5 == 0 ? e / 5 * 433.3333 : 433.3333 * Math.floor(e / 5) + (3 <= e % 5 ? 433.333 : e % 5 == 2 ? 233.3333 : 133.3333) : void 0
},App.VODBrowse.right = function () {
    App.LS.run("right");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = $(".main").outerWidth(),
        i = App.LS.getZoneIndex(App.LS.zoneActive.id), s = $(".zHolder").length, n = this.zonesWidth,
        a = $(".content.vodbrowse").position().left;
    lg(e + " off scr -> " + t), t - 600 > this.zonesWidth || (parseInt(i) - 1 !== s ? a < t - n - 620 || (a - e < t - n - 600 ? this.moveContent(t - n - 660) : t < e ? this.moveContent(-(e + t)) : e < t / 2 || (t / 2 < e ? this.moveContent(a - e / 2) : this.moveContent(a - e + 10))) : this.moveContent(t - n - 660))
},App.VODBrowse.left = function () {
    App.LS.run("left");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = App.LS.getZoneIndex(App.LS.zoneActive.id),
        i = $(".main").outerWidth(), s = $(".content.vodbrowse").position().left;
    i - 600 > this.zonesWidth || (parseInt(t) - 2 != 1 ? 10 < s + e ? this.moveContent(60) : e < 0 ? this.moveContent(s - (e - 200)) : e < 200 ? this.moveContent(s + 200) : i / 2.5 < e || this.moveContent(s + e) : this.moveContent(60))
},App.VODBrowse.closeOverlay = function (e) {
    if (void 0 !== e) return $(".activeOverlay").remove(), void this.select($('.zHolder .scroller .item[data-id="' + e.id + '"]'));
    this.select($('.zHolder .item[data-id="' + $(".watch-button .item").data("id") + '"]')), $(".activeOverlay").remove()
},App.VODBrowse.moveContent = function (e) {
    $(".content.vodbrowse").css({left: e})
},App.VODBrowse.keyBack = function () {
    0 < $(".ui").find(".activeOverlay").length ? this.closeOverlay() : this.pageLoader("VOD")
},App.VODBrowse.updateStiker = function (e) {
    for (var t = $(".stiker"), i = 0; i < t.length; i++) t[i].dataset.token = e
},App.VODBrowse.unload = function () {
    this.closeOverlay()
},App.VODDetail = GWareIPTV.UIBase.VODDetail,App.VODDetail.loaded = function (e) {
    this.movie = e, this.ppv = GWareBase64.encode(JSON.stringify({
        enabled: e.is_payperview,
        prices: e.movieprices,
        rule: e.rule_payperview,
        id: e.id,
        name: e.name,
        type: "movie"
    })), this.ppvNext = GWareBase64.encode(JSON.stringify({
        "data-fn": "init",
        "data-page": "VODMovie",
        "data-id": e.id
    })), $(".poster img").attr("src", App.settings.server_location.movie_location + '/images/movies/' + e.poster), $(".poster-duration").html(_('<span class="ico ico-clock"></span> {$} min', e.length)), $(".title").html(e.name), $(".rating").html(this.rating2stars(e.rating)), $(".description").html(this.getDescription(e.moviedescriptions)), $(".year").html(e.year), $(".language").html(e.language), $(".producer").html(e.producer), $(".director").html(e.director), $(".duration").html(_("{$} minutes", e.length)), $(".actors").html(this.limitActors(e.actors ? e.actors.limit(128) : "No information available")), $(".tags").html(this.getTags(e.tags)), this.loadAfter(), this.select($('.sub-menu .item[data-fn="ppvValidate"]')), this.enableMenu(), App.reports.set({
        type: 11,
        name: e.name,
        id: e.id
    })
},App.VODDetail.loadAfter = function () {
    this.makeZone({
        items: [{html: '<div class="back-img"></div>', data: {"data-fn-select": "moveContent"}}],
        selection: "bg",
        selector: ".backdrop",
        events: {keyLeft: this.left, keyDown: this.down}
    }), $(".back-img").css({"background-image": 'url("' + App.settings.server_location.movie_location + '/images/movies/' + this.movie.backdrop + '")'});
    var e = [{html: _("Previous"), data: {"data-fn": "prev"}}, {
        html: _("Back"),
        data: {"data-fn": "btnBack"}
    }, {
        html: _("Watch Trailer"),
        data: {
            "data-fn": "init",
            "data-page": "VODTrailer",
            "data-name": this.movie.name,
            "data-length": this.movie.length,
            "data-url": this.movie.trailer_url,
            "data-img": this.movie.poster
        }
    }, {
        html: _("Watch Movie"),
        data: {"data-fn": "ppvValidate", "data-ppv": this.ppv, "data-next": this.ppvNext}
    }, {
        html: '<span class="ico ico-share"></span> ' + _("Social Share"),
        data: {"data-fn": "fbShare", "data-title": this.movie.name, "data-type": "movie", "data-id": this.movie.id}
    }, {html: _("Next"), data: {"data-fn": "next"}}];
    void 0 !== App.VODBrowse && void 0 !== App.VODBrowse.movieIds || (e.shift(), e.pop(), this.fnBack = App.pageDefault.page), this.makeZone({
        rows: [e],
        selector: ".sub-menu",
        selection: "button"
    }), this.arrows()
},App.VODDetail.left = function () {
    this.moveContent(!1)
},App.VODDetail.down = function () {
    return !1
},App.VODDetail.moveContent = function (e) {
    var t = $(".content.full.vod");
    if (!1 === e) return App.LS.run("left"), void t.css({left: "60px"});
    0 !== t.position().left && 60 !== t.position().left || t.css({left: "-70.6%"})
},App.VOD = GWareIPTV.UIBase.VOD,App.VOD.onLoad = function (e) {
    this.resetPageLayout(e);
    var i = 0, s = 1, n = 0, a = [], o = 0;
    if (App.user.package.movie.forEach(function (e) {
        if (e.isMain) {
            if (0 === e.categories.length && 0 === e.subs.length) ({"data-fn": "warn", "data-image": e.logo}); else {
                a[n] || (a[n] = [[], [], []]);
                var t = o <= 1 ? 0 : o <= 3 ? 1 : 2;
                a[n][t].push({
                    html: '<img src="' + e.logo + '" />',
                    data: {
                        "data-id": e.id,
                        "data-fn": "init",
                        "data-back": "VOD",
                        "data-image": e.logo,
                        "data-page": 0 === e.subs.length ? "VODBrowse" : "VODSub"
                    }
                }), s % 7 == 0 ? (n++, o = 0) : o++, i++
            }
            s++
        }
    }), $(".vod .move-right").css({left: $(".main").outerWidth() - 350}), this.setWidth(i), this.setMargin(), a) for (var t = 0; t < a.length; t++) $(".vod .stores").append('<div class="zHolder zone-' + t + '" data-nav="false" />'), this.makeZone({
        rows: a[t],
        selector: ".zone-" + t,
        selection: "border",
        scroller: {width: "auto", height: "auto"},
        events: {keyRight: this.right, keyLeft: this.left}
    }); else $(".main").html('<div><p class="empty">' + _("There are no movie stores") + "</p></div>"), $(".content").css({width: "100%"});
    this.fnBack = App.pageDefault.page, this.enableMenu("VOD"), this.arrows(), this.select($(".zHolder:first-child .item:first-child")), App.reports.set({type: 9})
},App.VOD.calculateWidth = function (e) {
    return 1 === e ? 200 : e <= 3 ? 400 : 4 <= e && e <= 7 ? 700 : 7 < e ? e % 7 == 0 ? 700 * e : 700 * Math.floor(e / 7) + (e % 7 <= 3 ? 400 : 700) : void 0
},App.VOD.setWidth = function (e) {
    var t = this.calculateWidth(e);
    $(".content.vodhome").css({width: t + 360}), $(".content.vodhome .vod").css({width: t})
},App.VOD.setMargin = function () {
    var e = $(".vod"), t = $(".stiker"), i = ($(".content.vodhome").height() - e.height()) / 2;
    e.css({"margin-top": i}), t.css({"margin-top": i / 2})
},App.VOD.right = function () {
    App.LS.run("right");
    var e = $(".content.vodhome").position().left, t = $("#" + App.LS.zoneActive.id + " .selection").offset().left,
        i = $(".main").outerWidth(), s = App.LS.getZoneIndex(App.LS.zoneActive.id), n = $(".zHolder").length,
        a = 700 * n;
    s - 1 !== n ? 0 !== t && t < i / 2 ? this.moveContent(e - t + 200) : this.moveContent(e - t) : this.moveContent(i - a - 660)
},App.VOD.left = function () {
    App.LS.run("left");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = App.LS.getZoneIndex(App.LS.zoneActive.id),
        i = $(".content.vodhome").position().left, s = $(".main").width();
    t - 1 != 1 ? e < 200 ? this.moveContent(i + 200) : s / 2 < e || this.moveContent(i + e) : this.moveContent(60)
},App.VOD.moveContent = function (e) {
    $(".content.vodhome").css({left: e + "px"})
},App.VODMovie = GWareIPTV.UIBase.VODMovie,App.VODMovie.onLoad = function (e) {
    this.movie = null, this.resetPageLayout(this.html, !0), this.item.resume && App.history.add("movies", {
        id: this.item.id,
        p: this.item.resume
    }), App.util.getMovieDetails(this.item.id, this.loaded.bind(this))
},App.VODMovie.loaded = function (e) {
    this.makeZone({
        rows: [[{html: "&nbsp;", style: {width: window.innerWidth, height: window.innerHeight}}]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyUp: this.share.bind(this),
            keyLeft: this.preselect.bind(this, "rewind", !0),
            keyRight: this.preselect.bind(this, "forward", !0),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.createMenu(), this.movie = e, $(".movie-header .title").html(this.movie.name), $(".player-control .length").html('<span class="ico ico-clock"></span> ' + this.movie.length + " min"), $(".movie-header .img img").attr("src", App.settings.server_location.movie_location + '/images/movies/' + e.poster), $(".progress-holder .duration").html(Math.floor(this.movie.length / 60) + " h " + Math.floor(this.movie.length % 60) + " mins"), this.fnBack = this.item.back ? this.item.back : "VODDetail", this.reportSent = !1, this.hasChildLock(), this.enableMenu(), $(document).on("click", ".report", GWareIPTV.UIBase.VODMovie.keyBlue)
},App.VODMovie.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu-player",
        selection: "button",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    })
},App.VODSub = GWareIPTV.UIBase.VODSub,App.VODSub.onLoad = function (e) {
    this.item ? (this.lastId = this.item.id, this.storeId = this.item.id) : this.storeId = this.lastId, this.resetPageLayout(e);
    var t = App.util.getVODStore(this.storeId), s = 0, n = 1, a = 0, o = [], r = 0;
    if (t.subs.forEach(function (e) {
        var t = App.util.getVODStore(e);
        if (0 === t.categories.length && 0 === t.subs.length) ({"data-fn": "warn", "data-image": t.logo}); else {
            o[a] || (o[a] = [[], [], []]);
            var i = r <= 1 ? 0 : r <= 3 ? 1 : 2;
            o[a][i].push({
                html: '<img src="' + t.logo + '" />',
                data: {
                    "data-id": t.id,
                    "data-fn": "init",
                    "data-back": "VOD",
                    "data-image": t.logo,
                    "data-page": 0 === t.subs.length ? "VODBrowse" : "VODSub"
                }
            }), n % 7 == 0 ? (a++, r = 0) : r++, s++
        }
        n++
    }), $(".vod .move-right").css({left: $(".main").outerWidth() - 350}), this.setWidth(s), this.setMargin(), o) for (var i = 0; i < o.length; i++) $(".vod .stores").append('<div class="zHolder zone-' + i + '" data-nav="false"/>'), this.makeZone({
        rows: o[i],
        selector: ".zone-" + i,
        selection: "border",
        scroller: {width: "auto", height: "auto"},
        events: {keyRight: this.right, keyLeft: this.left},
        align: "center"
    }); else $(".main .content").remove(), $(".main").html('<div><p class="empty">' + _("There are no movie stores") + "</p></div>");
    this.makeZone({
        items: [{html: _("Back"), data: {"data-fn": "btnBack"}}],
        selector: ".sub-menu",
        selection: "bg"
    }), this.setMargin(), this.enableMenu("VOD"), this.fnBack = "VOD", this.arrows(), App.reports.set({
        type: 9,
        name: t.name,
        id: t.id
    })
},App.VODSub.calculateWidth = function (e) {
    return 1 === e ? 200 : e <= 3 ? 400 : 4 <= e && e <= 7 ? 700 : 7 < e ? e % 7 == 0 ? 700 * e : 700 * e + (e % 7 <= 3 ? 400 : 700) : void 0
},App.VODSub.setWidth = function (e) {
    var t = this.calculateWidth(e);
    $(".content.vodhome .vod").css({width: t})
},App.VODSub.setMargin = function () {
    var e = $(".vod"), t = $(".stiker"), i = ($(".content.vodhome").height() - e.height()) / 2;
    e.css({"margin-top": i}), t.css({"margin-top": i / 2})
},App.VODSub.right = function () {
    App.LS.run("right");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = $(".main").outerWidth(),
        i = App.LS.getZoneIndex(App.LS.zoneActive.id), s = $(".zHolder").length, n = 700 * s,
        a = $(".content.vodhome").position().left;
    n < t || (i !== s ? e < t / 2 ? this.moveContent(a - e + 200) : this.moveContent(a - e) : this.moveContent(t - n - 620))
},App.VODSub.left = function () {
    App.LS.run("left");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = App.LS.getZoneIndex(App.LS.zoneActive.id),
        i = $(".main").outerWidth(), s = 700 * $(".zHolder").length, n = $(".content.vodhome").position().left;
    s < i || (1 !== t ? e < 200 ? this.moveContent(n + 200) : this.moveContent(n + e) : this.moveContent(60))
},App.VODSub.moveContent = function (e) {
    $(".content.vodhome").css({left: e})
},App.VODTrailer = GWareIPTV.UIBase.VODTrailer,App.VODTrailer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind"),
            keyRight: this.preselect.bind(this, "forward"),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu-player",
        selection: "buttons",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), $(".movie-header .title").html(this.item.name), $(".player-control .length").html('<span class="ico ico-clock"></span> ' + this.item.length + " min"), $(".movie-header .img img").attr("src", App.settings.server_location.movie_location + '/images/movies/' + this.item.img), App.player.setup({
        url: this.item.url,
        events: {
            complete: function () {
                this.pageLoader(this.fnBack)
            }.bind(this), time: function (e) {
                $(".progress-holder .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function () {
                pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), this.fnBack = "VODDetail", App.reports.set({type: 12, name: this.item.name})
},App.Youtube = GWareIPTV.UIBase.Youtube,App.Youtube.loaded = function () {
    var e = null, t = [];
    this.lastDirection = "", this.resetPageLayout(this.html), t.push({
        html: _("Search"),
        data: {"data-fn": "searchPanelShow"}
    });
    for (var i = 0; i < this.categories.length; i++) "Music" !== (e = this.categories[i]).name && t.push({
        html: e.name,
        data: {"data-id": e.id, "data-channel-id": e.channelId, "data-name": e.name, "data-fn": "loadCategory"}
    });
    this.makeZone({
        items: t,
        selector: ".sub-menu",
        selection: "sub-menu"
    }), App.reports.set({type: 19}), this.fnBack = App.pageDefault.page, this.select($(".sub-menu .item:nth-child(2)")), this.loadCategory(this.object.data()), this.arrows(), this.setMargin(), this.enableMenu("Youtube")
},App.Youtube.loadCategory = function (e) {
    $(".clips").empty();
    var l = this;
    l.index = 0, $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-id="' + e.id + '"]').addClass("selected"), this.loading($(".clips")), this.videos = [], xhr({
        url: "https://www.googleapis.com/youtube/v3/videos?part=snippet&maxResults=50&chart=mostPopular&videoCategoryId=" + e.id + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var s = 0, n = [], a = 0, o = 0, r = 1;
            e.items.forEach(function (e, t) {
                var i = "";
                e.snippet.thumbnails && (i = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url), l.videos.push({
                    id: e.id,
                    image: i,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), n[a] || (n[a] = [[], []]), o = a % 2 != 0 ? r <= 3 ? 0 : 1 : r <= 2 ? 0 : 1, n[a][o].push({
                    html: '<div class="image-holder" style="background-image: url(' + i + ')"></div><div class="itemOverlay">' + e.snippet.title.limit(25) + "</div>",
                    data: {
                        "data-index": t,
                        "data-fn": "showInfo",
                        "data-title": e.snippet.title,
                        "data-desc": e.snippet.description,
                        "data-back": "Youtube",
                        "data-img": i,
                        "data-id": e.id
                    }
                }), r % 5 == 0 && (a++, r = 0), r++, s++
            }), l.setContentWidth(s), l.zonesWidth = l.getWidth(s);
            for (var t = 0; t < n.length; t++) $(".clips").append('<div class="zHolder zone-' + t + '" data-nav="false" />'), l.makeZone({
                rows: n[t],
                selector: ".zone-" + t,
                selection: "border",
                scroller: {width: "auto", height: "auto"},
                events: {keyRight: l.right.bind(this), keyLeft: l.left.bind(this)}
            });
            l.select($(".clips:nth-child(1) .zHolder:nth-child(2)  .row:nth-child(1) .item:nth-child(1)"))
        },
        error: function () {
            l.notification("An error occured, please try again later"), l.setContentWidth(1)
        }
    }), $(".content.youtube").css({left: "60px"})
},App.Youtube.searchPanelGo = function () {
    var l = this, e = $('input[name="term"]').val().toLowerCase();
    "" !== e && ($(".clips").html('<div class="spinner-holder"><span class="text">Loading</span><div class="loader"></div></div>'), this.videos = [], xhr({
        url: "https:///www.googleapis.com/youtube/v3/search?part=snippet&maxResults=50&q=" + e + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var s = 0, n = [], a = 0, o = 0, r = 1;
            e.items.forEach(function (e, t) {
                var i = "";
                e.snippet.thumbnails && (i = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url), l.videos.push({
                    id: e.id,
                    image: i,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), n[a] || (n[a] = [[], []]), o = a % 2 != 0 ? r <= 3 ? 0 : 1 : r <= 2 ? 0 : 1, n[a][o].push({
                    html: '<div class="image-holder" style="background-image: url(' + i + ')"></div><div class="itemOverlay">' + e.snippet.title.limit(25) + "</div>",
                    data: {
                        "data-index": t,
                        "data-fn": "showInfo",
                        "data-title": e.snippet.title,
                        "data-desc": e.snippet.description,
                        "data-back": "Youtube",
                        "data-img": i,
                        "data-id": e.id
                    }
                }), r % 5 == 0 && (a++, r = 0), r++, s++
            }), l.setContentWidth(s), l.zonesWidth = l.getWidth(s);
            for (var t = 0; t < n.length; t++) $(".clips").append('<div class="zHolder zone-' + t + '" data-nav="false" />'), l.makeZone({
                rows: n[t],
                selector: ".zone-" + t,
                selection: "border",
                scroller: {width: "auto", height: "auto"},
                events: {keyRight: l.right.bind(this), keyLeft: l.left.bind(this)}
            });
            l.select($(".clips:nth-child(1) .zHolder:nth-child(2)  .row:nth-child(1) .item:nth-child(1)"))
        }
    }), this.searchPanelHide())
},App.Youtube.setContentWidth = function (e) {
    var t = this.getWidth(e);
    $(".yt").css({width: t + "px"})
},App.Youtube.getWidth = function (e) {
    return 1 === e ? 300 : 2 === e ? 500 : 3 <= e && e <= 5 ? 500 : 5 < e ? e % 5 == 0 ? e / 5 * 500 : e % 2 == 0 ? 500 * Math.floor(e / 5) + (e % 5 == 1 ? 150 : e % 5 == 2 ? 300 : 500) : 500 * Math.floor(e / 5) + (3 <= e % 5 ? 500 : e % 5 == 2 ? 500 : 300) : void 0
},App.Youtube.right = function () {
    App.LS.run("right");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = $(".main").outerWidth(),
        i = App.LS.getZoneIndex(App.LS.zoneActive.id), s = $(".zHolder").length, n = $(".clips").width();
    n < t - 600 || (parseInt(i) - 3 != s - 1 ? $(".content.youtube").position().left < t - n - 660 || ($(".content.youtube").position().left - e < t - n - 600 ? $(".content.youtube").css({left: t - n - 600}) : e < t / 2 || $(".content.youtube").css({left: $(".content.youtube").position().left - e + 10})) : $(".content.youtube").css({left: t - n - 620}))
},App.Youtube.left = function () {
    App.LS.run("left");
    var e = $("#" + App.LS.zoneActive.id + " .selection").offset().left, t = App.LS.getZoneIndex(App.LS.zoneActive.id),
        i = $(".main").outerWidth();
    i - 600 > $(".clips").width() || (parseInt(t) - 2 != 1 ? 10 < $(".content.youtube").position().left + e ? $(".content.youtube").css({left: 10}) : e < 200 ? $(".content.youtube").css({left: $(".content.youtube").position().left + 300}) : i / 2.5 < e || $(".content.youtube").css({left: $(".content.youtube").position().left + e}) : $(".content.youtube").css({left: 10}))
},App.Youtube.setMargin = function () {
    var e = $(".content.youtube .yt"), t = $(".content.youtube").height();
    e.css({"margin-top": (t - 400) / 2})
},App.Youtube.showInfo = function (e) {
    var t = '<div class="activeOverlay youtubeOverlay"><div class="activeHolder"><div class="img-holder"><img src="' + e.img + '" /><div class="itemOverlay"></div></div><div class="info"><div class="title">' + e.title.limit(50) + '</div><div class="description">' + e.desc.limit(125) + '</div><div class="watch-button" /></div><div class="closeHolder"><div class="close" /></div>';
    $(".ui").append(t), this.makeZone({
        items: [{
            html: "x",
            data: {"data-fn": "closeOverlay", "data-back": "Youtube", "data-id": e.id}
        }], selection: "close", selector: ".close", scroller: {width: "100%", height: "auto"}, layer: "activeOver"
    }), this.makeZone({
        items: [{
            html: _("Watch Now") + '<span class="ico ico-chevron-right"></span>',
            data: {
                "data-fn": "init",
                "data-page": "YoutubePlayer",
                "data-index": e.index,
                "data-title": e.title,
                "data-desc": e.desc,
                "data-back": "Youtube"
            }
        }], selection: "button", selector: ".watch-button", layer: "activeOver"
    }), this.select($(".activeHolder .info .watch-button .scroller .row .item"))
},App.Youtube.closeOverlay = function (e) {
    if (void 0 !== e) return $(".activeOverlay").remove(), void this.select($('.zHolder .scroller .item[data-id="' + e.id + '"]'));
    this.select($('.zHolder .item[data-index="' + $(".watch-button .item").data("index") + '"]')), $(".activeOverlay").remove()
},App.Youtube.keyBack = function () {
    0 < $(".ui").find(".activeOverlay").length ? this.closeOverlay() : this.pageLoader("Home")
},App.Youtube.unload = function () {
    this.closeOverlay()
},App.YoutubePlayer = GWareIPTV.UIBase.YoutubePlayer,App.YoutubePlayer.infoUpdate = function () {
    $(".panel").each(function () {
        var e = App.YoutubePlayer.videos[parseInt($(this).attr("data-index"))];
        $(this).find(".logo img").attr("src", e.image), $(this).find(".title").html(e.title), $(this).find(".description").html(e.description)
    })
},App.YoutubePlayer.reload = function () {
    var e = App.baseURL.youtube + "?videoid=" + this.videos[this.index].id,
        t = this.index < this.videos.length - 1 ? this.index + 1 : 0,
        i = 0 < this.index ? this.index - 1 : this.videos.length - 1;
    App.reports.set({type: 18, name: this.videos[this.index].title}), App.player.setup({
        url: e,
        events: {
            complete: function () {
                this.next()
            }.bind(this), time: function (e) {
                $(".text-right .length").html('<span class="ico ico-clock"></span> ' + Math.floor(e.duration / 60) + " min"), $(".info .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function (e) {
                lg(e), pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), "left" === this.lastSwipe && ($(".panel-left, .panel-middle").remove(), $(".panel-right").addClass("panel-middle").removeClass("panel-right").css("left", "0")), "right" === this.lastSwipe && ($(".panel-right, .panel-middle").remove(), $(".panel-left").addClass("panel-middle").removeClass("panel-left").css("left", "0")), $(".info").prepend(this.clonePanel("left")).append(this.clonePanel("right")), $(".panel-left").attr("data-index", i), $(".panel-right").attr("data-index", t), $(".panel-middle").attr("data-index", this.index), $(".panel-left .sub-menu, .panel-right .sub-menu").html(""), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".panel-middle .sub-menu-player",
        selection: "button",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), this.infoUpdate(), this.preselect("play")
};
//# sourceMappingURL=12-sohanpapdi.min.js.map