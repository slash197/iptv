GWareIPTV.UIPrototype.prototype.updateTime = function () {
    $(".footer .time").html((new Date).niceTime())
}, GWareIPTV.UIPrototype.prototype.updateWeather = function (e, t) {
    if (lg("weather > data arrived"), App.settings.access.feature.weather) {
        var i = (new Date).getHours(), s = i < 6 || 21 < i ? "night" : "day";
        $(".weather .city").html(t), $(".weather .degree").html(e.temp_C + " &deg;C"), $(".weather .icon").html('<img src="artwork/weather/' + s + "/" + e.weatherCode + '.png" />')
    }
}, GWareIPTV.UIPrototype.prototype.resetPageLayout = function (e, t) {
    lg("ui controller > resetting page layout [onLoad] fullscreen [" + t + "]"), $(".header, .footer, .header-navigation").css("display", t ? "none" : "block"), $(".main").css("height", t ? "100%" : "calc(100% - 200px)").html(e), this.isPlayerPage = this.playerPages.hasValue(this.name), this.setupHoverMenu(t)
}, GWareIPTV.UIPrototype.prototype.setupFrame = function () {
    this.setupMenuFrame({selection: "bg", vertical: !1, type: "both", preType: "both", perRow: !1})
}, GWareIPTV.UIPrototype.prototype.loadCustomStyles = function () {
    var e = App.hex2rgb(App.settings.style.highlight.primary),
        t = [{selector: "body", style: {"font-size": App.getFontSize()}}, {
            selector: ".item.selected",
            style: {"background-color": App.settings.style.highlight.secondary}
        }, {
            selector: ".selection.selection-bg, .overlay-controls div:hover",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".selection.selection-border",
            style: {"border-color": App.settings.style.highlight.primary}
        }, {
            selector: ".selection.selection-yt,.selection.selection-settings, .player-control .sub-menu.hot-zone .scroller .row .item.active, .info .panel .sub-menu .scroller .row .item.active",
            style: {"border-color": App.settings.style.highlight.primary}
        }, {
            selector: ".bg-border.hot-zone .scroller .row .item.active",
            style: {
                "background-color": App.settings.style.highlight.primary,
                "border-color": App.settings.style.highlight.primary
            }
        }, {
            selector: ".epg .programmes .timeline",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".metro-news-date",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".hover-menu .btn",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".progress .bar",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".ad-placeholder",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .line",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .cursor",
            style: {"border-bottom": "10px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .tick",
            style: {"border-left": "3px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".progress .handle",
            style: {"background-color": "rgba(" + e.r + ", " + e.g + ", " + e.b + ", 0.5)"}
        }, {
            selector: ".progress .handle .dot",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".movies.hot-zone .item .sec-info",
            style: {"background-color": "rgba(" + e.r + ", " + e.g + ", " + e.b + ", 0.8)"}
        }, {
            selector: ".detail .data .rating,.settings-menu-holder .settings-menu .scroller .item.active,.settings-menu-holder .settings-menu .scroller .item.selected,.settings-zone.hot-zone .scroller .item.active, .player-control .sub-menu.hot-zone .scroller .row .item.active, .info .panel .sub-menu .scroller .row .item.active",
            style: {color: "rgba(" + e.r + ", " + e.g + ", " + e.b + ", 1)"}
        }];
    App.injectStyle(t)
}, App.Apps = GWareIPTV.UIBase.Apps, App.EPGh = GWareIPTV.UIBase.EPGh, App.EPGv = GWareIPTV.UIBase.EPGv, App.HomeHOTEL = GWareIPTV.UIBase.HomeHOTEL, App.Home = GWareIPTV.UIBase.Home, App.Home.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home"), App.metro._fetch(this.renderMenu.bind(this)), App.ads._load(), this.fromPage = null
}, App.Home.renderMenu = function () {
    this.makeZone({
        rows: [[{
            html: _("Movies"),
            data: {"data-fn": "switchMetro", "data-type": "movies"}
        }, {html: _("Series"), data: {"data-fn": "switchMetro", "data-type": "series"}}, {
            html: _("Channels"),
            data: {"data-fn": "switchMetro", "data-type": "tv"}
        }]], selector: ".home-menu", selection: "bg"
    }), App.showPage(), this.switchMetro({type: "movies"})
}, App.Home.switchMetro = function (e) {
    for (var t = [], i = App.metro[e.type], s = 0; s < i.length; s++) {
        var a = "movies" === e.type ? "VODDetail" : "series" === e.type ? "SeriesDetail" : "Channel",
            r = "tv" === e.type ? i[s].channel_id : "series" === e.type ? i[s].vod_id : i[s].id,
            n = "series" === e.type ? App.util.getStoreIdByNameId(i[s].name, i[s].id) : "",
         // o = "tv" === e.type ? null : App.settings.server_location.movie_location + '/images/movies/' + i[s].backdrop,
		    o = "tv" === e.type ? null :"series" === e.type ? App.settings.server_location.serie_location + '/images/series/' + i[s].backdrop : App.settings.server_location.movie_location + '/images/movies/' + i[s].backdrop,
            p = "tv" === e.type ? App.settings.server_location.channel_location + '/images/channels/' + i[s].channel_image : null;
        t.push([{
            html: i[s].name,
            data: {
                "data-id": r,
                "data-fn-select": "metroDetail",
                "data-fn": "init",
                "data-store-id": n,
                "data-page": a,
                "data-type": e.type,
                "data-backdrop": o,
                "data-icon": p
            }
        }])
    }
    this.makeZone({
        rows: t,
        selector: ".metro",
        selection: "bg",
        scroller: {width: "100%", height: "auto"}
    }), this.select($(".metro .row:first-child .item"))
}, App.Home.metroDetail = function (e) {
    if ("tv" !== e.type) $(".metro-holder").css({
        "background-color": "transparent",
        "background-image": 'url("' + e.backdrop + '")'
    }), $(".metro-details").html(""); else {
        $(".metro-holder").css({"background-color": "rgba(31, 31, 31, 0.75)", "background-image": "none"});
        var t = App.epg.getProgrammeByTime(e.id);
        $(".metro-details").html('<div class="text"><p>' + t.name + '</p><div class="progress"><div class="bar" style="width: ' + t.elapsed + '%" /></div><p>' + t.description + '</p></div><img src="' + e.icon + '" />')
    }
}, App.HomePLAYER = GWareIPTV.UIBase.HomePLAYER, App.HomeTV = GWareIPTV.UIBase.HomeTV, App.HomeVOD = GWareIPTV.UIBase.HomeVOD, App.Offline = GWareIPTV.UIBase.Offline, App.Search = GWareIPTV.UIBase.Search, App.User = GWareIPTV.UIBase.User, App.Album = GWareIPTV.UIBase.Album, App.Music = GWareIPTV.UIBase.Music, App.Advertisement = GWareIPTV.UIBase.Advertisement, App.SeriesBrowse = GWareIPTV.UIBase.SeriesBrowse, App.SeriesDetail = GWareIPTV.UIBase.SeriesDetail, GWareIPTV.UIBase.SeriesDetail.getEpisodes = function (e, t) {
    var i = this.serie.seasons[e], s = GWareBase64.encode(JSON.stringify(i.ppv));
    t || ($(".vod.full").css("background-image"), i.backdrop, $(".vod.full").css({
        "background-image": 'url("' + i.backdrop + '")',
        "background-repeat": "no-repeat",
        "background-size": "cover"
    })), $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-index="' + e + '"]').addClass("selected"), $(".poster").css({
        "background-image": 'url("' + i.poster + '")',
        "background-repeat": "no-repeat",
        "background-size": "contain"
    }), $(".title").html(i.name), $(".rating").html(this.rating2stars(i.rating)), $(".description").html(this.getDescription(i.descriptions)), $(".year").html(i.year), $(".language").html(i.language), $(".duration").html(_("{$} minutes", i.length)), $(".actors").html(this.limitActors(i.actors)), $(".tags").html(this.getTags(i.tags));
    for (var a = [], r = 0; r < i.episodes.length; r++) {
        var n = i.episodes[r], o = r + 1 < 10 ? "0" + (r + 1) : r + 1,
            p = App.util.createCoverIcons({id: n.id, type: "episode", icons: ["watch"]});
        a[r] || (a[r] = []), a[r].push({
            html: "<span>" + o + ".</span> " + n.name + p,
            data: {
                "data-fn": "ppvValidate",
                "data-ppv": s,
                "data-next": GWareBase64.encode(JSON.stringify({
                    "data-page": "SeriesPlayer",
                    "data-fn": "init",
                    "data-store-id": this.item.storeId,
                    "data-id": this.serie.id,
                    "data-season": e,
                    "data-episode": r
                }))
            }
        })
    }
    return App.reports.set({type: 15, name: this.serie.name, id: this.serie.id}), a
}, App.SeriesDetail.btnBack = function () {
    this.item.storeId && App.SeriesBrowse.movieIds ? this.pageLoader("SeriesBrowse", "init", {id: this.item.storeId}) : this.pageLoader(App.pageDefault.page)
}, App.SeriesPlayer = GWareIPTV.UIBase.SeriesPlayer, App.SeriesPlayer.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "menu-player",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        align: "center"
    })
}, App.SeriesPlayer.startEpisode = function () {
    var e = [], t = this.serie.seasons[this.season].episodes[this.episode], i = this.serie.seasons[this.season].poster;
    if ($(".movie-header .title").html(t.name), $(".player-info .poster img").attr("src", i), this.episodeName = t.name, 1 < t.streams.length) {
        for (var s = 0; s < t.streams.length; s++) e.push({
            label: t.streams[s].language,
            data: {"data-fn": "selectStream", "data-index": s}
        });
        return pp({message: _("Choose movie language"), buttons: e, isVertical: 3 < e.length}), !1
    }
    this.selectStream({index: 0})
}, App.SeriesStore = GWareIPTV.UIBase.SeriesStore, App.SettingsAbout = GWareIPTV.UIBase.SettingsAbout, App.SettingsAbout.render = function () {
    App.userSettings.renderMenu({
        selection: "settings",
        type: "vertical"
    }), App.userSettings.renderOptions({section: "about", brand: ".title", selection: "settings"})
}, App.SettingsCatchupTV = GWareIPTV.UIBase.SettingsCatchupTV, App.SettingsCatchupTV.render = function () {
    App.userSettings.renderMenu({
        selection: "settings",
        type: "vertical"
    }), App.userSettings.renderOptions({selection: "settings", section: "catchup", brand: ".title"})
}, App.SettingsDisclaimer = GWareIPTV.UIBase.SettingsDisclaimer, App.SettingsGeneral = GWareIPTV.UIBase.SettingsGeneral, GWareIPTV.UIBase.SettingsGeneral.render = function () {
    App.userSettings.renderMenu({
        selection: "settings",
        type: "vertical"
    }), App.userSettings.renderOptions({section: "general", callback: "refresh", selection: "settings"})
}, App.SettingsLanguages = GWareIPTV.UIBase.SettingsLanguages, App.SettingsLanguages.render = function () {
    App.userSettings.renderMenu({
        selection: "settings",
        type: "vertical"
    }), App.userSettings.renderOptions({selection: "settings", section: "languages", brand: ".title"})
}, App.SettingsScreenSaver = GWareIPTV.UIBase.SettingsScreenSaver, App.SettingsScreenSaver.render = function () {
    App.userSettings.renderMenu({
        selection: "settings",
        type: "vertical"
    }), App.userSettings.renderOptions({selection: "settings", section: "screensaver", brand: ".title"})
}, App.SettingsSpeedTest = GWareIPTV.UIBase.SettingsSpeedTest, App.SettingsSpeedTest.render = function () {
    App.userSettings.renderMenu({
        selection: "settings",
        type: "vertical"
    }), this.makeZone({
        rows: [{
            html: _("Start test"),
            data: {"data-fn": "start"},
            style: {width: $(".controls").width() + "px"}
        }].matrix("horizontal"), selector: ".controls", selection: "bg"
    }), this.select($(".controls .row:first .item:first"))
}, App.SettingsSupport = GWareIPTV.UIBase.SettingsSupport, GWareIPTV.UIBase.SettingsSupport.render = function () {
    App.userSettings.renderMenu({
        selection: "settings",
        type: "vertical"
    }), App.userSettings.renderOptions({section: "support", brand: ".title", selection: "settings"})
}, App.CatchUpHome = GWareIPTV.UIBase.CatchUpHome, App.CatchUp = GWareIPTV.UIBase.CatchUp, App.CatchUp.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.timerError = null, this.pausedTS = null, this.programme = {
        start_p: 0,
        end_p: 0
    }, this.makeZone({
        rows: [[{html: "&nbsp;", style: {width: window.innerWidth, height: window.innerHeight}}]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind", !0),
            keyRight: this.preselect.bind(this, "forward", !0),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-skip-previous"></span>',
            data: {"data-fn": "skipPrev"}
        }, {
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {
            html: '<span class="ico ico-fast-forward"></span>',
            data: {"data-fn": "forward"}
        }, {html: '<span class="ico ico-skip-next"></span>', data: {"data-fn": "skipNext"}}]],
        selector: ".sub-menu",
        selection: "menu-player",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        align: "center"
    }), this.item.ts || (this.item.ts = this.item.start), this.channel = App.util.getChannelData(this.item.id), this.skipInterval = 60, this.reload(!0);
    var t = App.epg.getProgrammeByTime(this.channel.id);
    this.programme.start_p = t.ut_start, this.programme.end_p = t.ut_end, this.item.report || (lg("catchup > start report action as catchup"), App.reports.set({
        type: this.item.report_action ? this.item.report_action : 5,
        name: this.channel.name,
        id: this.channel.id,
        epg: t.name
    })), App.player.setup({
        url: this.url, secure: this.channel.secure, events: {
            complete: function () {
            }, time: function (e) {
                30 < e.position && !this.reportSent && (this.report($(".panel-middle .title").text()), this.reportSent = !0)
            }.bind(this), play: function () {
                this.timerError && window.clearTimeout(this.timerError)
            }.bind(this), error: function (e) {
                lg("catchup > error event fired", "error"), lg(e)
            }.bind(this), ready: function () {
                App.player.play(), this.isPaused = !1, this.preselect("play"), App.timer({key: "catchup-playback"})
            }.bind(this)
        }
    }), this.timeline(), this.timerTimeline = window.setInterval(this.timeline.bind(this), 500), this.fnBack = "TV"
}, App.FavoriteManager = GWareIPTV.UIBase.FavoriteManager, App.FavoriteManager.onLoad = function (e) {
    this.resetPageLayout(e), this.selected = {left: [], right: []};
    for (var t = App.user.package.tv.group.length, i = null, s = [], a = 0; a < t; a++) i = App.user.package.tv.group[a], s.push({
        html: i.name,
        data: {"data-fn-select": "loadChannels", "data-id": i.id}
    });
    this.makeZone({
        rows: [s],
        selector: ".groups",
        selection: "bg",
        scroller: {width: "auto", height: "100%"}
    }), this.select($(".groups .item:first-child")), this.renderFavorites(), this.registerEvents(), this.fnBack = "TV", this.enableMenu("TV"), App.reports.set({type: 3})
}, App.Recording = GWareIPTV.UIBase.Recording, App.RecordingPlayer = GWareIPTV.UIBase.RecordingPlayer, App.RecordingPlayer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {keyLeft: this.preselect.bind(this, "rewind"), keyRight: this.preselect.bind(this, "forward")}
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "menu-player",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        align: "center"
    }), App.reports.set({
        type: 6,
        name: this.item.title
    }), $(".movie-header .title").html(this.item.title), this.start(), this.fnBack = this.item.back ? this.item.back : "Recording", this.enableMenu()
}, App.Channel = GWareIPTV.UIBase.Channel, App.TV = GWareIPTV.UIBase.TV, App.VODBrowse = GWareIPTV.UIBase.VODBrowse, App.VODBrowse.loadCategory = function (e) {
    var t = [[]];
    $(".sub-menu .item").each(function () {
        $(this).removeClass("selected")
    }), $('.sub-menu .item[data-index="' + e.index + '"]').addClass("selected"), this.movieIds = [];
    for (var i = 0; i < this.store.categories[e.index].movies.length; i++) {
        var s = this.store.categories[e.index].movies[i],
            a = App.util.createCoverIcons({id: s.id, type: "movie", icons: ["purchase", "watch"]});
        App.VODBrowse.movieIds.push(s.id), t[0].push({
            html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + s.poster + '" /> <div class="movie-overlay"><span class="name">' + s.name + '</span><span class="sec-info"><span class="icon"><span class="ico ico-play"></span></span><span class="movie-year">' + s.year + "</span></span></div>" + a,
            data: {"data-id": s.id, "data-fn": "init", "data-page": "VODDetail"}
        })
    }
    if (!this.movieIds.length) return $(".movies").html('<p class="empty">' + _("This category is empty") + "</p>"), !1;
    this.makeZone({
        rows: t,
        selector: ".movies",
        selection: "movie",
        scroller: {width: "auto", height: "100%"},
        pager: {type: "cols", count: GWareConfig.zoneItemCount}
    }), App.reports.set({type: 10, name: this.store.categories[e.index].name, id: this.store.categories[e.index].id})
}, App.VODDetail = GWareIPTV.UIBase.VODDetail, App.VODDetail.loaded = function (e) {
    this.movie = e, this.ppv = GWareBase64.encode(JSON.stringify({
        enabled: e.is_payperview,
        prices: e.movieprices,
        rule: e.rule_payperview,
        id: e.id,
        name: e.name,
        type: "movie"
    })), this.ppvNext = GWareBase64.encode(JSON.stringify({
        "data-fn": "init",
        "data-page": "VODMovie",
        "data-id": e.id
    })), $(".poster").css({
        "background-image": 'url("' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '")',
        "background-repeat": "no-repeat",
        "background-size": "contain"
    }), $(".title").html(e.name), $(".rating").html(this.rating2stars(e.rating)), $(".description").html(this.getDescription(e.moviedescriptions)), $(".year").html(e.year), $(".language").html(e.language), $(".duration").html(_("{$} minutes", e.length)), $(".actors").html(this.limitActors(e.actors ? e.actors.limit(128) : "No information available")), $(".tags").html(this.getTags(e.tags)), this.loadAfter(), void 0 !== App.VODBrowse && void 0 !== App.VODBrowse.movieIds || ($('.sub-menu .item[data-fn="prev"]').hide(), $('.sub-menu .item[data-fn="next"]').hide(), this.fnBack = "Home"), this.select($('.sub-menu .item[data-fn="ppvValidate"]')), this.enableMenu(), App.reports.set({
        type: 11,
        name: e.name,
        id: e.id
    })
}, App.VODDetail.loadAfter = function () {
    var e = GWareBase64.encode(App.settings.server_location.movie_location + '/images/movies/' + this.movie.poster);
    null !== this.movie.backdrop && $(".content.full.vod").css({
        "background-image": 'url("' + App.settings.server_location.movie_location + '/images/movies/' + this.movie.backdrop + '")',
        "background-repeat": "no-repeat",
        "background-size": "cover"
    }), this.makeZone({
        rows: [[{html: _("Previous"), data: {"data-fn": "prev"}}, {
            html: _("Back"),
            data: {"data-fn": "btnBack"}
        }, {
            html: _("Watch Trailer"),
            data: {
                "data-fn": "init",
                "data-page": "VODTrailer",
                "data-name": this.movie.name,
                "data-length": this.movie.length,
                "data-url": this.movie.trailer_url,
                "data-img": e
            }
        }, {
            html: _("Watch Movie"),
            data: {"data-fn": "ppvValidate", "data-ppv": this.ppv, "data-next": this.ppvNext, "data-img": e}
        }, {
            html: '<span class="ico ico-share"></span> ' + _("Social Share"),
            data: {"data-fn": "fbShare", "data-title": this.movie.name, "data-type": "movie", "data-id": this.movie.id}
        }, {html: _("Next"), data: {"data-fn": "next"}}]], selector: ".sub-menu", selection: "bg"
    })
}, App.VOD = GWareIPTV.UIBase.VOD, App.VODMovie = GWareIPTV.UIBase.VODMovie, App.VODMovie.loaded = function (e) {
    this.makeZone({
        rows: [[{html: "&nbsp;", style: {width: window.innerWidth, height: window.innerHeight}}]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind", !0),
            keyRight: this.preselect.bind(this, "forward", !0),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.createMenu(), this.movie = e, $(".movie-header .title").html(this.movie.name), $(".progress-holder .duration").html(Math.floor(this.movie.length / 60) + " h " + Math.floor(this.movie.length % 60) + " mins"), $(".player-info .poster img").attr("src", App.settings.server_location.movie_location + '/images/movies/' + this.movie.poster), this.fnBack = this.item.back ? this.item.back : "VODDetail", this.reportSent = !1, this.hasChildLock(), this.enableMenu(), $(document).on("click", ".report", GWareIPTV.UIBase.VODMovie.keyBlue)
}, App.VODMovie.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "menu-player",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        align: "center"
    })
}, App.VODSub = GWareIPTV.UIBase.VODSub, App.VODTrailer = GWareIPTV.UIBase.VODTrailer, App.VODTrailer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind"),
            keyRight: this.preselect.bind(this, "forward"),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "menu-player",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        align: "center"
    }), $(".movie-header .title").html(this.item.name), $(".player-info .poster img").attr("src", GWareBase64.decode(this.item.img)), App.player.setup({
        url: this.item.url,
        events: {
            complete: function () {
                this.pageLoader(this.fnBack)
            }.bind(this), time: function (e) {
                $(".progress-holder .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function () {
                pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), this.fnBack = "VODDetail", App.reports.set({type: 12, name: this.item.name})
}, App.Youtube = GWareIPTV.UIBase.Youtube, App.Youtube.loadCategory = function (e) {
    var o = this;
    $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-id="' + e.id + '"]').addClass("selected"), this.loading($(".clips")), this.videos = [], xhr({
        url: "https://www.googleapis.com/youtube/v3/videos?part=snippet&maxResults=50&chart=mostPopular&videoCategoryId=" + e.id + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var s = [[], [], [], []], a = $(".clips").width() / 2 - 40, r = ($(".clips").outerHeight() - 4) / 4 - 20,
                n = 0;
            e.items.forEach(function (e, t) {
                var i = "";
                e.snippet.thumbnails && (i = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url), o.videos.push({
                    id: e.id,
                    image: i,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), s[n].push({
                    html: '<div class="image-holder" style="background-image: url(' + i + ')"></div><div class="content"><div class="title">' + e.snippet.title + '</div><div class="description">' + e.snippet.description.limit(256) + "</div></div>",
                    data: {
                        "data-index": t,
                        "data-fn": "init",
                        "data-title": e.snippet.title,
                        "data-desc": e.snippet.description,
                        "data-back": "Youtube",
                        "data-page": "YoutubePlayer"
                    },
                    style: {height: r, width: a}
                }), n = n < 3 ? n + 1 : 0
            }), o.makeZone({
                rows: s,
                selector: ".clips",
                selection: "yt",
                scroller: {width: "auto", height: "auto"},
                chunkSize: 64
            }), o.object = $(".clips .scroller .row:nth-child(1) .item:nth-child(1)"), o.select()
        },
        error: function () {
            o.notification("An error occured, please try again later")
        }
    })
}, App.Youtube.searchPanelGo = function () {
    var o = this, e = $('input[name="term"]').val().toLowerCase();
    "" !== e && ($(".clips").html('<div class="spinner-holder"><span class="text">Loading</span><div class="loader"></div></div>'), this.videos = [], xhr({
        url: "https:///www.googleapis.com/youtube/v3/search?part=snippet&maxResults=50&q=" + e + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var s = [[], [], [], []], a = $(".clips").width() / 2 - 40, r = ($(".clips").outerHeight() - 4) / 4 - 20,
                n = 0;
            e.items.forEach(function (e, t) {
                var i = "";
                e.snippet.thumbnails && (i = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url), o.videos.push({
                    id: e.id,
                    image: i,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), s[n].push({
                    html: '<div class="image-holder" style="background-image: url(' + i + ')"></div><div class="content"><div class="title">' + e.snippet.title + '</div><div class="description">' + e.snippet.description.limit(256) + "</div></div>",
                    data: {
                        "data-index": t,
                        "data-fn": "init",
                        "data-title": e.snippet.title,
                        "data-desc": e.snippet.description,
                        "data-back": "Youtube",
                        "data-page": "YoutubePlayer"
                    },
                    style: {height: r, width: a}
                }), n = n < 3 ? n + 1 : 0
            }), o.makeZone({
                rows: s,
                selector: ".clips",
                selection: "yt",
                scroller: {width: "auto", height: "auto"}
            }), o.searchPanelHide()
        }
    }))
}, App.YoutubePlayer = GWareIPTV.UIBase.YoutubePlayer, App.YoutubePlayer.reload = function () {
    var e = App.baseURL.youtube + "?videoid=" + this.videos[this.index].id,
        t = this.index < this.videos.length - 1 ? this.index + 1 : 0,
        i = 0 < this.index ? this.index - 1 : this.videos.length - 1;
    App.reports.set({type: 18, name: this.videos[this.index].title}), App.player.setup({
        url: e,
        events: {
            complete: function () {
                this.next()
            }.bind(this), time: function (e) {
                $(".info .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function (e) {
                lg(e), pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), "left" === this.lastSwipe && ($(".panel-left, .panel-middle").remove(), $(".panel-right").addClass("panel-middle").removeClass("panel-right").css("left", "0")), "right" === this.lastSwipe && ($(".panel-right, .panel-middle").remove(), $(".panel-left").addClass("panel-middle").removeClass("panel-left").css("left", "0")), $(".info").prepend(this.clonePanel("left")).append(this.clonePanel("right")), $(".panel-left").attr("data-index", i), $(".panel-right").attr("data-index", t), $(".panel-middle").attr("data-index", this.index), $(".panel-left .sub-menu, .panel-right .sub-menu").html(""), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".panel-middle .sub-menu",
        selection: "menu-player",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)},
        align: "center"
    }), this.infoUpdate(), this.preselect("play")
}, App.YoutubePlayer.infoUpdate = function () {
    $(".panel").each(function () {
        var e = App.YoutubePlayer.videos[parseInt($(this).attr("data-index"))];
        $(this).find(".logo").css("background-image", "url(" + e.image + ")"), $(this).find(".title").html(e.title), $(this).find(".description").html(e.description)
    })
};
