GWareIPTV.UIPrototype.prototype.updateTime = function () {
    $(".header-right .time").html((new Date).niceTime())
}, GWareIPTV.UIPrototype.prototype.updateWeather = function (e, t, i) {
    if (lg("weather > data arrived"), App.settings.access.feature.weather) {
        var s = (new Date).getHours(), a = s < 6 || 21 < s ? "night" : "day";
        $(".weather .city").html(t), $(".weather .degree").html(e.temp_C + " &deg;C / " + e.temp_F + " &deg;F"), $(".weather .icon").html('<img src="artwork/weather/' + a + "/" + e.weatherCode + '.png" />')
    }
}, GWareIPTV.UIPrototype.prototype.resetPageLayout = function (e, t) {
    $(".ui").css("margin", t ? "0px" : "10px"), $(".ui").css("height", t ? "100%" : window.innerHeight - 20 + "px"), $(".header").css("display", t ? "none" : "block"), $(".footer").css({
        display: t ? "none" : "inline-block",
        height: "mobile" === App.user.device.category ? window.innerHeight : window.innerHeight - 120
    }), $(".main").css({
        height: t || "mobile" === App.user.device.category ? window.innerHeight : window.innerHeight - 120,
        width: t ? window.innerWidth : $("body").hasClass("slim-menu") ? window.innerWidth - 90 : window.innerWidth - 340
    }), e && $(".main").html(e), this.isPlayerPage = this.playerPages.hasValue(this.name), this.setupHoverMenu(t)
}, GWareIPTV.UIPrototype.prototype.setupFrame = function () {
    this.setupMenuFrame({selection: "bg", vertical: !0, type: "both", preType: "both", perRow: !1})
}, GWareIPTV.UIPrototype.prototype.loadCustomStyles = function () {
    var e = App.hex2rgb(App.settings.style.highlight.primary),
        t = [{selector: "body", style: {"font-size": App.getFontSize()}}, {
            selector: ".item.selected",
            style: {"background-color": App.settings.style.highlight.secondary}
        }, {
            selector: ".selection.selection-bg",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".selection.selection-border",
            style: {"border-color": App.settings.style.highlight.primary}
        }, {
            selector: ".bg-border.hot-zone .scroller .row .item.active",
            style: {
                "background-color": App.settings.style.highlight.primary,
                "border-color": App.settings.style.highlight.primary
            }
        }, {
            selector: ".epg .programmes .timeline",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".metro-news-date",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".hover-menu .btn",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".progress .bar",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".ad-placeholder",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .line",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .cursor",
            style: {"border-bottom": "10px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .tick",
            style: {"border-left": "3px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".progress .handle",
            style: {"background-color": "rgba(" + e.r + ", " + e.g + ", " + e.b + ", 0.5)"}
        }, {selector: ".progress .handle .dot", style: {"background-color": App.settings.style.highlight.primary}}];
    App.injectStyle(t)
}, App.Apps = GWareIPTV.UIBase.Apps, App.EPGh = GWareIPTV.UIBase.EPGh, App.EPGv = GWareIPTV.UIBase.EPGv, App.EPGv.onLoad = function (e) {
    $("body").addClass("slim-menu"), this.html = e, this.fnBack = App.pageDefault.page, App.reports.set({
        type: 4,
        name: "vertical"
    }), App.epg.viewInit(".programmes", this.loaded.bind(this))
}, App.EPGv.loaded = function () {
    var e = 0, t = [], i = App.epg[App.epg.viewDate];
    for (var s in this.resetPageLayout(this.html), this.resetEvents(), this.enableMenu("startEPG"), $(".gv-left .date").html(App.epg.isToday(App.epg.viewDate)), i) t.index || (t[e] = []), t[e].push({
        html: '<span><img src="' + i[s].logo + '" /></span>' + i[s].name,
        data: {"data-id": i[s].number + "-" + i[s].id}
    }), e++;
    this.makeZone({
        rows: t,
        selector: ".channels",
        selection: "bg",
        scroller: {width: "100%", height: "auto"}
    }), this.object = App.epg.viewChannelId ? $('.channels .item[data-id="' + App.epg.viewChannelId + '"]') : $(".channels .item:first-child"), this.select(), this.loadProgrammes(this.object.data())
}, App.EPGv.unload = function () {
    lg("ui controller > running unload"), $("body").removeClass("slim-menu")
}, App.HomeHOTEL = GWareIPTV.UIBase.HomeHOTEL, App.Home = GWareIPTV.UIBase.Home, App.Home.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home"), App.metro._fetch(this.renderMetro.bind(this)), App.ads._load(), this.fromPage = null
}, App.Home.renderMetro = function () {
    var s = this.getOptimalItemSize({selector: ".movies-metro .movies", type: "cover"}), a = [],
        i = [[], [], [], [], []], n = 0, r = 0, o = 3;
    0 === App.metro.news.length ? (o = 5, $(".news").remove(), $(".channels-metro").addClass("larger")) : (this.index = 0, this.timerNews = null, this.newsScroller()), App.metro.movies.forEach(function (e, t) {
        var i = App.util.createCoverIcons({id: e.id, type: "movie", icons: ["purchase", "watch"]});
        a[n] || (a[n] = []), a[n].push({
            html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '" />' + i,
            data: {"data-id": e.id, "data-fn": "init", "data-page": "VODDetail"}
        }), App.user.device.stb ? 0 === Math.fmod(t + 1, s.total) && n++ : 0 === Math.fmod(t + 2, s.total) && n++
    }), App.metro.tv.forEach(function (e) {
        var t = App.util.createCoverIcons({id: e.channel_id, type: "channel", icons: ["purchase"]});
        i[r].push({
            html: '<img src="' + App.settings.server_location.channel_location + '/images/channels/' + e.channel_image + '" />' + t,
            data: {"data-id": e.channel_id, "data-fn": "init", "data-page": "Channel"},
            style: {
                width: ($(".channels-metro").height() - 10 * o) / o,
                height: ($(".channels-metro").height() - 10 * o) / o
            }
        }), ++r === o && (r = 0)
    }), this.makeZone({
        rows: a,
        selector: ".movies-metro .movies",
        selection: "border",
        scroller: {width: "auto", height: "auto"}
    }), this.makeZone({
        rows: i,
        selector: ".channels-metro .channels",
        selection: "border",
        scroller: {width: "auto", height: "100%"}
    }), this.index = 0, this.timerNews = null, $(".movies-holder img, .series-holder img, .channels-holder img").waitForImages(function () {
        App.showPage()
    })
}, App.Home.newsScroller = function () {
    if (0 === App.metro.news.length) return !1;
    var e = App.metro.news[this.index];
    "" === $(".metro-news-date").html() && $(".metro-news-date").html((new Date).longDate()), $(".metro-news-text div").html('<img src="' + window.location.protocol + App.settings.url.image + e.image + '" />' + e.description.limit(256)), this.checkImages($(".metro-news-text div")), this.index = this.index < App.metro.news.length - 1 ? this.index + 1 : 0, this.timerNews = window.setTimeout(this.newsScroller.bind(this), 1e4)
}, App.Home.unload = function () {
    window.clearTimeout(this.timerNews), window.clearInterval(this.loadImageInterval)
}, App.HomePLAYER = GWareIPTV.UIBase.HomePLAYER, App.HomePLAYER.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home");
    var t = $(".preview-player-holder").width(), i = (t - 1.777777 * $(".preview-player-holder").height()) / 2;
    $(".preview-player-holder").css({
        "padding-left": i,
        "padding-right": i,
        width: t - 2 * i
    }), App.metro._fetch(this.renderMetro.bind(this)), App.ads._load(), this.fromPage = null
}, App.HomePLAYER.renderMetro = function () {
    var i = [];
    0 === App.metro.news.length ? ($(".news-holder").remove(), $(".movies-holder").addClass("larger")) : (this.index = 0, this.timerNews = null, this.newsScroller()), App.metro.tv.forEach(function (e) {
        var t = App.util.createCoverIcons({id: e.channel_id, type: "channel", icons: ["purchase"]});
        i.push([{
            html: '<img src="' + App.settings.server_location.channel_location + '/images/channels/'+ e.channel_image + '" />' + t + e.channel_number + ". " + e.name,
            data: {"data-id": e.channel_id, "data-fn": "init", "data-page": "Channel"}
        }])
    }), this.makeZone({
        rows: i,
        selector: ".channels",
        selection: "bg",
        scroller: {width: "100%", height: "auto"}
    }), window.setTimeout(function () {
        this.select($(".channels .row:first-child .item:first-child"))
    }.bind(this), 500), i.length ? $(".channels-holder img").waitForImages(function () {
        App.showPage()
    }) : App.showPage()
}, App.HomePLAYER.channelPreview = function (e) {
    this.channelPreviewLoad(e.id)
}, App.HomePLAYER.newsScroller = function () {
    var e = App.metro.news[this.index];
    "" === $(".metro-news-date").html() && $(".metro-news-date").html((new Date).niceDate()), $(".metro-news-image > div").css("background-image", "url(" + window.location.protocol + App.settings.url.image + e.image + ")"), $(".metro-news-text > div").html(e.description.limit(256)), this.index = this.index < App.metro.news.length - 1 ? this.index + 1 : 0, this.timerNews = window.setTimeout(this.newsScroller.bind(this), 1e4)
}, App.HomePLAYER.unload = function () {
    window.clearTimeout(this.timerNews)
}, App.HomeTV = GWareIPTV.UIBase.HomeTV, App.HomeTV.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home"), App.metro._fetch(this.renderMetro.bind(this)), App.ads._load(), this.fromPage = null
}, App.HomeTV.renderMetro = function () {
    var a = [], e = App.metro.tv.length, n = (Math.ceil(e / 4), 0), r = 0,
        o = $(".channels-holder-tv").width() / 4 - 10;
    0 === App.metro.news.length ? (channel_rows = 5, $(".news").remove(), $(".channels-metro").addClass("larger")) : (this.index = 0, this.timerNews = null, this.newsScroller()), App.metro.tv.forEach(function (e) {
        var t, i = App.util.createCoverIcons({id: e.channel_id, type: "channel", icons: ["purchase"]}),
            s = App.epg.getProgrammeByTime(e.channel_id);
        t = '<div class="prog-item"><img src="' + App.settings.server_location.channel_location + '/images/channels/' + e.channel_image + '" /><span class="channel-name" >' + e.name + '</span><span class="prog-name">' + s.name + '</span><span class="prog-time">' + new Date(1e3 * s.ut_start).niceTime() + " - " + new Date(1e3 * s.ut_end).niceTime() + '</span><div class="progress"><div class="bar" style="width: ' + s.elapsed + '%"></div></div></div>', a[n] || (a[n] = []), a[n].push({
            html: t + i,
            data: {"data-id": e.channel_id, "data-fn": "init", "data-page": "Channel"},
            style: {width: o + "px", height: o + "px"}
        }), (r + 1) % 4 == 0 && (n += 1), r++
    }), this.makeZone({
        rows: a,
        selector: ".channels",
        selection: "bg",
        scroller: {width: "100%", height: "auto"}
    }), $(".movies-holder img, .series-holder img, .channels-holder img").waitForImages(function () {
        App.showPage()
    })
}, App.HomeTV.updateEPGData = function () {
    $(".channels .item").each(function () {
        var e = parseInt($(this).attr("data-id"), 10), t = App.epg.getProgrammeByTime(e);
        $(this).find(".prog-name").html(t.name), $(this).find(".prog-time").html(new Date(1e3 * t.ut_start).niceTime() + " - " + new Date(1e3 * t.ut_end).niceTime()), $(this).find(".progress .bar").css("width", t.elapsed + "%")
    }), lg("epg > home page updated")
}, App.HomeTV.newsScroller = function () {
    if (0 === App.metro.news.length) return !1;
    var e = App.metro.news[this.index];
    "" === $(".metro-news-date").html() && $(".metro-news-date").html((new Date).longDate()), $(".metro-news-text div").html('<img src="' + window.location.protocol + App.settings.url.image + e.image + '" />' + e.description.limit(256)), this.checkImages($(".metro-news-text div")), this.index = this.index < App.metro.news.length - 1 ? this.index + 1 : 0, this.timerNews = window.setTimeout(this.newsScroller.bind(this), 1e4)
}, App.HomeTV.unload = function () {
    window.clearTimeout(this.timerNews), window.clearInterval(this.loadImageInterval)
}, App.HomeVOD = GWareIPTV.UIBase.HomeVOD, App.HomeVOD.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home"), App.metro._fetch(this.renderMetro.bind(this)), App.ads._load(), this.fromPage = null
}, App.HomeVOD.renderMetro = function () {
    var s = [], i = [], a = 0, n = 0, r = $(".movies-holder-tv").width() / 2 - 10;
    0 === App.metro.news.length ? ($(".news-holder").remove(), $(".movies-holder").addClass("larger")) : (this.index = 0, this.timerNews = null, this.newsScroller()), App.metro.movies.forEach(function (e) {
        var t, i = App.util.createCoverIcons({id: e.id, type: "movie", icons: ["purchase", "watch"]});
        t = '<div class="imgBg" style="background-image: url(' + App.settings.server_location.movie_location + '/images/movies/' + e.backdrop + ')"></div><div class="rating">' + App.HomeVOD.rating(e.rating) + '</div><div class="title">' + e.name.limit(17) + "</div>", s[a] || (s[a] = []), s[a].push({
            html: t + i,
            data: {"data-id": e.id, "data-fn": "init", "data-page": "VODDetail"},
            style: {width: r + "px", height: r + "px"}
        }), (n + 1) % 2 == 0 && a++, n++
    }), a = n = 0, App.metro.series.forEach(function (e) {
        var t;
        t = '<div class="imgBg" style="background-image: url(' + App.settings.server_location.seriee_location + '/images/series/' + e.backdrop + ')"></div><div class="rating">' + App.HomeVOD.rating(e.rating) + '</div><div class="title">' + e.name.limit(17) + "</div>", i[a] || (i[a] = []), i[a].push({
            html: t,
            data: {"data-id": e.id, "data-fn": "init", "data-page": "VODDetail"},
            style: {width: r + "px", height: r + "px"}
        }), (n + 1) % 2 == 0 && a++, n++
    }), this.makeZone({
        rows: s,
        selector: ".vod-movies",
        selection: "bg",
        scroller: {width: "100%", height: "auto"},
        align: "center"
    }), this.makeZone({
        rows: i,
        selector: ".vod-series",
        selection: "bg",
        scroller: {width: "100%", height: "auto"},
        align: "center"
    }), $(".movies-holder-tv img, .series-holder-yv img").waitForImages(function () {
        App.showPage()
    })
}, App.HomeVOD.newsScroller = function () {
    if (0 === App.metro.news.length) return !1;
    var e = App.metro.news[this.index];
    "" === $(".metro-news-date").html() && $(".metro-news-date").html((new Date).longDate()), $(".metro-news-text div").html('<img src="' + window.location.protocol + App.settings.url.image + e.image + '" />' + e.description.limit(256)), this.checkImages($(".metro-news-text div")), this.index = this.index < App.metro.news.length - 1 ? this.index + 1 : 0, this.timerNews = window.setTimeout(this.newsScroller.bind(this), 1e4)
}, App.HomeVOD.rating = function (e) {
    var t = [];
    for (e = parseFloat(e); 0 < e;) 1 <= e ? (t.push('<span class="ico ico-star"></span>'), e--) : .5 <= e && (t.push('<span class="ico ico-star-half"></span>'), e = 0);
    for (var i = 0; i < 5; i++) t[i] || (t[i] = '<span class="ico ico-star-outline"></span>');
    return t.join("")
}, App.HomeVOD.unload = function () {
    window.clearTimeout(this.timerNews), window.clearInterval(this.loadImageInterval)
}, App.Offline = GWareIPTV.UIBase.Offline, App.Search = GWareIPTV.UIBase.Search, App.User = GWareIPTV.UIBase.User, App.Album = GWareIPTV.UIBase.Album, App.Music = GWareIPTV.UIBase.Music, App.Advertisement = GWareIPTV.UIBase.Advertisement, App.SeriesBrowse = GWareIPTV.UIBase.SeriesBrowse, App.SeriesDetail = GWareIPTV.UIBase.SeriesDetail, App.SeriesPlayer = GWareIPTV.UIBase.SeriesPlayer, App.SeriesStore = GWareIPTV.UIBase.SeriesStore, App.SettingsAbout = GWareIPTV.UIBase.SettingsAbout, App.SettingsCatchupTV = GWareIPTV.UIBase.SettingsCatchupTV, App.SettingsDisclaimer = GWareIPTV.UIBase.SettingsDisclaimer, App.SettingsGeneral = GWareIPTV.UIBase.SettingsGeneral, App.SettingsLanguages = GWareIPTV.UIBase.SettingsLanguages, App.SettingsScreenSaver = GWareIPTV.UIBase.SettingsScreenSaver, App.SettingsSpeedTest = GWareIPTV.UIBase.SettingsSpeedTest, App.SettingsSupport = GWareIPTV.UIBase.SettingsSupport, App.CatchUpHome = GWareIPTV.UIBase.CatchUpHome, App.CatchUp = GWareIPTV.UIBase.CatchUp, App.FavoriteManager = GWareIPTV.UIBase.FavoriteManager, App.Recording = GWareIPTV.UIBase.Recording, App.RecordingPlayer = GWareIPTV.UIBase.RecordingPlayer, App.Channel = GWareIPTV.UIBase.Channel, App.Channel.loadCategories = function () {
    var t = [];
    return App.user.package.tv.group.forEach(function (e) {
        t.push({html: e.name, data: {"data-id": e.id}, style: {width: "280px"}})
    }), t
}, App.Channel.loadChannels = function (e) {
    var t = this.buildChannelsForCategory(e.id);
    if (!t.length) return $(".chl").html('<p class="empty">' + _("There are no channels in this category") + "</p>"), !1;
    this.makeZone({
        rows: t.matrix("vertical"),
        selector: ".chl",
        selection: "bg",
        layer: "channel-list",
        scroller: {width: "100%", height: "auto"},
        chunkSize: 1024,
        events: {keyBack: this.listHide.bind(this)}
    }), this.preselectRunningChannel && $('.chl .item[data-id="' + this.channel.id + '"]').length && this.select($('.chl .item[data-id="' + this.channel.id + '"]')), this.preselectRunningChannel = !1
}, App.Channel.buildChannelsForCategory = function (e) {
    var t = null, i = [], s = App.user.package.tv.list.length;
    this.groupId = e, store.set("iptv.channel.group", this.groupId), $(".category-menu .item").removeClass("selected"), $('.category-menu .item[data-id="' + this.groupId + '"]').addClass("selected");
    for (var a = 0; a < s; a++) t = App.user.package.tv.list[a], (-1 === this.groupId || App.util.channelIsInGroup(t.id, this.groupId)) && i.push({
        html: '<span class="number">' + t.number + '</span><span class="logo"><img src="' + t.logo.normal + '" /></span><span class="name">' + t.name + "</span>",
        data: {"data-id": t.id}
    });
    return i
}, App.Channel.listShow = function () {
    var e = $(".channel-list");
    if (0 === e.length) return !1;
    this.infoHide(), e.css("left", 40), this.isChannelListOpen = !0, this.preselectRunningChannel = !0, this.select($('.categories .item[data-id="' + this.groupId + '"]')), $(".ads-ticker").is(":visible") && $(".ads-ticker").animate({bottom: 152}, 250, "easeOutQuad")
}, App.Channel.listHide = function () {
    var e = $(".channel-list");
    if (0 === e.length) return !1;
    e.css("left", -280), this.isChannelListOpen = !1, this.select($(".player-holder .row:first .item:first")), $(".ads-ticker").is(":visible") && $(".ads-ticker").animate({bottom: 0}, 250, "easeOutQuad")
}, App.Channel.infoUpdate = function () {
    var h = this;
    $(".panel").each(function () {
        var e = parseInt($(this).attr("data-id"), 10), t = App.epg.getProgrammeByTime(e),
            i = App.epg.getProgrammeByTime(e, !1, !0), s = (new Date).getTime() / 1e3, a = t.ut_end - t.ut_start,
            n = (t.ut_end - t.ut_start) / 60, r = s - t.ut_start,
            o = 0 === t.ut_start ? "" : new Date(1e3 * t.ut_start).niceTime() + " - " + new Date(1e3 * t.ut_end).niceTime(),
            l = 0 === t.ut_start ? "" : Math.round((a - r) / 60) + " min remaining",
            p = 0 === t.ut_start ? 0 : Math.round(100 * r / a);
        $(this).find(".favorites .text").html(App.favorites.is(e) ? "Remove from Favorites" : "Add to Favorites"), $(this).find(".logo img").attr("src", t.channel.logo), $(this).find(".number").html(t.channel.number), $(this).find(".title").html(t.name + "<span>(" + n + " mins)</span>"), 0 === n && $(this).find(".title span").hide(), $(this).find(".description").html(t.description), $(this).find(".time").html(o), $(this).find(".current-time").html((new Date).niceTime()), $(this).find(".elapsed").html(l), $(this).find(".progress .bar").css("width", p + "%"), $(this).find(".next-programme .span8").html(i.name), $(this).find(".next-programme .span3").html(new Date(1e3 * i.ut_start).niceTime() + " - " + new Date(1e3 * i.ut_end).niceTime()), $(this).hasClass("panel-middle") && (h.channel.current = t)
    })
}, App.TV = GWareIPTV.UIBase.TV, App.VODBrowse = GWareIPTV.UIBase.VODBrowse, App.VODDetail = GWareIPTV.UIBase.VODDetail, App.VOD = GWareIPTV.UIBase.VOD, App.VODMovie = GWareIPTV.UIBase.VODMovie, App.VODSub = GWareIPTV.UIBase.VODSub, App.VODTrailer = GWareIPTV.UIBase.VODTrailer, App.Youtube = GWareIPTV.UIBase.Youtube, App.Youtube.loadCategory = function (e) {
    $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-id="' + e.id + '"]').addClass("selected"), this.loading($(".clips")), this.videos = [], xhr({
        url: "https://www.googleapis.com/youtube/v3/videos?part=snippet&maxResults=50&chart=mostPopular&videoCategoryId=" + e.id + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var n = [];
            e.items.forEach(function (e, t) {
                var i = "", s = $(".yt").height() / 4 - 2, a = $(".yt").width();
                e.snippet.thumbnails && (i = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url), this.videos.push({
                    id: e.id,
                    image: i,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), n[t] || (n[t] = []), n[t].push({
                    html: '<div class="image-holder" style="background-image: url(' + i + ')"></div><div class="content"><div class="title">' + e.snippet.title + '</div><div class="description">' + e.snippet.description.limit(256) + "</div></div>",
                    data: {"data-index": t, "data-fn": "init", "data-back": "Youtube", "data-page": "YoutubePlayer"},
                    style: {width: a + "px", height: s + "px"}
                })
            }.bind(this)), this.makeZone({
                rows: n,
                selector: ".clips",
                selection: "bg",
                scroller: {width: "100%", height: "auto"}
            })
        }.bind(this),
        error: function () {
            this.notification("An error occured, please try again later")
        }
    })
}, App.Youtube.searchPanelGo = function () {
    var a = this, n = $(".yt").height() / 4 - 2, r = $(".yt").width();
    term = $('input[name="term"]').val().toLowerCase(), "" !== term && ($(".search-panel .vertical").html(""), $(".clips").html('<div class="spinner-holder"><span class="text">Loading</span><div class="loader"></div></div>'), this.videos = [], xhr({
        url: "https:///www.googleapis.com/youtube/v3/search?part=snippet&maxResults=50&q=" + term + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var s = [];
            a.searchPanelHide(), e.items.forEach(function (e, t) {
                var i = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url;
                a.videos.push({
                    id: e.id.videoId,
                    image: i,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), s[t] || (s[t] = []), s[t].push({
                    html: '<div class="image-holder" style="background-image: url(' + i + ')"></div><div class="content"><div class="title">' + e.snippet.title + '</div><div class="description">' + e.snippet.description.limit(256) + "</div></div>",
                    data: {"data-index": t, "data-fn": "init", "data-back": "Youtube", "data-page": "YoutubePlayer"},
                    style: {width: r + "px", height: n + "px"}
                })
            }), a.makeZone({rows: s, selector: ".clips", selection: "bg", scroller: {width: "100%", height: "auto"}})
        }
    }))
}, App.YoutubePlayer = GWareIPTV.UIBase.YoutubePlayer;
//# sourceMappingURL=5-jalebi.min.js.map