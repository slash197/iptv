GWareIPTV.UIPrototype.prototype.updateTime = function () {
    $(".header .right .time").html((new Date).niceTime())
}, GWareIPTV.UIPrototype.prototype.updateWeather = function (e, t, i) {
    if (lg("weather > data arrived"), App.settings.access.feature.weather) {
        var s = (new Date).getHours(), a = s < 6 || 21 < s ? "night" : "day";
        $(".header .city").html(t), $(".header .country").html(i), $(".header .degree").html(e.temp_C + " &deg;"), $(".header .icon").html('<img src="artwork/weather/' + a + "/" + e.weatherCode + '.png" />')
    }
}, GWareIPTV.UIPrototype.prototype.resetPageLayout = function (e, t) {
    this.closeMainMenu(), $(".header").css("display", t ? "none" : "flex"), $(".btn-menu").css("display", t ? "none" : "flex"), $(".main").css("height", t || "mobile" === App.user.device.category ? window.innerHeight : window.innerHeight - 120), e && $(".main").html(e), this.isPlayerPage = this.playerPages.hasValue(this.name), this.setupHoverMenu(t)
}, GWareIPTV.UIPrototype.prototype.setupFrame = function () {
    this.setupMenuFrame({
        selection: "zone",
        vertical: !0,
        type: "both",
        preType: "both",
        perRow: Math.floor($(".main-menu").width() / 280)
    }), this.makeZone({
        items: [{html: '<span class="ico ico-clear"></span>', data: {"data-fn": "closeMainMenu"}}],
        selector: ".main-menu-close",
        selection: "zone"
    }), this.makeZone({
        items: [{
            html: '<p><span class="ico ico-menu"></span>' + _("Menu") + "</p>",
            data: {"data-fn": "showMainMenu"}
        }], selector: ".btn-menu", selection: "zone"
    })
}, GWareIPTV.UIPrototype.prototype.loadCustomStyles = function () {
    var e = App.hex2rgb(App.settings.style.highlight.primary),
        t = [{selector: "body", style: {"font-size": App.getFontSize()}}, {
            selector: ".item.selected",
            style: {"background-color": "transparent"}
        }, {
            selector: '.hot-zone[data-type="horizontal"]:not(.bg-border) .scroller .row .item.active, .hot-zone[data-type="vertical"]:not(.bg-border) .scroller .row .item.active, .hot-zone[data-type="grid"]:not(.bg-border) .scroller .row .item.active, .manager-panel .groups.hot-zone[data-type="horizontal"] .scroller .row .item.active',
            style: {color: App.settings.style.highlight.primary}
        }, {
            selector: ".selection.selection-bg",
            style: {"background-color": "#ffffff"}
        }, {
            selector: ".selection.selection-border",
            style: {"border-color": App.settings.style.highlight.primary}
        }, {
            selector: ".bg-border.hot-zone .scroller .row .item.active",
            style: {
                "background-color": App.settings.style.highlight.primary,
                "border-color": App.settings.style.highlight.primary
            }
        }, {
            selector: ".epg .programmes .timeline",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".metro-news-date",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".hover-menu .btn",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".progress .bar",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".ad-placeholder",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .line",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .cursor",
            style: {"border-bottom": "10px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .tick",
            style: {"border-left": "3px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".progress .handle",
            style: {"background-color": "rgba(" + e.r + ", " + e.g + ", " + e.b + ", 0.5)"}
        }, {selector: ".progress .handle .dot", style: {"background-color": App.settings.style.highlight.primary}}];
    App.injectStyle(t)
}, GWareIPTV.UIPrototype.prototype.getZone = function () {
    return this.object.parents(".hot-zone").attr("class")
}, GWareIPTV.UIPrototype.prototype.showMainMenu = function () {
    lg("ui controller > showing main menu"), this.disableZones(".main-menu, .main-menu-close"), $(".footer").css({
        top: "0px",
        display: "block"
    }), this.object = $(".main-menu .item").first(), this.select(), App.LS.scrollIntoView()
}, GWareIPTV.UIPrototype.prototype.hideMainMenu = function () {
    lg("ui controller > hiding main menu"), $(".footer").css({
        top: "100%",
        display: "none"
    }), this.enableZones(".main-menu, .main-menu-close")
}, GWareIPTV.UIPrototype.prototype.closeMainMenu = function () {
    lg("ui controller > closing main menu"), this.hideMainMenu(), App.LS.zoneActive = null, App.LS.zone = null, App.LS.setupZones()
}, GWareIPTV.UIPrototype.prototype.keyBack = function (e) {
    if (e && e.preventDefault && e.preventDefault(), lg("ui controller > back key fired"), lg("ui controller > fnBack = [" + this.fnBack + "]"), this.object && this.object[0] && "INPUT" === this.object[0].nodeName && ["web", "mobile"].hasValue(App.user.device.category)) {
        lg("ui controller > clearing char in input");
        var t = this.object;
        return t.val(t.val().substring(0, t.val().length - 1)), !1
    }
    var i = this.object.parents(".hot-zone");
    return i.hasClass("key-holder") ? (lg("ui controller > closing virtual keyboard"), this.keyboardHide(), !1) : (App.util.isPrerollPlaying = !1, !this.closeAllPopups() && (i.hasClass("main-menu") || !$(".main-menu").is(":visible") || ["VODDetail", "VODBrowse", "VODSub", "VOD", "SeriesDetail", "SeriesBrowse", "Music", "Album"].hasValue(this.name) ? this.fnBack ? (lg("ui controller > going back to " + this.fnBack), this.pageLoader(this.fnBack), !1) : (lg("ui controller > fnBack is not defined, going back to default page [" + App.pageDefault.page + "]"), void this.pageLoader(App.pageDefault.page)) : (lg("ui controller > jumping to main menu"), this.object = $(".btn-menu .item"), this.select(), !1)))
}, App.Apps = GWareIPTV.UIBase.Apps, App.EPGh = GWareIPTV.UIBase.EPGh, App.EPGh.buildData = function () {
    var e = App.epg[App.epg.viewDate], t = null, i = 0, s = 0, a = [], n = 0;
    for (var o in e) {
        n < (i = (t = e[o]).data.length) && (n = i);
        for (var r = 0; r < i; r++) {
            var p = this.buildEPGData(t, t.data[r]);
            a[r] || (a[r] = []), a[r][s] = {
                html: '<span class="time">' + new Date(1e3 * t.data[r].ut_start).niceTime() + '</span><span class="title">' + t.data[r].progname + '</span><span class="icon">' + p.icon + "</span>",
                data: p.data,
                cls: "prog"
            }
        }
        s++
    }
    for (var l = 0; l < n; l++) for (r = 0; r < a[l].length; r++) a[l][r] || (a[l][r] = {
        html: '<div class="padding"></div>',
        wrap: !1
    });
    return a
}, App.EPGh.buildChannelItemHTML = function (e) {
    return '<div class="ch"><span class="number">' + e.number + '.</span><img src="' + e.logo + '" /></div>'
}, App.EPGh.preview = function (e) {
    for (var t = App.epg.getProgramme(App.epg.viewDate, e.id, e.epgId), i = new Date(1e3 * t.ut_start), s = new Date(1e3 * t.ut_end), a = App.epg.isNow(i, s) ? '<div class="progress"><div class="bar" style="width: ' + App.epg.getElapsedPercent(t.ut_start, t.ut_end) + '%" /></div>' : "", n = "", o = 0; o < t.channel.data.length; o++) t.ut_start === t.channel.data[o].ut_start && null !== t.channel.data[o].progimg && (n = '<img src="' + t.channel.data[o].progimg + '">');
    $(".card").remove(), $('.item[data-epg-id="' + e.epgId + '"]').append('<div class="card"><div class="time">' + i.niceTime() + " - " + s.niceTime() + '</div><div class="title">' + t.name + '</div><div class="description">' + n + t.description + "</div>" + a + "</div>")
}, App.EPGh.onScroll = function () {
    $(".channel-header-scroller").css("left", $(".epgh .scroller").position().left)
}, App.EPGv = GWareIPTV.UIBase.EPGv, App.EPGv.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = new Date, i = new Date(t.getTime() - 864e5), s = new Date(t.getTime() - 1728e5),
        a = new Date(t.getTime() + 864e5), n = new Date(t.getTime() + 1728e5),
        o = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], r = [];
    [{label: o[s.getDay()], date: s.toString()}, {label: "Yesterday", date: i.toString()}, {
        label: "Today",
        date: t.toString()
    }, {label: "Tomorrow", date: a.toString()}, {label: o[n.getDay()], date: n.toString()}].forEach(function (e, t) {
        r[t] || (r[t] = []), r[t].push({html: e.label, data: {"data-date": e.date}})
    }), this.makeZone({
        rows: r,
        selector: ".date",
        selection: "zone",
        scroller: {width: "100%", height: "auto"}
    }), App.epg.viewInit(".programmes", this.loaded.bind(this))
}, App.EPGv.loaded = function () {
    var e = App.epg[App.epg.viewDate], t = [[]];
    for (var i in this.resetPageLayout(this.html), this.resetEvents(), this.enableMenu("startEPG"), e) t[0].push({
        html: '<img src="' + e[i].logo + '" />',
        data: {"data-id": i}
    });
    this.makeZone({
        rows: t,
        selector: ".channels",
        selection: "zone",
        scroller: {width: "auto", height: "100%"}
    }), this.object = App.epg.viewChannelId ? $('.channels .item[data-id="' + App.epg.viewChannelId + '"]') : $(".channels .item:first-child"), this.select(), this.loadProgrammes(this.object.data())
}, App.EPGv.loadProgramme = function (e) {
    $(".gv-right .prog-img").remove();
    for (var t = App.epg.getProgramme(App.epg.viewDate, e.id, e.epgId), i = new Date(1e3 * t.ut_start), s = new Date(1e3 * t.ut_end), a = this.elapsed(i, s), n = 0; n < t.channel.data.length; n++) t.ut_start === t.channel.data[n].ut_start && null !== t.channel.data[n].progimg && (document.querySelector(".gv-right .description").insertAdjacentHTML("beforebegin", '<div class="prog-img"></div>'), $(".gv-right .prog-img").html('<img src="' + t.channel.data[n].progimg + '" />'));
    $(".gv-right .logo").html('<img src="' + t.channel.logo + '" />'), $(".gv-right .name").html(t.channel.name), $(".gv-right .pdate").html(i.longDate()), $(".gv-right .time").html(i.niceTime() + " - " + s.niceTime()), $(".gv-right .title").html(t.name), $(".gv-right .description").html(t.description), $(".gv-right .progress").removeClass("progress-hidden"), $(".gv-right .progress .bar").css("width", a + "%"), 0 === a && $(".gv-right .progress").addClass("progress-hidden")
}, App.EPGv.loadProgrammes = function (e) {
    this.makeZone({
        rows: this.buildProgrammes(App.epg[App.epg.viewDate][e.id]),
        selector: ".programmes",
        selection: "zone",
        scroller: {width: "100%", height: "auto"}
    }), App.epg.viewSetChannel(e.id), App.epg.viewSelectRunning()
}, App.EPGv.selectDate = function (e) {
    $(".date .item").removeClass("selected"), $('.date .item[data-date="' + e.date + '"]').addClass("selected"), lg("epg > loading day [" + e.date + "]"), App.epg.viewJumpDay(e.date)
}, App.EPGv.keyBack = function (e) {
    e && e.preventDefault();
    var t = this.object.parents(".hot-zone");
    return t.hasClass("programmes") ? (this.object = $(".channels .item").first(), void this.select()) : !t.hasClass("main-menu") && $(".main-menu").is(":visible") ? (this.object = $(".btn-menu .item"), void this.select()) : void this.pageLoader(App.pageDefault.page)
}, App.HomeHOTEL = GWareIPTV.UIBase.HomeHOTEL, App.Home = GWareIPTV.UIBase.Home, App.Home.onLoad = function (e) {
    this.resetPageLayout(e), this.isMetroZone = !1, App.metro._fetch(this.renderMetro.bind(this)), App.ads._load(), this.fromPage = null
}, App.Home.renderMetro = function () {
    var e = [], t = [];
    this.pool = [], this.getRandomMetroItems(), this.totalHero = 7 < this.pool.length ? 7 : this.pool.length, this.mainHero = Math.floor(this.totalHero / 2);
    for (var i = 0; i < this.totalHero; i++) if (this.pool[i]) {
        var s = i * $(".metro").width() * .2 / (this.totalHero - 1),
            a = i === this.mainHero ? this.mainHero : i < this.mainHero ? i : this.totalHero - i - 1, n = this.pool[i],
            o = App.util.createCoverIcons({id: n.id, type: "movie", icons: ["purchase", "watch"]});
        e.push({
            html: '<div class="backdrop" style="background-image: url('+ n.backdrop + ')"></div><h1>' + n.name + "</h1><p>" + (n.description ? n.description : "") + '</p><img class="btn-play" src="ui/7-kalakand/artwork/btn-play.png" />' + o,
            data: {
                "data-index": i,
                "data-id": n.id,
                "data-page": n.page,
                "data-fn": "init",
                "data-rotate": GWareBase64.encode(JSON.stringify({
                    l: s,
                    m: a >= this.mainHero - 1 ? 0 : 10 * (this.mainHero - a),
                    h: a >= this.mainHero - 1 ? 0 : 20 * (this.mainHero - a),
                    z: a
                }))
            },
            style: {width: .8 * $(".metro").width() + "px"}
        })
    }
    e.length && (this.makeZone({
        rows: [e],
        selector: ".metro",
        selection: "zone",
        stretchImages: !0,
        events: {
            keyLeft: function () {
                if (this.scrollHero(!0)) return !1;
                App.LS.run("left")
            }, keyRight: function () {
                if (this.scrollHero()) return !1;
                App.LS.run("right")
            }
        },
        scroller: {width: "100%", height: "100%"}
    }), $(".metro.hot-zone").css("overflow", "visible"), this.indexHero = this.mainHero, this.timerHero = null, this.scrollHero());
    for (i = 0; i < App.metro.tv.length; i++) {
        var r = App.metro.tv[i];
        o = App.util.createCoverIcons({id: r.channel_id, type: "channel", icons: ["purchase"]});
        t.push({
            html: '<img src="' + App.settings.server_location.channel_location + '/images/channels/' + r.channel_image + '" />' + o,
            data: {"data-id": r.channel_id, "data-page": "Channel", "data-fn": "init"}
        })
    }
    this.makeZone({
        items: t,
        selector: ".channels",
        selection: "zone"
    }), this.indexNews = 0, this.timerNews = null, this.scrollNews(), $(".movies-holder img, .series-holder img, .channels-holder img").waitForImages(function () {
        App.showPage()
    })
}, App.Home.getRandomMetroItems = function () {
    for (var e = [], t = 0; t < App.metro.movies.length; t++) App.metro.movies[t].backdrop && e.push({
        page: "VODDetail",
        id: App.metro.movies[t].id,
        name: App.metro.movies[t].name,
        description: App.metro.movies[t].description,
        backdrop:   App.settings.server_location.movie_location + '/images/movies/'+ App.metro.movies[t].backdrop
    });
    for (t = 0; t < App.metro.series.length; t++) App.metro.series[t].backdrop && e.push({
        page: "SeriesDetail",
        id: App.metro.series[t].vod_id,
        name: App.metro.series[t].name,
        description: App.metro.series[t].description,
        backdrop: App.settings.server_location.serie_location + '/images/series/' + App.metro.series[t].backdrop
    });
    for (t = 0; t < 7 && t < e.length;) {
        for (var i = !1, s = App.random(0, e.length - 1), a = 0; a < this.pool.length; a++) if (this.pool[a].page === e[s].page && this.pool[a].id === e[s].id) {
            i = !0;
            break
        }
        i || (this.pool.push(e[s]), t++)
    }
}, App.Home.scrollHero = function (e) {
    if (e) {
        if (0 === this.indexHero) return this.isMetroZone = !1;
        this.indexHero = 0 < this.indexHero ? this.indexHero - 1 : this.totalHero - 1
    } else {
        if (this.indexHero === this.totalHero - 1) return this.isMetroZone = !1;
        this.indexHero = this.indexHero < this.totalHero - 1 ? this.indexHero + 1 : 0
    }
    $(".metro .item").removeClass("last-active").addClass("no-mouse-selection"), $('.metro .item[data-index="' + this.indexHero + '"]').addClass("last-active").removeClass("no-mouse-selection"), this.object = $('.metro .item[data-index="' + this.indexHero + '"]'), this.select();
    var s = [];
    return $(".metro .item").each(function () {
        s.push($(this).attr("data-rotate"))
    }), s.rotate(void 0 === typeof e || !e), $(".metro .item").each(function (e) {
        var t = $(".metro").height(), i = JSON.parse(GWareBase64.decode(s[e]));
        $(this).attr("data-rotate", s[e]).css({"z-index": i.z, left: i.l, "margin-top": i.m, height: t - i.h})
    }), !0
}, App.Home.scrollNews = function () {
    if (0 === App.metro.news.length) {
        var e = $(".home-middle").height(), t = $(".news-holder"), i = $(".metro-holder");
        return t.remove(), i.css({"margin-top": (e - i.height()) / 2}), !1
    }
    var s = App.metro.news[this.indexNews];
    $(".news-holder .date").html((new Date).niceDate()), $(".news-holder img").attr("src", window.location.protocol + App.settings.url.image + s.image), $(".news-holder .text").html(s.description.limit(256)), this.indexNews = this.indexNews < App.metro.news.length - 1 ? this.indexNews + 1 : 0, this.timerNews = window.setTimeout(this.scrollNews.bind(this), 1e4), this.checkImages($(".news-holder"))
}, App.Home.zoneChange = function (e, t) {
    -1 < e.indexOf("channels") && $(".channel-holder").css("bottom", -150), -1 < t.indexOf("channels") && $(".channel-holder").css("bottom", 0)
}, App.Home.unload = function () {
    window.clearTimeout(this.timerNews)
}, $(document).on("click", ".home .ico-keyboard-arrow-down", function () {
    $(".channel-holder").css("bottom", 0)
}), App.HomePLAYER = GWareIPTV.UIBase.HomePLAYER, App.HomeTV = GWareIPTV.UIBase.HomeTV, App.HomeVOD = GWareIPTV.UIBase.HomeVOD, App.Offline = GWareIPTV.UIBase.Offline, App.Search = GWareIPTV.UIBase.Search, App.User = GWareIPTV.UIBase.User, App.Album = GWareIPTV.UIBase.Album, App.Music = GWareIPTV.UIBase.Music, App.Music.onLoad = function (e) {
    var t = [{html: _("Search"), data: {"data-fn": "searchPanelShow"}}], i = [];
    this.resetPageLayout(e), this.makeZone({items: t, selector: ".sub-menu", selection: "zone"});
    for (var s = 0, a = 0; a < App.user.package.music.length; a++) {
        var n = App.user.package.music[a], o = (e = "", []);
        e = '<div class="movies-holder row-block" data-index="' + a + '"><div class="row-label">' + n.name + '</div><div class="row-content"><div class="movies m-' + a + '" data-fn-select="preview" /></div></div>', $(".store").append(e), $('.store .row-block[data-index="' + a + '"]').css("top", s), s += $(".row-block").outerHeight() + 20, n.albums.forEach(function (e) {
            i.push(e), o.push({
                html: '<img src="' + e.poster + '" />',
                data: {
                    "data-id": e.id,
                    "data-fn": "init",
                    "data-name": e.name,
                    "data-artist": e.artist,
                    "data-description": e.description,
                    "data-page": "Album"
                }
            })
        }), this.makeZone({
            items: o,
            selector: '.store .row-block[data-index="' + a + '"] .movies',
            selection: "zone",
            events: {
                keyUp: function () {
                    this.shouldRotate(0) && this.moveRowDown(), App.LS.run("up"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
                }, keyDown: function () {
                    this.shouldRotate(1) && this.moveRowUp(), App.LS.run("down"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
                }, keyBack: function () {
                    this.object = $(".sub-menu .item:first-child"), this.select()
                }
            }
        })
    }
    this.select($('.store .row-block[data-index="0"] .movies .item:first-child')), ["web", "mobile"].hasValue(App.user.device.category) && ($(".store").prepend('<span class="ico ico-keyboard-arrow-down"></span>'), $(".store").append('<span class="ico ico-keyboard-arrow-up"></span>')), this.albumSet = i, this.enableMenu("Music")
}, App.Music.shouldRotate = function (e) {
    if (-1 === this.getZone().indexOf("movies")) return !1;
    var t = this.object.parents(".row-block"), i = parseInt(t.position().top, 10);
    return e * ($(".store .row-block").height() + 20) === i
}, App.Music.moveRowUp = function () {
    $(".store .row-block").each(function () {
        var e = $(this).position().top, t = $(this).height() + 20;
        e = t <= e ? e - t : t * ($(".store .row-block").length - 1), $(this).css("top", e)
    }), App.LS.setupZones()
}, App.Music.moveRowDown = function () {
    $(".store .row-block").each(function () {
        var e = $(this).position().top, t = $(this).height() + 20;
        e = e < t * ($(".store .row-block").length - 1) ? e + t : 0, $(this).css("top", e)
    }), App.LS.setupZones()
}, $(document).on("click", ".store .ico-keyboard-arrow-up", function () {
    App.VODBrowse.moveRowUp()
}), $(document).on("click", ".store .ico-keyboard-arrow-down", function () {
    App.VODBrowse.moveRowDown()
}), App.Music.searchPanelGo = function () {
    var t = $('input[name="term"]').val().toLowerCase(), i = [], s = [];
    "" !== t && (this.albumSet.forEach(function (e) {
        -1 < e.name.toLowerCase().indexOf(t) && i.push({id: e.id, name: e.name})
    }), i.forEach(function (e) {
        s.push({
            html: e.name,
            data: {"data-id": e.id, "data-fn": "init", "data-page": "Album", "data-close-search": !0}
        })
    }), this.searchPanelRenderResults(s))
}, App.Advertisement = GWareIPTV.UIBase.Advertisement, App.Advertisement.onLoad = function (e) {
    this.resetPageLayout(e, !0), $(".content, .stb .content").css("height", window.innerHeight), $(".ad-bg").css("background-image", 'url("' + window.location.protocol + App.settings.url.image + this.item.backdrop + '")'), this.makeZone({
        rows: [[{
            html: _("Play commercial"),
            data: {"data-fn": "play", "data-page": ""}
        }], [{
            html: _("Request more information"),
            data: {"data-fn": "info", "data-page": ""}
        }], [{html: _("Back to menu"), data: {"data-fn": "init", "data-page": App.pageDefault.page}}]],
        selector: ".ad-menu",
        selection: "bg",
        scroller: {width: "100%", height: "auto"}
    }), App.reports.set({
        type: 31,
        name: this.item.text,
        id: this.item.id
    }), this.select($(".ad-menu .item:first-child")), this.fnBack = App.pageDefault.page
}, App.SeriesBrowse = GWareIPTV.UIBase.SeriesBrowse, App.SeriesBrowse.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getSeries(413.3333);
    if (!t.length) return !1;
    this.makeZone({
        rows: t,
        selector: ".stores",
        selection: "zone",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        align: "center",
        pager: {type: "rows", count: GWareConfig.zoneItemCount}
    })
}, App.SeriesDetail = GWareIPTV.UIBase.SeriesDetail, App.SeriesDetail.onLoad = function (e) {
    this.playerPages.hasValue("SeriesDetail") || this.playerPages.push("SeriesDetail"), this.resetPageLayout(e);
    var t = this.getSeasonMenu();
    if (!t.length) return !1;
    this.makeZone({
        rows: [t],
        selector: ".sub-menu",
        selection: "zone"
    }), this.select($(".sub-menu .item:nth-child(2)")), this.loadSeason(this.object.data())
}, App.SeriesPlayer = GWareIPTV.UIBase.SeriesPlayer, App.SeriesPlayer.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "zone",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    })
}, App.SeriesStore = GWareIPTV.UIBase.SeriesStore, App.SeriesStore.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = this.getStores(413.3333);
    t.length ? this.makeZone({
        rows: t,
        selector: ".stores",
        selection: "zone",
        stretchImages: !0,
        align: "center",
        scroller: {width: "auto", height: "auto"}
    }) : $(".main").html('<div><p class="empty">' + _("There are no series stores") + "</p></div>"), this.fnBack = App.pageDefault.page, this.enableMenu("Series")
}, App.SettingsAbout = GWareIPTV.UIBase.SettingsAbout, App.SettingsAbout.render = function () {
    App.userSettings.renderMenu({
        type: "vertical",
        selection: "zone",
        events: {keyBack: this.keyBack.bind(this)}
    }), App.userSettings.renderOptions({section: "about", selection: "zone", brand: ".title"})
}, App.SettingsAbout.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".btn-menu .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.SettingsCatchupTV = GWareIPTV.UIBase.SettingsCatchupTV, App.SettingsCatchupTV.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        type: "vertical",
        events: {keyBack: this.keyBack.bind(this)}
    }), App.userSettings.renderOptions({selection: "zone", section: "catchup", brand: ".title"})
}, App.SettingsCatchupTV.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".btn-menu .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.SettingsDisclaimer = GWareIPTV.UIBase.SettingsDisclaimer, App.SettingsGeneral = GWareIPTV.UIBase.SettingsGeneral, App.SettingsGeneral.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        type: "vertical",
        events: {keyBack: this.keyBack.bind(this)}
    }), App.userSettings.renderOptions({selection: "zone", section: "general", brand: ".title"})
}, App.SettingsGeneral.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".btn-menu .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.SettingsLanguages = GWareIPTV.UIBase.SettingsLanguages, App.SettingsLanguages.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        type: "vertical",
        events: {keyBack: this.keyBack.bind(this)}
    }), App.userSettings.renderOptions({selection: "zone", section: "languages", brand: ".title"})
}, App.SettingsLanguages.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".btn-menu .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.SettingsScreenSaver = GWareIPTV.UIBase.SettingsScreenSaver, App.SettingsScreenSaver.render = function () {
    App.userSettings.renderMenu({
        selection: "zone",
        type: "vertical",
        events: {keyBack: this.keyBack.bind(this)}
    }), App.userSettings.renderOptions({selection: "zone", section: "screensaver", brand: ".title"})
}, App.SettingsScreenSaver.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".btn-menu .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.SettingsSpeedTest = GWareIPTV.UIBase.SettingsSpeedTest, App.SettingsSpeedTest.render = function () {
    App.userSettings.renderMenu({
        type: "vertical",
        selection: "zone",
        events: {keyBack: this.keyBack.bind(this)}
    }), this.makeZone({
        rows: [{
            html: _("Start test"),
            data: {"data-fn": "start"},
            style: {width: $(".controls").width() + "px"}
        }].matrix("horizontal"), selector: ".controls", selection: "zone"
    }), this.select($(".controls .row:first .item:first"))
}, App.SettingsSpeedTest.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".btn-menu .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.SettingsSupport = GWareIPTV.UIBase.SettingsSupport, App.SettingsSupport.render = function () {
    App.userSettings.renderMenu({
        type: "vertical",
        events: {keyBack: this.keyBack.bind(this)}
    }), App.userSettings.renderOptions({section: "support", brand: ".title"})
}, App.SettingsSupport.keyBack = function (e) {
    if (e && e.preventDefault(), this.object.parents(".hot-zone").hasClass("settings-menu")) return this.object = $(".btn-menu .item").first(), void this.select();
    this.pageLoader(App.pageDefault.page)
}, App.CatchUpHome = GWareIPTV.UIBase.CatchUpHome, App.CatchUp = GWareIPTV.UIBase.CatchUp, App.CatchUp.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.timerError = null, this.pausedTS = null, this.programme = {
        start_p: 0,
        end_p: 0
    }, this.makeZone({
        rows: [[{html: "&nbsp;", style: {width: window.innerWidth, height: window.innerHeight}}]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind", !0),
            keyRight: this.preselect.bind(this, "forward", !0),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-skip-previous"></span>',
            data: {"data-fn": "skipPrev"}
        }, {
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {
            html: '<span class="ico ico-fast-forward"></span>',
            data: {"data-fn": "forward"}
        }, {html: '<span class="ico ico-skip-next"></span>', data: {"data-fn": "skipNext"}}]],
        selector: ".sub-menu",
        selection: "zone",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), this.item.ts || (this.item.ts = this.item.start), this.channel = App.util.getChannelData(this.item.id), this.skipInterval = 60, this.reload(!0);
    var t = App.epg.getProgrammeByTime(this.channel.id);
    this.programme.start_p = t.ut_start, this.programme.end_p = t.ut_end, this.item.report || (lg("catchup > start report action as catchup"), App.reports.set({
        type: this.item.report_action ? this.item.report_action : 5,
        name: this.channel.name,
        id: this.channel.id,
        epg: t.name
    })), App.player.setup({
        url: this.url, secure: this.channel.secure, events: {
            complete: function () {
            }, time: function (e) {
                30 < e.position && !this.reportSent && (this.report($(".panel-middle .title").text()), this.reportSent = !0)
            }.bind(this), play: function () {
                this.timerError && window.clearTimeout(this.timerError)
            }.bind(this), error: function (e) {
                lg("catchup > error event fired", "error"), lg(e)
            }.bind(this), ready: function () {
                App.player.play(), this.isPaused = !1, this.preselect("play"), App.timer({key: "catchup-playback"})
            }.bind(this)
        }
    }), this.timeline(), this.timerTimeline = window.setInterval(this.timeline.bind(this), 500), this.fnBack = "TV"
}, App.FavoriteManager = GWareIPTV.UIBase.FavoriteManager, App.Recording = GWareIPTV.UIBase.Recording, App.Recording.renderZone = function (e) {
    this.makeZone({rows: e, selector: ".recordings", selection: "zone", scroller: {width: "auto", height: "auto"}})
}, App.RecordingPlayer = GWareIPTV.UIBase.RecordingPlayer, App.RecordingPlayer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {keyLeft: this.preselect.bind(this, "rewind"), keyRight: this.preselect.bind(this, "forward")}
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "zone",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), App.reports.set({
        type: 6,
        name: this.item.title
    }), $(".movie-header .title").html(this.item.title), this.start(), this.fnBack = this.item.back ? this.item.back : "Recording", this.enableMenu()
}, App.Channel = GWareIPTV.UIBase.Channel, App.Channel.infoUpdate = function () {
    var n = this;
    $(".panel").each(function () {
        var e = parseInt($(this).attr("data-id"), 10), t = App.epg.getProgrammeByTime(e),
            i = (new Date).getTime() / 1e3, s = t.ut_end - t.ut_start, a = (t.ut_end - t.ut_start) / 60;
        elapsed = i - t.ut_start, time = 0 === t.ut_start ? "" : new Date(1e3 * t.ut_start).niceTime() + " - " + new Date(1e3 * t.ut_end).niceTime(), remaining = 0 === t.ut_start ? "" : Math.round((s - elapsed) / 60) + " min remaining", progress = 0 === t.ut_start ? 0 : Math.round(100 * elapsed / s), $(this).find(".favorites .text").html(App.favorites.is(e) ? "Remove from Favorites" : "Add to Favorites"), $(this).find(".logo img").attr("src", t.channel.logo), $(this).find(".number").html(t.channel.number), $(this).find(".title").html(t.name), 0 === a && $(this).find(".title span").hide(), $(this).find(".description").html(t.description), $(this).find(".time").html(time + '<span class="current-time">' + (new Date).niceTime() + "</span>"), $(this).find(".elapsed").html(remaining), $(this).find(".progress .bar").css("width", progress + "%"), $(this).hasClass("panel-middle") && (n.channel.current = t)
    })
}, App.TV = GWareIPTV.UIBase.TV, App.TV.onLoad = function (e) {
    return this.resetPageLayout(e), this.makeZone({
        rows: this.loadCategories(),
        selector: ".category-menu",
        selection: "zone"
    }), this.object = $('.category-menu .item[data-id="-1"]'), this.select(), $(".main-menu .item").removeClass("selected"), $('.main-menu .item[data-page="TV"]').addClass("selected"), this.fnBack = App.pageDefault.page, this.enableMenu("TV"), !0
}, App.TV.listChannels = function (e) {
	
    var t = this.getChannels(e.id, {
		
        tile: Math.floor($(".channels").width() / 110),
        list: Math.floor($(".channels").width() / 290)
    });
	   

    if (!t.length) return this.destroyZone($(".channels").attr("id")), $(".channels").html('<p class="empty">' + _("There are no channels in this category") + "</p>"), !1;
    this.makeZone({
        rows: t,
        selector: ".channels",
        selection: "zone",
        scroller: {width: "100%", height: "100%"},
        align: "center",
        pager: {type: "rows", count: GWareConfig.zoneItemCount}
    })
}, App.TV.getChannels = function (e, t) {
    var i, s = 0, a = [], n = null, o = [];
    this.settings = store.get("iptv.channel.list") || {display: "tile", sort: "number"};
    for (var r = 0; r < App.user.package.tv.list.length; r++) n = App.user.package.tv.list[r], (App.util.channelIsInGroup(n.id, e) || -1 === e) && (coverIcons = App.util.createCoverIcons({
        id: n.id,
        type: "channel",
        icons: ["purchase"]
    }), o.push({
        html: "tile" === this.settings.display ? '<img src="' + n.logo.normal + '" />' + coverIcons : "<span>" + n.number + '</span><span><img src="' + n.logo.small + '" /></span><span>' + n.name + "</span>" + coverIcons,
        data: {"data-number": n.number, "data-name": n.name, "data-id": n.id}
    }));
    "name" === this.settings.sort && o.sort(function (e, t) {
        return e.data["data-name"] < t.data["data-name"] ? -1 : 1
    }), $(".category-menu .item").removeClass("selected"), $('.category-menu .item[data-id="' + e + '"]').addClass("selected"), $(".channels").addClass(this.settings.display), i = o.length;
    for (r = 0; r < i; r++) a[s] || (a[s] = []), a[s].push(o[r]), 0 === Math.fmod(r + 1, t[this.settings.display]) && s++;
    return a
}, App.VODBrowse = GWareIPTV.UIBase.VODBrowse, App.VODBrowse.onLoad = function (e) {
    this.item ? (this.lastId = this.item.id, this.back = this.item.back, this.storeId = this.item.id) : this.storeId = this.lastId, this.store = App.util.getVODStore(this.storeId), this.resetPageLayout(e);
    var t = [{html: _("Back"), data: {"data-fn": "btnBack"}}, {
        html: _("Search"),
        data: {"data-fn": "searchPanelShow"}
    }];
    this.makeZone({items: t, selector: ".sub-menu", selection: "zone"});
    var i = 0;
    App.VODBrowse.movieIds = [];
    for (var s = 0; s < this.store.categories.length; s++) {
        var a = this.store.categories[s], n = (e = "", []);
        e = '<div class="movies-holder row-block" data-index="' + s + '"><div class="row-label">' + a.name + '</div><div class="row-content"><div class="movies m-' + s + '" /></div></div>', $(".store").append(e), $('.store .row-block[data-index="' + s + '"]').css("top", i), i += $(".row-block").outerHeight() + 20, a.movies.forEach(function (e) {
            coverIcons = App.util.createCoverIcons({
                id: e.id,
                type: "movie",
                icons: ["purchase", "watch"]
            }), n.push({
                html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '" />' + coverIcons,
                data: {
                    "data-id": e.id,
                    "data-fn": "init",
                    "data-image":App.settings.server_location.movie_location + '/images/movies/' + e.backdrop,
                    "data-page": "VODDetail"
                }
            }), App.VODBrowse.movieIds.push(e.id)
        }), this.makeZone({
            items: n,
            selector: '.store .row-block[data-index="' + s + '"] .movies',
            selection: "zone",
            pager: {type: "cols", count: GWareConfig.zoneItemCount},
            events: {
                keyUp: function () {
                    this.shouldRotate(0) && this.moveRowDown(), App.LS.run("up"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
                }, keyDown: function () {
                    this.shouldRotate(1) && this.moveRowUp(), App.LS.run("down"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
                }, keyBack: function () {
                    this.select($(".sub-menu .item:first-child"))
                }
            }
        })
    }
    0 < $(".movies-holder:first-child .movies .item").length && (this.select($(".movies-holder:first-child .movies .item:first-child")), ["web", "mobile"].hasValue(App.user.device.category) && ($(".store").prepend('<span class="ico ico-keyboard-arrow-down"></span>'), $(".store").append('<span class="ico ico-keyboard-arrow-up"></span>'))), this.enableMenu("VOD"), this.fnBack = this.back
}, App.VODBrowse.shouldRotate = function (e) {
    if (-1 === this.getZone().indexOf("movies")) return !1;
    var t = this.object.parents(".row-block"), i = parseInt(t.position().top, 10);
    return e * ($(".store .row-block").height() + 20) === i
}, App.VODBrowse.moveRowUp = function () {
    $(".store .row-block").each(function () {
        var e = $(this).position().top, t = $(this).height() + 20;
        e = t <= e ? e - t : t * ($(".store .row-block").length - 1), $(this).css("top", e)
    }), App.LS.setupZones()
}, App.VODBrowse.moveRowDown = function () {
    $(".store .row-block").each(function () {
        var e = $(this).position().top, t = $(this).height() + 20;
        e = e < t * ($(".store .row-block").length - 1) ? e + t : 0, $(this).css("top", e)
    }), App.LS.setupZones()
}, App.VODBrowse.preview = function (e) {
    $(".hero").css({
        "background-size": "cover",
        "background-position": "50% 50%",
        "background-image": 'url("' + e.image + '")'
    })
}, $(document).on("click", ".store .ico-keyboard-arrow-up", function () {
    App.VODBrowse.moveRowUp()
}),$(document).on("click", ".store .ico-keyboard-arrow-down", function () {
    App.VODBrowse.moveRowDown()
}),App.VODDetail = GWareIPTV.UIBase.VODDetail,App.VOD = GWareIPTV.UIBase.VOD,App.VOD.onLoad = function (e) {
    this.resetPageLayout(e);
    var i = 0, s = 0, a = Math.floor($(".vod").width() / 413.3333), n = [];
    App.user.package.movie.forEach(function (e) {
        if (e.isMain) {
            var t = null;
            t = 0 === e.categories.length && 0 === e.subs.length ? {"data-fn": "warn"} : {
                "data-id": e.id,
                "data-fn": "init",
                "data-back": "VOD",
                "data-page": 0 === e.subs.length ? "VODBrowse" : "VODSub"
            }, n[s] || (n[s] = []), n[s].push({
                html: '<img src="' + e.logo + '" />',
                data: t
            }), i++, 0 === Math.fmod(i, a) && s++
        }
    }), n.length ? this.makeZone({
        rows: n,
        selector: ".stores",
        selection: "zone",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        align: "center"
    }) : $(".main").html('<div><p class="empty">' + _("There are no movie stores") + "</p></div>"), this.fnBack = App.pageDefault.page, this.enableMenu("VOD")
},App.VODMovie = GWareIPTV.UIBase.VODMovie,App.VODMovie.renderMenu = function (e) {
    this.makeZone({
        rows: e,
        selector: ".sub-menu",
        selection: "zone",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    })
},App.VODSub = GWareIPTV.UIBase.VODSub,App.VODSub.render = function (e) {
    this.makeZone({
        rows: e,
        selector: ".stores",
        selection: "zone",
        stretchImages: !0,
        scroller: {width: "auto", height: "auto"},
        align: "center"
    }), this.makeZone({
        items: [{html: _("Back"), data: {"data-fn": "btnBack"}}],
        selector: ".sub-menu",
        selection: "zone"
    })
},App.VODTrailer = GWareIPTV.UIBase.VODTrailer,App.VODTrailer.onLoad = function (e) {
    this.resetPageLayout(e, !0), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind"),
            keyRight: this.preselect.bind(this, "forward"),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "zone",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), $(".movie-header .title").html(this.item.name), App.player.setup({
        url: this.item.url,
        events: {
            complete: function () {
                this.pageLoader(this.fnBack)
            }.bind(this), time: function (e) {
                $(".progress-holder .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function () {
                pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), this.fnBack = "VODDetail", this.infoShow(), App.reports.set({type: 12, name: this.item.name})
},App.Youtube = GWareIPTV.UIBase.Youtube,App.Youtube.loaded = function () {
    var e = App.Youtube, t = [];
    e.resetPageLayout(e.html), t.push({
        html: _("Search"),
        data: {"data-fn": "searchPanelShow"}
    }), e.categories.forEach(function (e) {
        if ("Music" === e.name) return !1;
        t.push({
            html: e.name,
            data: {"data-id": e.id, "data-channel-id": e.channelId, "data-name": e.name, "data-fn": "loadCategory"}
        })
    }), e.makeZone({
        items: t,
        selector: ".sub-menu",
        selection: "zone"
    }), e.fnBack = App.pageDefault.page, e.enableMenu("Youtube"), e.object = $(".sub-menu .item:nth-child(3)"), e.select(), e.loadCategory(e.object.data())
},App.Youtube.loadCategory = function (e) {
    var n = this;
    $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-id="' + e.id + '"]').addClass("selected"), this.loading($(".clips")), this.videos = [], xhr({
        url: "https://www.googleapis.com/youtube/v3/videos?part=snippet&maxResults=50&chart=mostPopular&videoCategoryId=" + e.id + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var s = [[], [], [], []], a = 0;
            e.items.forEach(function (e, t) {
                var i = "";
                e.snippet.thumbnails && (i = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url), n.videos.push({
                    id: e.id,
                    image: i,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), s[a].push({
                    html: '<div class="image-holder" style="background-image: url(' + i + ')"></div><div class="content"><div class="title">' + e.snippet.title + '</div><div class="description">' + e.snippet.description.limit(256) + "</div></div>",
                    data: {
                        "data-index": t,
                        "data-fn": "init",
                        "data-title": e.snippet.title,
                        "data-desc": e.snippet.description,
                        "data-back": "Youtube",
                        "data-page": "YoutubePlayer"
                    },
                    style: {
                        height: $(".clips").innerHeight() / 4 - 11 + "px",
                        width: $(".clips").innerWidth() / 2 - 10 + "px"
                    }
                }), a = a < 3 ? a + 1 : 0
            }), n.makeZone({
                rows: s,
                selector: ".clips",
                selection: "zone",
                scroller: {width: "auto", height: "auto"},
                chunkSize: 64
            }), n.object = $(".clips .scroller .row:nth-child(1) .item:nth-child(1)"), n.select()
        },
        error: function () {
            n.notification("An error occured, please try again later")
        }
    })
},App.Youtube.searchPanelGo = function () {
    var n = this, e = $('input[name="term"]').val().toLowerCase();
    "" !== e && ($(".search-panel .vertical").html(""), $(".clips").html('<div class="spinner-holder"><span class="text">Loading</span><div class="loader"></div></div>'), this.videos = [], xhr({
        url: "https:///www.googleapis.com/youtube/v3/search?part=snippet&maxResults=50&q=" + e + "&key=" + App.settings.youtubeKey,
        success: function (e) {
            var s = [[], [], [], []], a = 0;
            n.searchPanelHide(), e.items.forEach(function (e, t) {
                var i = void 0 === e.snippet.thumbnails.standard ? e.snippet.thumbnails.default.url : e.snippet.thumbnails.standard.url;
                n.videos.push({
                    id: e.id.videoId,
                    image: i,
                    title: e.snippet.title,
                    description: e.snippet.description
                }), s[a].push({
                    html: '<div class="image-holder" style="background-image: url(' + i + ')"></div><div class="content"><div class="title">' + e.snippet.title + '</div><div class="description">' + e.snippet.description.limit(256) + "</div></div>",
                    data: {"data-index": t, "data-fn": "init", "data-page": "YoutubePlayer", "data-back": "Youtube"},
                    style: {
                        height: $(".clips").innerHeight() / 4 - 12 + "px",
                        width: $(".clips").innerWidth() / 2 - 11 + "px"
                    }
                }), a = a < 3 ? a + 1 : 0
            }), n.makeZone({
                rows: s,
                selector: ".clips",
                selection: "zone",
                scroller: {width: "auto", height: "auto"},
                chunkSize: 64
            })
        }
    }))
},App.YoutubePlayer = GWareIPTV.UIBase.YoutubePlayer,App.YoutubePlayer.reload = function () {
    var e = App.baseURL.youtube + "?videoid=" + this.videos[this.index].id,
        t = this.index < this.videos.length - 1 ? this.index + 1 : 0,
        i = 0 < this.index ? this.index - 1 : this.videos.length - 1;
    App.reports.set({type: 18, name: this.videos[this.index].title}), App.player.setup({
        url: e,
        events: {
            complete: function () {
                this.next()
            }.bind(this), time: function (e) {
                $(".info .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function (e) {
                lg(e), pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), "left" === this.lastSwipe && ($(".panel-left, .panel-middle").remove(), $(".panel-right").addClass("panel-middle").removeClass("panel-right").css("left", "0")), "right" === this.lastSwipe && ($(".panel-right, .panel-middle").remove(), $(".panel-left").addClass("panel-middle").removeClass("panel-left").css("left", "0")), $(".info").prepend(this.clonePanel("left")).append(this.clonePanel("right")), $(".panel-left").attr("data-index", i), $(".panel-right").attr("data-index", t), $(".panel-middle").attr("data-index", this.index), $(".panel-left .sub-menu, .panel-right .sub-menu").html(""), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".panel-middle .sub-menu",
        selection: "zone",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), this.infoUpdate(), this.preselect("play")
};
//# sourceMappingURL=7-kalakand.min.js.map