GWareIPTV.UIPrototype.prototype.updateTime = function () {
    $(".header-right .time").html((new Date).niceTime())
}, GWareIPTV.UIPrototype.prototype.updateWeather = function (e, t, s) {
    if (lg("weather > data arrived"), App.settings.access.feature.weather) {
        var i = (new Date).getHours(), a = i < 6 || 21 < i ? "night" : "day";
        $(".weather .city").html(t), $(".weather .degree").html(e.temp_C + " &deg;C / " + e.temp_F + " &deg;F"), $(".weather .icon").html('<img src="artwork/weather/' + a + "/" + e.weatherCode + '.png" />')
    }
}, GWareIPTV.UIPrototype.prototype.resetPageLayout = function (e, t) {
    $(".hero").css("display", t ? "none" : "block"), $(".main").css("height", t ? window.innerHeight : window.innerHeight - 320 + "px"), e && $(".main").html(e), this.isPlayerPage = this.playerPages.hasValue(this.name), this.setupHoverMenu(t)
}, GWareIPTV.UIPrototype.prototype.setupFrame = function () {
    this.setupMenuFrame({selection: "bg", vertical: !1, type: "text", preType: "icon", perRow: !1})
}, GWareIPTV.UIPrototype.prototype.loadCustomStyles = function () {
    var e = App.hex2rgb(App.settings.style.highlight.primary),
        t = [{selector: "body", style: {"font-size": App.getFontSize()}}, {
            selector: ".item.selected",
            style: {"background-color": App.settings.style.highlight.secondary}
        }, {
            selector: ".selection.selection-bg",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".selection.selection-border",
            style: {"border-color": App.settings.style.highlight.primary}
        }, {
            selector: ".bg-border.hot-zone .scroller .row .item.active",
            style: {
                "background-color": App.settings.style.highlight.primary,
                "border-color": App.settings.style.highlight.primary
            }
        }, {
            selector: ".epg .programmes .timeline",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".metro-news-date",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".hover-menu .btn",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".progress .bar",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .line",
            style: {"background-color": App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .cursor",
            style: {"border-bottom": "10px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".timebar .tick",
            style: {"border-left": "3px solid " + App.settings.style.highlight.primary}
        }, {
            selector: ".progress .handle",
            style: {"background-color": "rgba(" + e.r + ", " + e.g + ", " + e.b + ", 0.5)"}
        }, {selector: ".progress .handle .dot", style: {"background-color": App.settings.style.highlight.primary}}];
    App.injectStyle(t)
}, GWareIPTV.UIPrototype.prototype.getZone = function () {
    return this.object.parents(".hot-zone").attr("class")
}, App.Apps = GWareIPTV.UIBase.Apps, App.Apps.info = function (e) {
    var t = $(".tv .channel").clone();
    $(".hero .content").html(""), t.appendTo(".hero .content"), $(".hero .channel .logo").html('<img src="' + e.icon + '" />'), $(".hero .channel .name").html(e.name), $(".hero .channel .info-text").text(e.text).show(), this.checkImages($(".channel"))
}, App.Apps.unload = function () {
    $(".hero .content").html("")
}, App.EPGh = GWareIPTV.UIBase.EPGh, App.EPGh.setPreview = function (e) {
    var t = App.epg.getProgrammeByTime(e.id), s = new Date(1e3 * t.ut_start).niceTime(),
        i = new Date(1e3 * t.ut_end).niceTime(), a = $(".content.full .channel").clone();
    $(".hero .content").html(""), a.appendTo(".hero .content"), $(".hero .channel .logo").html('<img src="' + t.channel.logo + '" />'), $(".hero .channel .title").html(t.number + ". " + t.name), $(".hero .channel .date").html(s + " - " + i), $(".hero .channel .description").html(t.description), this.checkImages($(".channel"))
}, App.EPGh.unload = function () {
    $(".hero .content").html(""), this.clearTimer()
}, App.EPGv = GWareIPTV.UIBase.EPGv, App.EPGv.loaded = function () {
    var e = [], t = App.epg[App.epg.viewDate];
    for (var s in this.resetPageLayout(this.html), this.resetEvents(), this.enableMenu("startEPG"), t) e.push([{
        html: '<img src="' + t[s].logo + '" />' + t[s].name,
        data: {"data-id": s}
    }]);
    this.makeZone({
        rows: e,
        selector: ".channels",
        selection: "bg",
        scroller: {width: "100%", height: "auto"}
    }), this.object = App.epg.viewChannelId ? $('.channels .item[data-id="' + App.epg.viewChannelId + '"]') : $(".channels .item:first-child"), this.select(), this.loadProgrammes(this.object.data())
}, App.EPGv.loadProgramme = function (e) {
    var t = App.epg.getProgramme(App.epg.viewDate, e.id, e.epgId), s = new Date(1e3 * t.ut_start).niceTime(),
        i = new Date(1e3 * t.ut_end).niceTime();
    el = $(".content.full .channel").clone(), $(".gv-list .date").html(App.epg.isToday(App.epg.viewDate)), $(".hero .content").html(""), el.appendTo(".hero .content"), $(".hero .channel .logo").html('<img src="' + t.channel.logo + '" />'), $(".hero .channel .title").html(t.name), $(".hero .channel .play-date").html(s + " - " + i), $(".hero .channel .description").html(t.description), this.checkImages($(".channel"))
}, App.EPGv.unload = function () {
    $(".hero .content").html("")
}, App.HomeHOTEL = GWareIPTV.UIBase.HomeHOTEL, App.Home = GWareIPTV.UIBase.Home, App.Home.onLoad = function (e) {
    this.resetPageLayout(e), this.enableMenu("Home"), App.metro._fetch(this.renderMetro.bind(this)), this.fromPage = null
}, App.Home.renderMetro = function () {
    var e = 0, s = [], t = [], i = [], a = [];
    App.metro.movies.forEach(function (e) {
        var t = App.util.createCoverIcons({id: e.id, type: "movie", icons: ["purchase", "watch"]});
        s.push({
            html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '" />' + t,
            data: {
                "data-image": e.backdrop,
                "data-preview-text": e.description,
                "data-preview-name": e.name,
                "data-id": e.id,
                "data-fn": "init",
                "data-page": "VODDetail"
            }
        })
    }), App.metro.series.forEach(function (e) {
        t.push({
            html: '<img src="' + App.settings.server_location.serie_location + '/images/series/' + e.poster + '" />',
            data: {
                "data-image": e.backdrop,
                "data-preview-text": e.description,
                "data-preview-name": e.name,
                "data-id": e.vod_id,
                "data-fn": "init",
                "data-store-id": App.util.getStoreIdBySerieId(e.vod_id),
                "data-page": "SeriesDetail"
            },
            style: {}
        })
    }), App.metro.tv.forEach(function (e) {
        var t = App.epg.getProgrammeByTime(e.channel_id),
            s = App.util.createCoverIcons({id: e.channel_id, type: "channel", icons: ["purchase"]});
        a.push({
            html: '<img src="' + App.settings.server_location.channel_location + '/images/channels/' + e.channel_image + '" />' + s,
            data: {
                "data-image": e.channel_image,
                "data-preview-text": t.description,
                "data-preview-name": t.name,
                "data-id": e.channel_id,
                "data-fn": "init",
                "data-page": "Channel"
            },
            style: {}
        })
    }), this.makeZone({rows: [s], selector: ".movies", selection: "border"}), this.makeZone({
        rows: [t],
        selector: ".series",
        selection: "border"
    }), this.makeZone({
        rows: [a],
        selector: ".channels",
        selection: "border"
    }), $(".movies-holder").css("top", e), e += $(".movies-holder").outerHeight(), $(".channels-holder").css("top", e), e += $(".channels-holder").outerHeight(), $(".series-holder").css("top", e), e += $(".series-holder").outerHeight(), 0 !== App.metro.news.length ? ($(".metro-news-date").html((new Date).niceDate()), App.metro.news.forEach(function (e) {
        i.push({
            html: '<img src="' + window.location.protocol + App.settings.url.image + e.image + '" />',
            data: {"data-image": e.image, "data-preview-text": e.description, "data-preview-name": "News"}
        })
    }), this.makeZone({
        rows: [i],
        selector: ".news",
        selection: "border"
    }), $(".news-holder").css("top", e), e += $(".news-holder").outerHeight()) : $(".news-holder").remove(), $(".movies-holder img, .series-holder img, .channels-holder img").waitForImages(function () {
        App.showPage()
    })
}, App.Home.preview = function (e) {
    App.player.isSetup && "function" == typeof App.player.player("home-player").remove && App.player.player("home-player").remove(), $("body").css({
        "background-image": 'url("' + App.settings.style.bg + '")',
        "background-color": "#000000"
    });
    var t = '<div class="home"><h1>' + e.previewName + "</h1><p>" + e.previewText + "</p></div>";
    if ($(".hero .content").html(t), "Channel" === e.page) {
        var s = App.util.getChannelData(e.id);
        App.player.setup({
            url: s.url.primary.low,
            selector: {container: "#home-player"},
            secure: s.secure,
            ads: !1,
            events: {
                play: function () {
                    $("body").css({"background-image": "none", "background-color": "transparent"})
                }, ready: function () {
                    App.player.play()
                }
            }
        })
    } else void 0 !== e.page && (App.player.stop(), $("body").css({"background-image": 'url("' + window.location.protocol + App.settings.url.image + e.image + '")'}))
}, App.Home.keyUp = function () {
    this.shouldRotate("up") && (this.moveRowDown(), App.LS.setupZones()), App.LS.run("up"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
}, App.Home.keyDown = function () {
    this.shouldRotate("down") && (this.moveRowUp(), App.LS.setupZones()), App.LS.run("down"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
}, App.Home.shouldRotate = function (e) {
    if (["movies", "series", "channels", "news"].hasValue(this.getZone().replace(" hot-zone", ""))) for (var t = this.getSortedRows(), s = 0; s < t.length; s++) if (t[s].a) {
        if ("up" === e && 0 === s) return !0;
        if ("down" === e && 1 < s) return !0
    }
    return !1
}, App.Home.moveRowUp = function () {
    for (var e = this.getSortedRows(), t = 0, s = 1; s < e.length; s++) e[s].o.css("top", t), t += e[s].h;
    e[0].o.css("top", t)
}, App.Home.moveRowDown = function () {
    var e = 0, t = this.getSortedRows();
    t[t.length - 1].o.css("top", 0), e = t[t.length - 1].h;
    for (var s = 0; s < t.length - 1; s++) t[s].o.css("top", e), e += t[s].h
}, App.Home.getSortedRows = function () {
    var e = [];
    return $(".row-block").each(function () {
        e.push({
            t: $(this).position().top,
            h: $(this).outerHeight(),
            o: $(this),
            a: 0 < $(this).find(".item.active").length
        })
    }), e.sort(function (e, t) {
        return e.t < t.t ? -1 : 1
    }), e
}, App.Home.unload = function () {
    $(".hero .content").html(""), window.clearInterval(this.loadImageInterval), "function" == typeof window.jwplayer && "function" == typeof window.jwplayer(0).remove && (lg("player > home player destroyed"), window.jwplayer(0).remove())
}, App.HomePLAYER = GWareIPTV.UIBase.HomePLAYER, App.HomeTV = GWareIPTV.UIBase.HomeTV, App.HomeVOD = GWareIPTV.UIBase.HomeVOD, App.Offline = GWareIPTV.UIBase.Offline, App.Search = GWareIPTV.UIBase.Search, App.User = GWareIPTV.UIBase.User, App.Album = GWareIPTV.UIBase.Album, App.Album.onLoad = function (e) {
    this.resetPageLayout(e);
    var s = [];
    this.album = App.util.getMusicAlbum(this.item.id), this.index = 0, this.reportSent = !1, this.renderMenu([[{
        html: _("Back"),
        data: {"data-fn": "init", "data-page": "Music"}
    }, {
        html: '<span class="ico ico-skip-previous"></span>',
        data: {"data-fn": "prev"}
    }, {
        html: '<span class="ico ico-fast-rewind"></span>',
        data: {"data-fn": "rewind"}
    }, {
        html: '<span class="ico ico-pause"></span>',
        data: {"data-fn": "play"}
    }, {
        html: '<span class="ico ico-fast-forward"></span>',
        data: {"data-fn": "forward"}
    }, {
        html: '<span class="ico ico-skip-next"></span>',
        data: {"data-fn": "next"}
    }, {
        html: '<span class="ico ico-share"></span> ' + _("Social Share"),
        data: {"data-fn": "fbShare", "data-title": this.album.name, "data-type": "album", "data-id": this.album.id}
    }]]), $(".hero .content").html('<div class="detail"><div class="row-fluid"><div class="m-img"><img /></div><div class="text-info"><div class=""><div class="span12 name" /><div class=""><div class="span12 artist" /></div><div class=""><div class="span12 description" /></div></div></div>'), $(".hero .detail img").attr("src", this.album.poster), $(".hero .detail .artist").html(this.album.artist), $(".hero .detail .name").html(this.album.name), $(".hero .detail .description").html(this.album.description), this.album.songs.forEach(function (e, t) {
        s[t] || (s[t] = []), s[t].push({
            html: '<div class="span1">' + (t + 1) + '.</div><div class="span8">' + e.name + '</div><div class="span3 time"></div>',
            data: {"data-index": t},
            cls: "row-fluid"
        })
    }), App.reports.set({
        type: 16,
        name: this.album.name,
        id: this.album.id
    }), this.renderPlaylist(s), this.loadTrack(), this.fnBack = "Music", this.enableMenu("Music")
}, App.Album.loadTrack = function (e) {
    e && (this.index = e.index);
    var t = this, s = this.album.songs[this.index].url;
    $(".playlist .item").each(function () {
        $(this).find(".ico").remove(), $(this).find(".progress").remove(), $(this).find(".time").html("")
    }), $('.playlist .item[data-index="' + this.index + '"]').append('<div class="progress"><div class="bar"></div></div>'), $('.playlist .item[data-index="' + this.index + '"]').find(".span9").prepend('<span class="ico ico-play-arrow"></span>'), App.player.setup({
        url: s,
        secure: this.album.songs[this.index].secure,
        events: {
            time: function (e) {
                $('.playlist .item[data-index="' + t.index + '"] .progress .bar').css("width", e.percent + "%"), $('.playlist .item[data-index="' + t.index + '"] .time').html(e.remaining.toCounter()), 30 < e.position && !this.reportSent && (this.report(this.album.name), this.reportSent = !0)
            }.bind(this), error: function (e) {
                lg(e), pp({message: _("Stream is not available at this moment [2003]")})
            }, complete: function () {
                this.index < this.album.songs.length - 1 && (this.index++, this.loadTrack())
            }.bind(this), ready: function () {
                App.player.play()
            }
        }
    }), this.scrollToSong(t.index)
}, App.Album.scrollToSong = function (e) {
    lg("scrolling to sont ----------");
    var t = 45 * e;
    $(".album.vert-nav").height() < t ? $(".playlist .scroller").css({top: -t}) : $(".playlist .scroller").css({top: 0})
}, App.Album.unload = function () {
    $(".hero .content").html("")
}, App.Music = GWareIPTV.UIBase.Music, App.Music.onLoad = function (e) {
    this.resetPageLayout(e);
    var t = 0, s = [{html: _("Search"), data: {"data-fn": "searchPanelShow"}}];
    this.categories = [];
    for (var i = 0; i < App.user.package.music.length; i++) {
        var a = App.user.package.music[i], o = (e = "", []);
        this.categories.push(a), e = '<div class="movies-holder row-block" data-index="' + i + '"><div class="row-label">' + a.name + '</div><div class="row-content"><div class="movies m' + i + '" data-fn-select="preview" /></div></div>', $(".store").append(e), $('.store .row-block[data-index="' + i + '"]').css("top", t), t += $(".row-block").outerHeight(), a.albums.forEach(function (e) {
            o.push({
                html: '<img src="' + e.poster + '" />',
                data: {
                    "data-id": e.id,
                    "data-fn": "init",
                    "data-name": e.name,
                    "data-artist": e.artist,
                    "data-description": e.description,
                    "data-page": "Album"
                }
            })
        }), this.makeZone({
            items: o,
            selector: '.store .row-block[data-index="' + i + '"] .movies',
            selection: "border"
        })
    }
    this.makeZone({
        items: s,
        selector: ".sub-menu",
        selection: "bg"
    }), this.select($('.store .row-block[data-index="0"] .movies .item:first-child')), this.fnBack = App.pageDefault.page, this.enableMenu("Music")
}, App.Music.preview = function (e) {
    $(".hero .content").html('<div class="music"><h1>' + e.artist + " - " + e.name + "</h1><p>" + e.description + "</p></div>")
}, App.Music.keyUp = function () {
    this.shouldRotate(0) && (this.moveRowDown(), App.LS.setupZones()), App.LS.run("up"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
}, App.Music.keyDown = function () {
    this.shouldRotate(1) && (this.moveRowUp(), App.LS.setupZones()), App.LS.run("down"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
}, App.Music.shouldRotate = function (e) {
    if (-1 === this.getZone().indexOf("movies")) return !1;
    var t = this.object.parents(".row-block"), s = parseInt(t.position().top, 10);
    return e * $(".store .row-block").height() === s
}, App.Music.moveRowUp = function () {
    $(".store .row-block").each(function () {
        var e = $(this).position().top, t = $(this).height();
        e = t <= e ? e - t : t * ($(".store .row-block").length - 1), $(this).css("top", e)
    })
}, App.Music.moveRowDown = function () {
    $(".store .row-block").each(function () {
        var e = $(this).position().top, t = $(this).height();
        e = e < t * ($(".store .row-block").length - 1) ? e + t : 0, $(this).css("top", e)
    })
}, App.Music.keyBack = function () {
    if (-1 < this.getZone().indexOf("movies")) return this.object = $(".sub-menu .item:first-child"), this.select(), !1;
    this.pageLoader(this.fnBack)
}, App.Music.searchPanelGo = function () {
    var t = $('input[name="term"]').val().toLowerCase(), s = [], i = [];
    if ("" !== t) {
        for (var e = 0; e < this.categories.length; e++) {
            App.util.getMusicAlbums(this.categories[e].id).forEach(function (e) {
                -1 < e.name.toLowerCase().indexOf(t) && s.push({id: e.id, name: e.name})
            }), s.forEach(function (e) {
                i.push({
                    html: e.name,
                    data: {"data-id": e.id, "data-fn": "init", "data-page": "Album", "data-close-search": !0}
                })
            })
        }
        this.searchPanelRenderResults(i)
    }
}, App.Music.unload = function () {
    $(".hero .content").html("")
}, App.Advertisement = GWareIPTV.UIBase.Advertisement, App.SeriesBrowse = GWareIPTV.UIBase.SeriesBrowse, App.SeriesDetail = GWareIPTV.UIBase.SeriesDetail, App.SeriesDetail.getEpisodes = function (e, t) {
    var s = this.serie.seasons[e];
    t || ($("body").css("background-image"), s.backdrop, $("body").css({
        "background-image": 'url("' + s.backdrop + '")',
        "background-repeat": "no-repeat",
        "background-size": "cover"
    })), $(".sub-menu .item").removeClass("selected"), $('.sub-menu .item[data-index="' + e + '"]').addClass("selected"), $(".hero .content").html('<div class="details"><div class="title">' + s.name + '</div><div class="rating">' + this.rating2stars(s.rating) + '</div><div class="description">' + this.getDescription(s.descriptions) + "</div></div>"), $(".poster img").attr("src", s.poster), $(".year").html(s.year), $(".language").html(s.language), $(".duration").html(_("{$} minutes", s.length)), $(".actors").html(this.limitActors(s.actors)), $(".tags").html(this.getTags(s.tags));
    for (var i = [], a = 0; a < s.episodes.length; a++) {
        var o = s.episodes[a], n = a + 1 < 10 ? "0" + (a + 1) : a + 1,
            r = App.util.createCoverIcons({id: o.id, type: "episode", icons: ["watch"]});
        i[a] || (i[a] = []), i[a].push({
            html: "<span>" + n + ".</span> " + o.name + r,
            data: {
                "data-page": "SeriesPlayer",
                "data-fn": "init",
                "data-store-id": this.item.storeId,
                "data-id": this.serie.id,
                "data-season": e,
                "data-episode": a
            }
        })
    }
    return App.reports.set({type: 15, name: this.serie.name, id: this.serie.id}), i
}, App.SeriesDetail.unload = function () {
    $(".hero .content").html("")
}, App.SeriesPlayer = GWareIPTV.UIBase.SeriesPlayer, App.SeriesPlayer.onLoad = function (e) {
    this.resetPageLayout(e, !0), $(".content.full").css("background-color", "transparent"), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyUp: this.share.bind(this),
            keyLeft: this.preselect.bind(this, "rewind", !0),
            keyRight: this.preselect.bind(this, "forward", !0),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.createMenu(), this.reportSent = !1, this.storeId = this.item.storeId, this.serieId = this.item.id, this.serie = App.util.getSerie(this.item.id, this.storeId), this.season = this.item.season, this.episode = this.item.episode, this.item.resume && App.history.add("series", {
        id: this.serie.seasons[this.season].episodes[this.episode].id,
        seasonId: this.serie.seasons[this.season].id,
        seriesId: this.serie.id,
        storeId: this.storeId,
        p: this.item.resume
    }), this.hasChildLock(), this.enableMenu("SeriesBrowse"), $(document).on("click", ".report", GWareIPTV.UIBase.SeriesPlayer.keyBlue)
}, App.SeriesStore = GWareIPTV.UIBase.SeriesStore, App.SettingsAbout = GWareIPTV.UIBase.SettingsAbout, App.SettingsCatchupTV = GWareIPTV.UIBase.SettingsCatchupTV, App.SettingsDisclaimer = GWareIPTV.UIBase.SettingsDisclaimer, App.SettingsGeneral = GWareIPTV.UIBase.SettingsGeneral, App.SettingsLanguages = GWareIPTV.UIBase.SettingsLanguages, App.SettingsScreenSaver = GWareIPTV.UIBase.SettingsScreenSaver, App.SettingsSpeedTest = GWareIPTV.UIBase.SettingsSpeedTest, App.SettingsSupport = GWareIPTV.UIBase.SettingsSupport, App.CatchUpHome = GWareIPTV.UIBase.CatchUpHome, App.CatchUp = GWareIPTV.UIBase.CatchUp, App.FavoriteManager = GWareIPTV.UIBase.FavoriteManager, App.Recording = GWareIPTV.UIBase.Recording, App.RecordingPlayer = GWareIPTV.UIBase.RecordingPlayer, App.RecordingPlayer.onLoad = function (e) {
    this.resetPageLayout(e, !0), $(".content.full").css("background-color", "transparent"), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {keyLeft: this.preselect.bind(this, "rewind"), keyRight: this.preselect.bind(this, "forward")}
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "bg",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), App.reports.set({
        type: 6,
        name: this.item.title
    }), $(".movie-header .title").html(this.item.title), this.start(), this.fnBack = this.item.back ? this.item.back : "Recording", this.enableMenu()
}, App.Channel = GWareIPTV.UIBase.Channel, App.Channel.selectChannel = function () {
    this.select($(".qwert .chl .scroller .row .item").first())
}, App.TV = GWareIPTV.UIBase.TV, App.TV.setChannelInfo = function (e) {
    var t = App.epg.getProgrammeByTime(e.id), s = new Date(1e3 * t.ut_start).niceTime(),
        i = new Date(1e3 * t.ut_end).niceTime(), a = $(".tv .channel").clone();
    $(".hero .content").html(""), a.appendTo(".hero .content"), $(".hero .channel .logo").html('<span class="number">' + t.channel.number + '</span><img src="' + t.channel.logo + '" />'), $(".hero .channel .title").html(t.name), $(".hero .channel .date").html(s + " - " + i), $(".hero .channel .description").html(t.description), this.checkImages($(".channel"))
}, App.TV.unload = function () {
    $(".hero .content").html("")
}, App.VODBrowse = GWareIPTV.UIBase.VODBrowse, App.VODBrowse.onLoad = function (e) {
    this.item ? (this.lastId = this.item.id, this.back = this.item.back, this.storeId = this.item.id) : this.storeId = this.lastId, this.store = App.util.getVODStore(this.storeId), this.resetPageLayout(e);
    var a = 0, o = this, t = [{html: _("Back"), data: {"data-fn": "btnBack"}}, {
        html: _("Search"),
        data: {"data-fn": "searchPanelShow"}
    }];
    return this.makeZone({
        items: t,
        selector: ".sub-menu",
        selection: "bg"
    }), this.movieIds = [], this.store.categories.forEach(function (e, t) {
        var s, i = [];
        s = '<div class="movies-holder row-block" data-index="' + t + '"><div class="row-label">' + e.name + '</div><div class="row-content"><div class="movies m' + t + '" data-fn-select="preview" /></div></div>', $(".store").append(s), $('.store .row-block[data-index="' + t + '"]').css("top", a), a += $(".row-block").outerHeight(), e.movies.forEach(function (e) {
            App.VODBrowse.movieIds.push(e.id), coverIcons = App.util.createCoverIcons({
                id: e.id,
                type: "movie",
                icons: ["purchase", "watch"]
            }), i.push({
                html: '<img src="' + App.settings.server_location.movie_location + '/images/movies/' + e.poster + '" />' + coverIcons,
                data: {
                    "data-id": e.id,
                    "data-fn": "init",
                    "data-image": App.settings.server_location.movie_location + '/images/movies/' + e.backdrop,
                    "data-page": "VODDetail"
                }
            })
        }), o.makeZone({
            items: i,
            selector: '.store .row-block[data-index="' + t + '"] .movies',
            selection: "border",
            pager: {type: "cols", count: GWareConfig.zoneItemCount}
        })
    }), 0 < $(".movies-holder:first-child .movies .item").length && (this.object = $(".movies-holder:first-child .movies .item:first-child"), this.select()), this.fnBack = this.back, !0
}, App.VODBrowse.keyUp = function () {
    this.shouldRotate(0) && (this.moveRowDown(), App.LS.setupZones()), App.LS.run("up"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
}, App.VODBrowse.keyDown = function () {
    this.shouldRotate(1) && (this.moveRowUp(), App.LS.setupZones()), App.LS.run("down"), $(".row-block.row-selected").removeClass("row-selected"), $(".item.active").parents(".row-block").addClass("row-selected")
}, App.VODBrowse.shouldRotate = function (e) {
    if (-1 === this.getZone().indexOf("movies")) return !1;
    var t = this.object.parents(".row-block"), s = parseInt(t.position().top, 10);
    return e * $(".store .row-block").height() === s
}, App.VODBrowse.moveRowUp = function () {
    $(".store .row-block").each(function () {
        var e = $(this).position().top, t = $(this).height();
        e = t <= e ? e - t : t * ($(".store .row-block").length - 1), $(this).css("top", e)
    })
}, App.VODBrowse.moveRowDown = function () {
    $(".store .row-block").each(function () {
        var e = $(this).position().top, t = $(this).height();
        e = e < t * ($(".store .row-block").length - 1) ? e + t : 0, $(this).css("top", e)
    })
}, App.VODBrowse.preview = function (e) {
    $(".hero").css({
        "background-size": "cover",
        "background-position": "50% 50%",
        "background-image": 'url("' + e.image + '")'
    })
}, App.VODBrowse.keyBack = function () {
    if (-1 < this.getZone().indexOf("movies")) return this.object = $(".sub-menu .item:first-child"), this.select(), !1;
    this.btnBack()
}, App.VODBrowse.unload = function () {
    $(".hero").css("background-image", "none")
}, App.VODDetail = GWareIPTV.UIBase.VODDetail, App.VODDetail.loadAfter = function () {
    null !== this.movie.backdrop && $("body").css({
        "background-image": 'url("' + App.settings.server_location.movie_location + '/images/movies/' + this.movie.backdrop + '")',
        "background-repeat": "no-repeat",
        "background-size": "cover"
    }), $(".hero .content").html('<div class="details"><div class="title">' + this.movie.name + '</div><div class="rating">' + this.rating2stars(this.movie.rating) + '</div><div class="description">' + this.getDescription(this.movie.moviedescriptions).limit(256) + "</div></div>");
    var e = [{html: _("Previous"), data: {"data-fn": "prev"}}, {
        html: _("Back"),
        data: {"data-fn": "btnBack"}
    }, {
        html: _("Watch Trailer"),
        data: {
            "data-fn": "init",
            "data-page": "VODTrailer",
            "data-name": this.movie.name,
            "data-length": this.movie.length,
            "data-url": this.movie.trailer_url
        }
    }, {
        html: _("Watch Movie"),
        data: {"data-fn": "ppvValidate", "data-ppv": this.ppv, "data-next": this.ppvNext}
    }, {html: _("Next"), data: {"data-fn": "next"}}, {
        html: '<span class="ico ico-share"></span> ' + _("Social Share"),
        data: {"data-fn": "fbShare", "data-title": this.movie.name, "data-type": "movie", "data-id": this.movie.id}
    }];
    void 0 !== App.VODBrowse && void 0 !== App.VODBrowse.movieIds || (e.pop(), e.shift(), this.fnBack = "Home"), this.makeZone({
        rows: [e],
        selector: ".sub-menu",
        selection: "bg"
    })
}, App.VODDetail.unload = function () {
    $(".hero .content").html("")
}, App.VOD = GWareIPTV.UIBase.VOD, App.VODMovie = GWareIPTV.UIBase.VODMovie, App.VODMovie.loaded = function (e) {
    $(".content.full").css("background-color", "transparent"), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyUp: this.share.bind(this),
            keyLeft: this.preselect.bind(this, "rewind", !0),
            keyRight: this.preselect.bind(this, "forward", !0),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.createMenu(), this.movie = e, $(".movie-header .title").html(this.movie.name), $(".progress-holder .duration").html(Math.floor(this.movie.length / 60) + " h " + Math.floor(this.movie.length % 60) + " mins"), this.fnBack = this.item.back ? this.item.back : "VODDetail", this.reportSent = !1, this.hasChildLock(), this.enableMenu(), $(document).on("click", ".report", GWareIPTV.UIBase.VODMovie.keyBlue)
}, App.VODSub = GWareIPTV.UIBase.VODSub, App.VODTrailer = GWareIPTV.UIBase.VODTrailer, App.VODTrailer.onLoad = function (e) {
    this.resetPageLayout(e, !0), $(".content.full").css("background-color", "transparent"), this.makeZone({
        rows: [[{
            html: "&nbsp;",
            style: {width: window.innerWidth, height: window.innerHeight}
        }]],
        selector: ".player-holder",
        selection: "none",
        events: {
            keyLeft: this.preselect.bind(this, "rewind"),
            keyRight: this.preselect.bind(this, "forward"),
            keyDown: this.preselect.bind(this, "play"),
            keyBack: this.stop.bind(this)
        }
    }), this.makeZone({
        rows: [[{
            html: '<span class="ico ico-fast-rewind"></span>',
            data: {"data-fn": "rewind"}
        }, {
            html: '<span class="ico ico-pause"></span>',
            data: {"data-fn": "play"}
        }, {
            html: '<span class="ico ico-stop"></span>',
            data: {"data-fn": "stop"}
        }, {html: '<span class="ico ico-fast-forward"></span>', data: {"data-fn": "forward"}}]],
        selector: ".sub-menu",
        selection: "bg",
        layer: "info",
        events: {keyBack: this.infoHide.bind(this)}
    }), $(".movie-header .title").html(this.item.name), App.player.setup({
        url: this.item.url,
        events: {
            complete: function () {
                this.pageLoader(this.fnBack)
            }.bind(this), time: function (e) {
                $(".progress-holder .progress .bar").css("width", e.percent + "%"), $(".progress-holder .remaining").html(e.remaining.toCounter()), $(".progress-holder .duration").html(e.duration.toCounter())
            }, error: function () {
                pp({
                    message: _("Stream is not available at this moment [2003]"),
                    buttons: [{label: _("OK"), data: {"data-fn": "btnBack"}}]
                })
            }, ready: function () {
                App.player.play()
            }
        }
    }), this.fnBack = "VODDetail", App.reports.set({type: 12, name: this.item.name})
}, App.Youtube = GWareIPTV.UIBase.Youtube, App.YoutubePlayer = GWareIPTV.UIBase.YoutubePlayer;
//# sourceMappingURL=14-rasmalai.min.js.map